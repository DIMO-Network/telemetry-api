"""
A point in time, encoded per RFC-3999. Typically these will be in second precision,
just like the blockchain, and in UTC.
"""
scalar Time

"""
The root query type for the GraphQL schema.
"""
type Query {
  signals(tokenID: Int!, from: Time!, to: Time!): SignalAggregations
    @requiresToken
  signalsLatest(tokenID: Int!): SignalCollection @requiresToken
}

type SignalAggregations {
  tokenID: Int!
}

type SignalCollection {
  tokenID: Int!
}

input FloatAggregation {
  """
  Aggregation type.
  """
  type: FloatAggregationType!

  """
  interval is a time span that used for aggregatting the data with.
  A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix,
  such as "300ms", "-1.5h" or "2h45m". Valid time units are "ms", "s", "m", "h", "d", "w", "y".
  """
  interval: String!
}

input StringAggregation {
  """
  Aggregation type.
  """
  type: StringAggregationType!

  """
  interval is a time span that used for aggregatting the data with.
  A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix,
  such as "300ms", "-1.5h" or "2h45m". Valid time units are "ms", "s", "m", "h"
  """
  interval: String!
}

enum FloatAggregationType {
  AVG
  MED
  MAX
  MIN
  RAND
}

enum StringAggregationType {
  """
  Randomly select a value from the group.
  """
  RAND
  """
  Select the most frequently occurring value in the group.
  """
  TOP
  """
  Return a list of unique values in the group.
  """
  UNIQUE
}
type SignalFloat {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time

  """
  value of the signal
  """
  value: Float
}

type SignalString {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time

  """
  value of the signal
  """
  value: String
}
