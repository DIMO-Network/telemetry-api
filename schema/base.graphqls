"""
A point in time, encoded per RFC-3999. Typically these will be in second precision,
just like the blockchain, and in UTC.
"""
scalar Time

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @isSignal on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @hasAggregation on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
"""
The root query type for the GraphQL schema.
"""
type Query {
  """
  signals returns a collection of signals for a given token in a given time range.
  """
  signals(
    tokenId: Int!
    """
    interval is a time span that used for aggregatting the data with.
    A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix,
    such as "300ms" or "2h45m". Valid time units are "ms", "s", "m", "h"
    """
    interval: String!
    from: Time!
    to: Time!
    filter: SignalFilter
  ): [SignalAggregations!] @requiresToken
  """
  SignalsLatest returns the latest signals for a given token.
  """
  signalsLatest(tokenId: Int!, filter: SignalFilter): SignalCollection @requiresToken
}
type SignalAggregations {
  """
  Timestamp of the aggregated data.
  """
  timestamp: Time!
}

type SignalCollection {
  """
  The last time any signal was seen matching the filter.
  """
  lastSeen: Time
}

enum FloatAggregation {
  AVG
  MED
  MAX
  MIN
  RAND
  FIRST
  LAST
}

enum StringAggregation {
  """
  Randomly select a value from the group.
  """
  RAND
  """
  Select the most frequently occurring value in the group.
  """
  TOP
  """
  Return a list of unique values in the group.
  """
  UNIQUE
  """
  Return value in group associated with the minimum time value.
  """
  FIRST
  """
  Return value in group associated with the maximum time value.
  """
  LAST
}
type SignalFloat {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time!

  """
  value of the signal
  """
  value: Float!
}

type SignalString {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time!

  """
  value of the signal
  """
  value: String!
}

"""
SignalFilter holds the filter parameters for the signal querys.
"""
input SignalFilter {
  """
  Filter signals by source type.
  avalible sources are: "autopi", "macaron", "smartcar", "tesla"
  """
  source: String
}
