"""
A point in time, encoded per RFC-3999. Typically these will be in second precision,
just like the blockchain, and in UTC.
"""
scalar Time

"""
A 20-byte Ethereum address, encoded as a checksummed hex string with 0x prefix.
"""
scalar Address

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @isSignal on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @hasAggregation on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
"""
The root query type for the GraphQL schema.
"""
type Query {
  """
  signals returns a collection of signals for a given token in a given time range.
  """
  signals(
    tokenId: Int!
    """
    interval is a time span that used for aggregatting the data with.
    A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix,
    such as "300ms" or "2h45m". Valid time units are "ms", "s", "m", "h"
    """
    interval: String!
    from: Time!
    to: Time!
    filter: SignalFilter
  ): [SignalAggregations!] @requiresVehicleToken
  """
  SignalsLatest returns the latest signals for a given token.
  """
  signalsLatest(tokenId: Int!, filter: SignalFilter): SignalCollection
    @requiresVehicleToken
  """
  availableSignals returns a list of queryable signal names that have stored data for a given tokenId.
  """
  availableSignals(tokenId: Int!, filter: SignalFilter): [String!]
    @requiresVehicleToken

  signalsMetadata(tokenId: Int!, filter: SignalFilter): SignalsMetadata
    @requiresVehicleToken
}
type SignalAggregations {
  """
  Timestamp of the aggregated data.
  """
  timestamp: Time!
  """
  Approximate Latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-90' Max: '90'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLatitude(agg: FloatAggregation!): Float
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLatitude", forceResolver: true)
    @isSignal
    @hasAggregation

  """
  Approximate Longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-180' Max: '180'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLongitude(agg: FloatAggregation!): Float
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLongitude", forceResolver: true)
    @isSignal
    @hasAggregation
}

type SignalCollection {
  """
  The last time any signal was seen matching the filter.
  """
  lastSeen: Time
  """
  Approximate Latitude of vehicle in WGS 84 geodetic coordinates.
  This returned location is the center of the h3 cell with resolution 6 that the location is in.
  More Info on H3: https://h3geo.org/
  Unit: 'degrees' Min: '-90' Max: '90'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLatitude: SignalFloat
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLatitude")
    @isSignal

  """
  Approximate Longitude of vehicle in WGS 84 geodetic coordinates.
  This returned location is the center of the h3 cell with resolution 6 that the location is in.
  More Info on H3: https://h3geo.org/
  Unit: 'degrees' Min: '-180' Max: '180'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLongitude: SignalFloat
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLongitude")
    @isSignal
}

type SignalsMetadata {
  """
  Total number of signals collected
  """
  numberOfSignals: Int!
  """
  available signal names
  """
  availableSignals: [String!]!
  """
  first seen timestamp
  """
  firstSeen: Time!
  """
  last seen timestamp
  """
  lastSeen: Time!

  """
  signal metadata
  """
  signalMetadata: [SignalMetadata!]!
}

type SignalMetadata {
  """
  signal name
  """
  name: String!
  """
  number of this specific signal
  """
  numberOfSignals: Int!
  """
  first seen timestamp
  """
  firstSeen: Time!
  """
  last seen timestamp
  """
  lastSeen: Time!
}

enum FloatAggregation {
  AVG
  MED
  MAX
  MIN
  RAND
  FIRST
  LAST
}

enum LocationAggregation {
  AVG
  RAND
  FIRST
  LAST
}

enum StringAggregation {
  """
  Randomly select a value from the group.
  """
  RAND
  """
  Select the most frequently occurring value in the group.
  """
  TOP
  """
  Return a list of unique values in the group.
  """
  UNIQUE
  """
  Return value in group associated with the minimum time value.
  """
  FIRST
  """
  Return value in group associated with the maximum time value.
  """
  LAST
}
type SignalFloat {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time!

  """
  value of the signal
  """
  value: Float!
}

type SignalString {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time!

  """
  value of the signal
  """
  value: String!
}

type SignalLocation {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time!

  """
  value of the signal
  """
  value: Location!
}

"""
SignalFilter holds the filter parameters for the signal querys.
"""
input SignalFilter {
  """
  Filter signals by source type.
  available sources are: "autopi", "macaron", "ruptela", "smartcar", "tesla","compass"
  """
  source: String
}

# TODO(elffjs): Unsure about this exact name.
input SignalFloatFilter {
  eq: Float
  neq: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  notIn: [Float!]
  in: [Float!]
  or: [SignalFloatFilter!]
}

type Location {
  latitude: Float!
  longitude: Float!
  hdop: Float!
}

"""
Filters that apply to locations.
"""
input SignalLocationFilter {
  """
  Filter for locations within a polygon. The vertices should be ordered
  clockwise or counterclockwise, and there must be at least 3.

  May produce inaccurate results around the poles and the antimeridian.
  """
  inPolygon: [FilterLocation!]
  """
  Filter for locations within a given distance of a given point. Distances
  are computed using WGS 84, and points that are exactly a distance `radius`
  from the `center` will be included.
  """
  inCircle: InCircleFilter
}

input FilterLocation {
  """
  Latitude in the range [-90, 90].
  """
  latitude: Float!
  """
  Longitude in the range [-180, 180].
  """
  longitude: Float!
}

input InCircleFilter {
  """
  Center of the filter circle.
  """
  center: FilterLocation!
  """
  Radius of the circle around the center, in kilometers (km).
  """
  radius: Float!
}

"""
Filters that apply to strings.
"""
input StringValueFilter {
  """
  eq string equal to the string
  """
  eq: String
  """
  neq string not equal to the string
  """
  neq: String
  """
  notIn array of strings not in the array
  """
  notIn: [String!]
  """
  in array of strings in the array
  """
  in: [String!]
  """
  or array of string value filters
  """
  or: [StringValueFilter!]
}

"""
Filters that apply to string arrays.
"""
input StringArrayFilter {
  """
  containsAny array of strings containing any of the strings in the array
  """
  containsAny: [String!]
  """
  containsAll array of strings containing all of the strings in the array
  """
  containsAll: [String!]
  """
  notContainsAny array of strings does not contain any of the strings in the array
  """
  notContainsAny: [String!]
  """
  notContainsAll array of strings does not contain all of the strings in the array
  """
  notContainsAll: [String!]
  """
  or array of string array filters
  """
  or: [StringArrayFilter!]
}
