// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories.go
//
// Generated by this command:
//
//	mockgen -source=./repositories.go -destination=repositories_mocks_test.go -package=repositories_test
//

// Package repositories_test is a generated GoMock package.
package repositories_test

import (
	context "context"
	reflect "reflect"
	time "time"

	vss "github.com/DIMO-Network/model-garage/pkg/vss"
	model "github.com/DIMO-Network/telemetry-api/internal/graph/model"
	ch "github.com/DIMO-Network/telemetry-api/internal/service/ch"
	gomock "go.uber.org/mock/gomock"
)

// MockCHService is a mock of CHService interface.
type MockCHService struct {
	ctrl     *gomock.Controller
	recorder *MockCHServiceMockRecorder
	isgomock struct{}
}

// MockCHServiceMockRecorder is the mock recorder for MockCHService.
type MockCHServiceMockRecorder struct {
	mock *MockCHService
}

// NewMockCHService creates a new mock instance.
func NewMockCHService(ctrl *gomock.Controller) *MockCHService {
	mock := &MockCHService{ctrl: ctrl}
	mock.recorder = &MockCHServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCHService) EXPECT() *MockCHServiceMockRecorder {
	return m.recorder
}

// GetAggregatedSignals mocks base method.
func (m *MockCHService) GetAggregatedSignals(ctx context.Context, aggArgs *model.AggregatedSignalArgs) ([]*ch.AggSignal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedSignals", ctx, aggArgs)
	ret0, _ := ret[0].([]*ch.AggSignal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAggregatedSignals indicates an expected call of GetAggregatedSignals.
func (mr *MockCHServiceMockRecorder) GetAggregatedSignals(ctx, aggArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedSignals", reflect.TypeOf((*MockCHService)(nil).GetAggregatedSignals), ctx, aggArgs)
}

// GetAvailableSignals mocks base method.
func (m *MockCHService) GetAvailableSignals(ctx context.Context, tokenID uint32, filter *model.SignalFilter) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSignals", ctx, tokenID, filter)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableSignals indicates an expected call of GetAvailableSignals.
func (mr *MockCHServiceMockRecorder) GetAvailableSignals(ctx, tokenID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSignals", reflect.TypeOf((*MockCHService)(nil).GetAvailableSignals), ctx, tokenID, filter)
}

// GetEvents mocks base method.
func (m *MockCHService) GetEvents(ctx context.Context, subject string, from, to time.Time, filter *model.EventFilter) ([]*vss.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, subject, from, to, filter)
	ret0, _ := ret[0].([]*vss.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockCHServiceMockRecorder) GetEvents(ctx, subject, from, to, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockCHService)(nil).GetEvents), ctx, subject, from, to, filter)
}

// GetLatestSignals mocks base method.
func (m *MockCHService) GetLatestSignals(ctx context.Context, latestArgs *model.LatestSignalsArgs) ([]*vss.Signal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSignals", ctx, latestArgs)
	ret0, _ := ret[0].([]*vss.Signal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSignals indicates an expected call of GetLatestSignals.
func (mr *MockCHServiceMockRecorder) GetLatestSignals(ctx, latestArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSignals", reflect.TypeOf((*MockCHService)(nil).GetLatestSignals), ctx, latestArgs)
}

// GetSignalSummaries mocks base method.
func (m *MockCHService) GetSignalSummaries(ctx context.Context, tokenID uint32, filter *model.SignalFilter) ([]*model.SignalDataSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignalSummaries", ctx, tokenID, filter)
	ret0, _ := ret[0].([]*model.SignalDataSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignalSummaries indicates an expected call of GetSignalSummaries.
func (mr *MockCHServiceMockRecorder) GetSignalSummaries(ctx, tokenID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignalSummaries", reflect.TypeOf((*MockCHService)(nil).GetSignalSummaries), ctx, tokenID, filter)
}
