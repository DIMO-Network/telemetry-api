// Code generated by MockGen. DO NOT EDIT.
// Source: attestation.go
//
// Generated by this command:
//
//	mockgen -source=attestation.go -destination=attestation_mock_test.go -package=attestation_test
//

// Package attestation_test is a generated GoMock package.
package attestation_test

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	cloudevent "github.com/DIMO-Network/cloudevent"
	grpc "github.com/DIMO-Network/fetch-api/pkg/grpc"
	gomock "go.uber.org/mock/gomock"
)

// MockindexRepoService is a mock of indexRepoService interface.
type MockindexRepoService struct {
	ctrl     *gomock.Controller
	recorder *MockindexRepoServiceMockRecorder
	isgomock struct{}
}

// MockindexRepoServiceMockRecorder is the mock recorder for MockindexRepoService.
type MockindexRepoServiceMockRecorder struct {
	mock *MockindexRepoService
}

// NewMockindexRepoService creates a new mock instance.
func NewMockindexRepoService(ctrl *gomock.Controller) *MockindexRepoService {
	mock := &MockindexRepoService{ctrl: ctrl}
	mock.recorder = &MockindexRepoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockindexRepoService) EXPECT() *MockindexRepoServiceMockRecorder {
	return m.recorder
}

// GetAllCloudEvents mocks base method.
func (m *MockindexRepoService) GetAllCloudEvents(ctx context.Context, filter *grpc.SearchOptions, limit int32) ([]cloudevent.CloudEvent[json.RawMessage], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCloudEvents", ctx, filter, limit)
	ret0, _ := ret[0].([]cloudevent.CloudEvent[json.RawMessage])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCloudEvents indicates an expected call of GetAllCloudEvents.
func (mr *MockindexRepoServiceMockRecorder) GetAllCloudEvents(ctx, filter, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCloudEvents", reflect.TypeOf((*MockindexRepoService)(nil).GetAllCloudEvents), ctx, filter, limit)
}
