// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package services

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/ethereum/go-ethereum/common"
)

// The AftermarketDeviceBy input is used to specify a unique aftermarket device to query.
type AftermarketDeviceBy struct {
	TokenId *int            `json:"tokenId"`
	Address *common.Address `json:"address"`
	Serial  *string         `json:"serial"`
}

// GetTokenId returns AftermarketDeviceBy.TokenId, and is useful for accessing the field via an interface.
func (v *AftermarketDeviceBy) GetTokenId() *int { return v.TokenId }

// GetAddress returns AftermarketDeviceBy.Address, and is useful for accessing the field via an interface.
func (v *AftermarketDeviceBy) GetAddress() *common.Address { return v.Address }

// GetSerial returns AftermarketDeviceBy.Serial, and is useful for accessing the field via an interface.
func (v *AftermarketDeviceBy) GetSerial() *string { return v.Serial }

// __aftermarketDeviceInput is used internally by genqlient
type __aftermarketDeviceInput struct {
	By AftermarketDeviceBy `json:"by"`
}

// GetBy returns __aftermarketDeviceInput.By, and is useful for accessing the field via an interface.
func (v *__aftermarketDeviceInput) GetBy() AftermarketDeviceBy { return v.By }

// aftermarketDeviceAftermarketDevice includes the requested fields of the GraphQL type AftermarketDevice.
type aftermarketDeviceAftermarketDevice struct {
	// The ERC-721 token id for the device.
	TokenId int `json:"tokenId"`
	// The Ethereum address for the device.
	Address common.Address `json:"address"`
	// The serial number on the side of the device. For AutoPis this is a UUID; for Macarons it is
	// a long decimal number.
	Serial *string `json:"serial"`
	// The Ethereum address of the owner of the device.
	Owner common.Address `json:"owner"`
	// The manufacturer of this aftermarket device.
	Manufacturer aftermarketDeviceAftermarketDeviceManufacturer `json:"manufacturer"`
}

// GetTokenId returns aftermarketDeviceAftermarketDevice.TokenId, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceAftermarketDevice) GetTokenId() int { return v.TokenId }

// GetAddress returns aftermarketDeviceAftermarketDevice.Address, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceAftermarketDevice) GetAddress() common.Address { return v.Address }

// GetSerial returns aftermarketDeviceAftermarketDevice.Serial, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceAftermarketDevice) GetSerial() *string { return v.Serial }

// GetOwner returns aftermarketDeviceAftermarketDevice.Owner, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceAftermarketDevice) GetOwner() common.Address { return v.Owner }

// GetManufacturer returns aftermarketDeviceAftermarketDevice.Manufacturer, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceAftermarketDevice) GetManufacturer() aftermarketDeviceAftermarketDeviceManufacturer {
	return v.Manufacturer
}

// aftermarketDeviceAftermarketDeviceManufacturer includes the requested fields of the GraphQL type Manufacturer.
type aftermarketDeviceAftermarketDeviceManufacturer struct {
	// The ERC-721 token id for the manufacturer.
	TokenId int `json:"tokenId"`
	// The name of the manufacturer.
	Name string `json:"name"`
}

// GetTokenId returns aftermarketDeviceAftermarketDeviceManufacturer.TokenId, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceAftermarketDeviceManufacturer) GetTokenId() int { return v.TokenId }

// GetName returns aftermarketDeviceAftermarketDeviceManufacturer.Name, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceAftermarketDeviceManufacturer) GetName() string { return v.Name }

// aftermarketDeviceResponse is returned by aftermarketDevice on success.
type aftermarketDeviceResponse struct {
	// View a particular aftermarket device.
	AftermarketDevice aftermarketDeviceAftermarketDevice `json:"aftermarketDevice"`
}

// GetAftermarketDevice returns aftermarketDeviceResponse.AftermarketDevice, and is useful for accessing the field via an interface.
func (v *aftermarketDeviceResponse) GetAftermarketDevice() aftermarketDeviceAftermarketDevice {
	return v.AftermarketDevice
}

// The query or mutation executed by aftermarketDevice.
const aftermarketDevice_Operation = `
query aftermarketDevice ($by: AftermarketDeviceBy!) {
	aftermarketDevice(by: $by) {
		tokenId
		address
		serial
		owner
		manufacturer {
			tokenId
			name
		}
	}
}
`

func aftermarketDevice(
	ctx_ context.Context,
	client_ graphql.Client,
	by AftermarketDeviceBy,
) (*aftermarketDeviceResponse, error) {
	req_ := &graphql.Request{
		OpName: "aftermarketDevice",
		Query:  aftermarketDevice_Operation,
		Variables: &__aftermarketDeviceInput{
			By: by,
		},
	}
	var err_ error

	var data_ aftermarketDeviceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
