// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
	"github.com/DIMO-Network/telemetry-api/internal/graph/types"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
	SignalCollection() SignalCollectionResolver
}

type DirectiveRoot struct {
	OneOf             func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	RequiresPrivilege func(ctx context.Context, obj interface{}, next graphql.Resolver, privileges []model.Privilege) (res interface{}, err error)
	RequiresToken     func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	DIMOData struct {
		DefinitionID                                         func(childComplexity int) int
		ID                                                   func(childComplexity int) int
		Source                                               func(childComplexity int) int
		Subject                                              func(childComplexity int) int
		Timestamp                                            func(childComplexity int) int
		TokenID                                              func(childComplexity int) int
		Type                                                 func(childComplexity int) int
		VehicleChassisAxleRow1WheelLeftTirePressure          func(childComplexity int) int
		VehicleChassisAxleRow1WheelRightTirePressure         func(childComplexity int) int
		VehicleChassisAxleRow2WheelLeftTirePressure          func(childComplexity int) int
		VehicleChassisAxleRow2WheelRightTirePressure         func(childComplexity int) int
		VehicleCurrentLocationAltitude                       func(childComplexity int) int
		VehicleCurrentLocationLatitude                       func(childComplexity int) int
		VehicleCurrentLocationLongitude                      func(childComplexity int) int
		VehicleCurrentLocationTimestamp                      func(childComplexity int) int
		VehicleExteriorAirTemperature                        func(childComplexity int) int
		VehicleID                                            func(childComplexity int) int
		VehicleLowVoltageBatteryCurrentVoltage               func(childComplexity int) int
		VehicleOBDBarometricPressure                         func(childComplexity int) int
		VehicleOBDEngineLoad                                 func(childComplexity int) int
		VehicleOBDIntakeTemp                                 func(childComplexity int) int
		VehicleOBDRunTime                                    func(childComplexity int) int
		VehiclePowertrainCombustionEngineECT                 func(childComplexity int) int
		VehiclePowertrainCombustionEngineEngineOilLevel      func(childComplexity int) int
		VehiclePowertrainCombustionEngineSpeed               func(childComplexity int) int
		VehiclePowertrainCombustionEngineTPS                 func(childComplexity int) int
		VehiclePowertrainFuelSystemAbsoluteLevel             func(childComplexity int) int
		VehiclePowertrainFuelSystemSupportedFuelTypes        func(childComplexity int) int
		VehiclePowertrainRange                               func(childComplexity int) int
		VehiclePowertrainTractionBatteryChargingChargeLimit  func(childComplexity int) int
		VehiclePowertrainTractionBatteryChargingIsCharging   func(childComplexity int) int
		VehiclePowertrainTractionBatteryGrossCapacity        func(childComplexity int) int
		VehiclePowertrainTractionBatteryStateOfChargeCurrent func(childComplexity int) int
		VehiclePowertrainTransmissionTravelledDistance       func(childComplexity int) int
		VehiclePowertrainType                                func(childComplexity int) int
		VehicleSpeed                                         func(childComplexity int) int
		VehicleVehicleIdentificationBrand                    func(childComplexity int) int
		VehicleVehicleIdentificationModel                    func(childComplexity int) int
		VehicleVehicleIdentificationYear                     func(childComplexity int) int
	}

	DimoConnection struct {
		Edges      func(childComplexity int) int
		Nodes      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DimoEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		DIMOData func(childComplexity int, page model.PageSelection, filterBy *model.DimosFilter) int
		Node     func(childComplexity int, id string) int
		Signals  func(childComplexity int, tokenID *string, from *time.Time, to *time.Time) int
	}

	SignalCollection struct {
		DefinitionID                                         func(childComplexity int, agg *model.StringAggregation) int
		Source                                               func(childComplexity int, agg *model.StringAggregation) int
		Subject                                              func(childComplexity int, agg *model.StringAggregation) int
		Timestamp                                            func(childComplexity int, agg *model.StringAggregation) int
		TokenID                                              func(childComplexity int) int
		Type                                                 func(childComplexity int, agg *model.StringAggregation) int
		VehicleChassisAxleRow1WheelLeftTirePressure          func(childComplexity int, agg *model.FloatAggregation) int
		VehicleChassisAxleRow1WheelRightTirePressure         func(childComplexity int, agg *model.FloatAggregation) int
		VehicleChassisAxleRow2WheelLeftTirePressure          func(childComplexity int, agg *model.FloatAggregation) int
		VehicleChassisAxleRow2WheelRightTirePressure         func(childComplexity int, agg *model.FloatAggregation) int
		VehicleCurrentLocationAltitude                       func(childComplexity int, agg *model.FloatAggregation) int
		VehicleCurrentLocationLatitude                       func(childComplexity int, agg *model.FloatAggregation) int
		VehicleCurrentLocationLongitude                      func(childComplexity int, agg *model.FloatAggregation) int
		VehicleCurrentLocationTimestamp                      func(childComplexity int, agg *model.StringAggregation) int
		VehicleExteriorAirTemperature                        func(childComplexity int, agg *model.FloatAggregation) int
		VehicleID                                            func(childComplexity int, agg *model.StringAggregation) int
		VehicleLowVoltageBatteryCurrentVoltage               func(childComplexity int, agg *model.FloatAggregation) int
		VehicleOBDBarometricPressure                         func(childComplexity int, agg *model.FloatAggregation) int
		VehicleOBDEngineLoad                                 func(childComplexity int, agg *model.FloatAggregation) int
		VehicleOBDIntakeTemp                                 func(childComplexity int, agg *model.FloatAggregation) int
		VehicleOBDRunTime                                    func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainCombustionEngineEct                 func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainCombustionEngineEngineOilLevel      func(childComplexity int, agg *model.StringAggregation) int
		VehiclePowertrainCombustionEngineSpeed               func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainCombustionEngineTps                 func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainFuelSystemAbsoluteLevel             func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainFuelSystemSupportedFuelTypes        func(childComplexity int, agg *model.StringAggregation) int
		VehiclePowertrainRange                               func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainTractionBatteryChargingChargeLimit  func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainTractionBatteryChargingIsCharging   func(childComplexity int, agg *model.StringAggregation) int
		VehiclePowertrainTractionBatteryGrossCapacity        func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainTractionBatteryStateOfChargeCurrent func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainTransmissionTravelledDistance       func(childComplexity int, agg *model.FloatAggregation) int
		VehiclePowertrainType                                func(childComplexity int, agg *model.StringAggregation) int
		VehicleSpeed                                         func(childComplexity int, agg *model.FloatAggregation) int
		VehicleVehicleIdentificationBrand                    func(childComplexity int, agg *model.StringAggregation) int
		VehicleVehicleIdentificationModel                    func(childComplexity int, agg *model.StringAggregation) int
		VehicleVehicleIdentificationYear                     func(childComplexity int, agg *model.FloatAggregation) int
	}

	SignalFloat struct {
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	SignalString struct {
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}
}

type QueryResolver interface {
	Node(ctx context.Context, id string) (model.Node, error)
	DIMOData(ctx context.Context, page model.PageSelection, filterBy *model.DimosFilter) (*model.DimoConnection, error)
	Signals(ctx context.Context, tokenID *string, from *time.Time, to *time.Time) (*model.SignalCollection, error)
}
type SignalCollectionResolver interface {
	DefinitionID(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	Source(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	Subject(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	Timestamp(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	Type(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehicleChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleCurrentLocationAltitude(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleCurrentLocationLatitude(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleCurrentLocationLongitude(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleCurrentLocationTimestamp(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehicleExteriorAirTemperature(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleLowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleOBDBarometricPressure(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleOBDEngineLoad(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleOBDIntakeTemp(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleOBDRunTime(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehiclePowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehiclePowertrainRange(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehiclePowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehiclePowertrainType(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehicleSpeed(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleVehicleIdentificationBrand(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehicleVehicleIdentificationModel(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
	VehicleVehicleIdentificationYear(ctx context.Context, obj *model.SignalCollection, agg *model.FloatAggregation) ([]*model.SignalFloat, error)
	VehicleID(ctx context.Context, obj *model.SignalCollection, agg *model.StringAggregation) ([]*model.SignalString, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "DIMOData.definitionID":
		if e.complexity.DIMOData.DefinitionID == nil {
			break
		}

		return e.complexity.DIMOData.DefinitionID(childComplexity), true

	case "DIMOData.id":
		if e.complexity.DIMOData.ID == nil {
			break
		}

		return e.complexity.DIMOData.ID(childComplexity), true

	case "DIMOData.source":
		if e.complexity.DIMOData.Source == nil {
			break
		}

		return e.complexity.DIMOData.Source(childComplexity), true

	case "DIMOData.subject":
		if e.complexity.DIMOData.Subject == nil {
			break
		}

		return e.complexity.DIMOData.Subject(childComplexity), true

	case "DIMOData.timestamp":
		if e.complexity.DIMOData.Timestamp == nil {
			break
		}

		return e.complexity.DIMOData.Timestamp(childComplexity), true

	case "DIMOData.tokenID":
		if e.complexity.DIMOData.TokenID == nil {
			break
		}

		return e.complexity.DIMOData.TokenID(childComplexity), true

	case "DIMOData.type":
		if e.complexity.DIMOData.Type == nil {
			break
		}

		return e.complexity.DIMOData.Type(childComplexity), true

	case "DIMOData.vehicleChassisAxleRow1WheelLeftTirePressure":
		if e.complexity.DIMOData.VehicleChassisAxleRow1WheelLeftTirePressure == nil {
			break
		}

		return e.complexity.DIMOData.VehicleChassisAxleRow1WheelLeftTirePressure(childComplexity), true

	case "DIMOData.vehicleChassisAxleRow1WheelRightTirePressure":
		if e.complexity.DIMOData.VehicleChassisAxleRow1WheelRightTirePressure == nil {
			break
		}

		return e.complexity.DIMOData.VehicleChassisAxleRow1WheelRightTirePressure(childComplexity), true

	case "DIMOData.vehicleChassisAxleRow2WheelLeftTirePressure":
		if e.complexity.DIMOData.VehicleChassisAxleRow2WheelLeftTirePressure == nil {
			break
		}

		return e.complexity.DIMOData.VehicleChassisAxleRow2WheelLeftTirePressure(childComplexity), true

	case "DIMOData.vehicleChassisAxleRow2WheelRightTirePressure":
		if e.complexity.DIMOData.VehicleChassisAxleRow2WheelRightTirePressure == nil {
			break
		}

		return e.complexity.DIMOData.VehicleChassisAxleRow2WheelRightTirePressure(childComplexity), true

	case "DIMOData.vehicleCurrentLocationAltitude":
		if e.complexity.DIMOData.VehicleCurrentLocationAltitude == nil {
			break
		}

		return e.complexity.DIMOData.VehicleCurrentLocationAltitude(childComplexity), true

	case "DIMOData.vehicleCurrentLocationLatitude":
		if e.complexity.DIMOData.VehicleCurrentLocationLatitude == nil {
			break
		}

		return e.complexity.DIMOData.VehicleCurrentLocationLatitude(childComplexity), true

	case "DIMOData.vehicleCurrentLocationLongitude":
		if e.complexity.DIMOData.VehicleCurrentLocationLongitude == nil {
			break
		}

		return e.complexity.DIMOData.VehicleCurrentLocationLongitude(childComplexity), true

	case "DIMOData.vehicleCurrentLocationTimestamp":
		if e.complexity.DIMOData.VehicleCurrentLocationTimestamp == nil {
			break
		}

		return e.complexity.DIMOData.VehicleCurrentLocationTimestamp(childComplexity), true

	case "DIMOData.vehicleExteriorAirTemperature":
		if e.complexity.DIMOData.VehicleExteriorAirTemperature == nil {
			break
		}

		return e.complexity.DIMOData.VehicleExteriorAirTemperature(childComplexity), true

	case "DIMOData.vehicleID":
		if e.complexity.DIMOData.VehicleID == nil {
			break
		}

		return e.complexity.DIMOData.VehicleID(childComplexity), true

	case "DIMOData.vehicleLowVoltageBatteryCurrentVoltage":
		if e.complexity.DIMOData.VehicleLowVoltageBatteryCurrentVoltage == nil {
			break
		}

		return e.complexity.DIMOData.VehicleLowVoltageBatteryCurrentVoltage(childComplexity), true

	case "DIMOData.vehicleOBDBarometricPressure":
		if e.complexity.DIMOData.VehicleOBDBarometricPressure == nil {
			break
		}

		return e.complexity.DIMOData.VehicleOBDBarometricPressure(childComplexity), true

	case "DIMOData.vehicleOBDEngineLoad":
		if e.complexity.DIMOData.VehicleOBDEngineLoad == nil {
			break
		}

		return e.complexity.DIMOData.VehicleOBDEngineLoad(childComplexity), true

	case "DIMOData.vehicleOBDIntakeTemp":
		if e.complexity.DIMOData.VehicleOBDIntakeTemp == nil {
			break
		}

		return e.complexity.DIMOData.VehicleOBDIntakeTemp(childComplexity), true

	case "DIMOData.vehicleOBDRunTime":
		if e.complexity.DIMOData.VehicleOBDRunTime == nil {
			break
		}

		return e.complexity.DIMOData.VehicleOBDRunTime(childComplexity), true

	case "DIMOData.vehiclePowertrainCombustionEngineECT":
		if e.complexity.DIMOData.VehiclePowertrainCombustionEngineECT == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainCombustionEngineECT(childComplexity), true

	case "DIMOData.vehiclePowertrainCombustionEngineEngineOilLevel":
		if e.complexity.DIMOData.VehiclePowertrainCombustionEngineEngineOilLevel == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainCombustionEngineEngineOilLevel(childComplexity), true

	case "DIMOData.vehiclePowertrainCombustionEngineSpeed":
		if e.complexity.DIMOData.VehiclePowertrainCombustionEngineSpeed == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainCombustionEngineSpeed(childComplexity), true

	case "DIMOData.vehiclePowertrainCombustionEngineTPS":
		if e.complexity.DIMOData.VehiclePowertrainCombustionEngineTPS == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainCombustionEngineTPS(childComplexity), true

	case "DIMOData.vehiclePowertrainFuelSystemAbsoluteLevel":
		if e.complexity.DIMOData.VehiclePowertrainFuelSystemAbsoluteLevel == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainFuelSystemAbsoluteLevel(childComplexity), true

	case "DIMOData.vehiclePowertrainFuelSystemSupportedFuelTypes":
		if e.complexity.DIMOData.VehiclePowertrainFuelSystemSupportedFuelTypes == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainFuelSystemSupportedFuelTypes(childComplexity), true

	case "DIMOData.vehiclePowertrainRange":
		if e.complexity.DIMOData.VehiclePowertrainRange == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainRange(childComplexity), true

	case "DIMOData.vehiclePowertrainTractionBatteryChargingChargeLimit":
		if e.complexity.DIMOData.VehiclePowertrainTractionBatteryChargingChargeLimit == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainTractionBatteryChargingChargeLimit(childComplexity), true

	case "DIMOData.vehiclePowertrainTractionBatteryChargingIsCharging":
		if e.complexity.DIMOData.VehiclePowertrainTractionBatteryChargingIsCharging == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainTractionBatteryChargingIsCharging(childComplexity), true

	case "DIMOData.vehiclePowertrainTractionBatteryGrossCapacity":
		if e.complexity.DIMOData.VehiclePowertrainTractionBatteryGrossCapacity == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainTractionBatteryGrossCapacity(childComplexity), true

	case "DIMOData.vehiclePowertrainTractionBatteryStateOfChargeCurrent":
		if e.complexity.DIMOData.VehiclePowertrainTractionBatteryStateOfChargeCurrent == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainTractionBatteryStateOfChargeCurrent(childComplexity), true

	case "DIMOData.vehiclePowertrainTransmissionTravelledDistance":
		if e.complexity.DIMOData.VehiclePowertrainTransmissionTravelledDistance == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainTransmissionTravelledDistance(childComplexity), true

	case "DIMOData.vehiclePowertrainType":
		if e.complexity.DIMOData.VehiclePowertrainType == nil {
			break
		}

		return e.complexity.DIMOData.VehiclePowertrainType(childComplexity), true

	case "DIMOData.vehicleSpeed":
		if e.complexity.DIMOData.VehicleSpeed == nil {
			break
		}

		return e.complexity.DIMOData.VehicleSpeed(childComplexity), true

	case "DIMOData.vehicleVehicleIdentificationBrand":
		if e.complexity.DIMOData.VehicleVehicleIdentificationBrand == nil {
			break
		}

		return e.complexity.DIMOData.VehicleVehicleIdentificationBrand(childComplexity), true

	case "DIMOData.vehicleVehicleIdentificationModel":
		if e.complexity.DIMOData.VehicleVehicleIdentificationModel == nil {
			break
		}

		return e.complexity.DIMOData.VehicleVehicleIdentificationModel(childComplexity), true

	case "DIMOData.vehicleVehicleIdentificationYear":
		if e.complexity.DIMOData.VehicleVehicleIdentificationYear == nil {
			break
		}

		return e.complexity.DIMOData.VehicleVehicleIdentificationYear(childComplexity), true

	case "DimoConnection.edges":
		if e.complexity.DimoConnection.Edges == nil {
			break
		}

		return e.complexity.DimoConnection.Edges(childComplexity), true

	case "DimoConnection.nodes":
		if e.complexity.DimoConnection.Nodes == nil {
			break
		}

		return e.complexity.DimoConnection.Nodes(childComplexity), true

	case "DimoConnection.pageInfo":
		if e.complexity.DimoConnection.PageInfo == nil {
			break
		}

		return e.complexity.DimoConnection.PageInfo(childComplexity), true

	case "DimoConnection.totalCount":
		if e.complexity.DimoConnection.TotalCount == nil {
			break
		}

		return e.complexity.DimoConnection.TotalCount(childComplexity), true

	case "DimoEdge.cursor":
		if e.complexity.DimoEdge.Cursor == nil {
			break
		}

		return e.complexity.DimoEdge.Cursor(childComplexity), true

	case "DimoEdge.node":
		if e.complexity.DimoEdge.Node == nil {
			break
		}

		return e.complexity.DimoEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.DIMOData":
		if e.complexity.Query.DIMOData == nil {
			break
		}

		args, err := ec.field_Query_DIMOData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DIMOData(childComplexity, args["page"].(model.PageSelection), args["filterBy"].(*model.DimosFilter)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.Signals":
		if e.complexity.Query.Signals == nil {
			break
		}

		args, err := ec.field_Query_Signals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Signals(childComplexity, args["tokenID"].(*string), args["from"].(*time.Time), args["to"].(*time.Time)), true

	case "SignalCollection.definitionID":
		if e.complexity.SignalCollection.DefinitionID == nil {
			break
		}

		args, err := ec.field_SignalCollection_definitionID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.DefinitionID(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.source":
		if e.complexity.SignalCollection.Source == nil {
			break
		}

		args, err := ec.field_SignalCollection_source_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.Source(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.subject":
		if e.complexity.SignalCollection.Subject == nil {
			break
		}

		args, err := ec.field_SignalCollection_subject_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.Subject(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.timestamp":
		if e.complexity.SignalCollection.Timestamp == nil {
			break
		}

		args, err := ec.field_SignalCollection_timestamp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.Timestamp(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.tokenID":
		if e.complexity.SignalCollection.TokenID == nil {
			break
		}

		return e.complexity.SignalCollection.TokenID(childComplexity), true

	case "SignalCollection.type":
		if e.complexity.SignalCollection.Type == nil {
			break
		}

		args, err := ec.field_SignalCollection_type_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.Type(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehicleChassisAxleRow1WheelLeftTirePressure":
		if e.complexity.SignalCollection.VehicleChassisAxleRow1WheelLeftTirePressure == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleChassisAxleRow1WheelLeftTirePressure(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleChassisAxleRow1WheelRightTirePressure":
		if e.complexity.SignalCollection.VehicleChassisAxleRow1WheelRightTirePressure == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleChassisAxleRow1WheelRightTirePressure(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleChassisAxleRow2WheelLeftTirePressure":
		if e.complexity.SignalCollection.VehicleChassisAxleRow2WheelLeftTirePressure == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleChassisAxleRow2WheelLeftTirePressure(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleChassisAxleRow2WheelRightTirePressure":
		if e.complexity.SignalCollection.VehicleChassisAxleRow2WheelRightTirePressure == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleChassisAxleRow2WheelRightTirePressure(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleCurrentLocationAltitude":
		if e.complexity.SignalCollection.VehicleCurrentLocationAltitude == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleCurrentLocationAltitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleCurrentLocationAltitude(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleCurrentLocationLatitude":
		if e.complexity.SignalCollection.VehicleCurrentLocationLatitude == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleCurrentLocationLatitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleCurrentLocationLatitude(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleCurrentLocationLongitude":
		if e.complexity.SignalCollection.VehicleCurrentLocationLongitude == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleCurrentLocationLongitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleCurrentLocationLongitude(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleCurrentLocationTimestamp":
		if e.complexity.SignalCollection.VehicleCurrentLocationTimestamp == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleCurrentLocationTimestamp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleCurrentLocationTimestamp(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehicleExteriorAirTemperature":
		if e.complexity.SignalCollection.VehicleExteriorAirTemperature == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleExteriorAirTemperature_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleExteriorAirTemperature(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleID":
		if e.complexity.SignalCollection.VehicleID == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleID(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehicleLowVoltageBatteryCurrentVoltage":
		if e.complexity.SignalCollection.VehicleLowVoltageBatteryCurrentVoltage == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleLowVoltageBatteryCurrentVoltage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleLowVoltageBatteryCurrentVoltage(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleOBDBarometricPressure":
		if e.complexity.SignalCollection.VehicleOBDBarometricPressure == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleOBDBarometricPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleOBDBarometricPressure(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleOBDEngineLoad":
		if e.complexity.SignalCollection.VehicleOBDEngineLoad == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleOBDEngineLoad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleOBDEngineLoad(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleOBDIntakeTemp":
		if e.complexity.SignalCollection.VehicleOBDIntakeTemp == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleOBDIntakeTemp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleOBDIntakeTemp(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleOBDRunTime":
		if e.complexity.SignalCollection.VehicleOBDRunTime == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleOBDRunTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleOBDRunTime(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainCombustionEngineECT":
		if e.complexity.SignalCollection.VehiclePowertrainCombustionEngineEct == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainCombustionEngineECT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainCombustionEngineEct(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainCombustionEngineEngineOilLevel":
		if e.complexity.SignalCollection.VehiclePowertrainCombustionEngineEngineOilLevel == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainCombustionEngineEngineOilLevel(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehiclePowertrainCombustionEngineSpeed":
		if e.complexity.SignalCollection.VehiclePowertrainCombustionEngineSpeed == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainCombustionEngineSpeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainCombustionEngineSpeed(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainCombustionEngineTPS":
		if e.complexity.SignalCollection.VehiclePowertrainCombustionEngineTps == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainCombustionEngineTPS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainCombustionEngineTps(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainFuelSystemAbsoluteLevel":
		if e.complexity.SignalCollection.VehiclePowertrainFuelSystemAbsoluteLevel == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainFuelSystemAbsoluteLevel(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainFuelSystemSupportedFuelTypes":
		if e.complexity.SignalCollection.VehiclePowertrainFuelSystemSupportedFuelTypes == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainFuelSystemSupportedFuelTypes(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehiclePowertrainRange":
		if e.complexity.SignalCollection.VehiclePowertrainRange == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainRange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainRange(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainTractionBatteryChargingChargeLimit":
		if e.complexity.SignalCollection.VehiclePowertrainTractionBatteryChargingChargeLimit == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainTractionBatteryChargingChargeLimit(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainTractionBatteryChargingIsCharging":
		if e.complexity.SignalCollection.VehiclePowertrainTractionBatteryChargingIsCharging == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainTractionBatteryChargingIsCharging(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehiclePowertrainTractionBatteryGrossCapacity":
		if e.complexity.SignalCollection.VehiclePowertrainTractionBatteryGrossCapacity == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainTractionBatteryGrossCapacity(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainTractionBatteryStateOfChargeCurrent":
		if e.complexity.SignalCollection.VehiclePowertrainTractionBatteryStateOfChargeCurrent == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainTractionBatteryStateOfChargeCurrent(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainTransmissionTravelledDistance":
		if e.complexity.SignalCollection.VehiclePowertrainTransmissionTravelledDistance == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainTransmissionTravelledDistance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainTransmissionTravelledDistance(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehiclePowertrainType":
		if e.complexity.SignalCollection.VehiclePowertrainType == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehiclePowertrainType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehiclePowertrainType(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehicleSpeed":
		if e.complexity.SignalCollection.VehicleSpeed == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleSpeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleSpeed(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalCollection.vehicleVehicleIdentificationBrand":
		if e.complexity.SignalCollection.VehicleVehicleIdentificationBrand == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleVehicleIdentificationBrand_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleVehicleIdentificationBrand(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehicleVehicleIdentificationModel":
		if e.complexity.SignalCollection.VehicleVehicleIdentificationModel == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleVehicleIdentificationModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleVehicleIdentificationModel(childComplexity, args["agg"].(*model.StringAggregation)), true

	case "SignalCollection.vehicleVehicleIdentificationYear":
		if e.complexity.SignalCollection.VehicleVehicleIdentificationYear == nil {
			break
		}

		args, err := ec.field_SignalCollection_vehicleVehicleIdentificationYear_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalCollection.VehicleVehicleIdentificationYear(childComplexity, args["agg"].(*model.FloatAggregation)), true

	case "SignalFloat.timestamp":
		if e.complexity.SignalFloat.Timestamp == nil {
			break
		}

		return e.complexity.SignalFloat.Timestamp(childComplexity), true

	case "SignalFloat.value":
		if e.complexity.SignalFloat.Value == nil {
			break
		}

		return e.complexity.SignalFloat.Value(childComplexity), true

	case "SignalString.timestamp":
		if e.complexity.SignalString.Timestamp == nil {
			break
		}

		return e.complexity.SignalString.Timestamp(childComplexity), true

	case "SignalString.value":
		if e.complexity.SignalString.Value == nil {
			break
		}

		return e.complexity.SignalString.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputDimosFilter,
		ec.unmarshalInputFloatAggregation,
		ec.unmarshalInputPageSelection,
		ec.unmarshalInputStringAggregation,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../schema/auth.graphqls", Input: `scalar Map

directive @requiresPrivilege(
  privileges: [Privilege!]!
) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

enum Privilege {
  VehicleNonLocationData
  VehicleCommands
  VehicleCurrentLocation
  VehicleAllTimeLocation
  VehicleVinCredential
}

directive @requiresToken on FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "../../schema/base.graphqls", Input: `"""
A point in time, encoded per RFC-3999. Typically these will be in second precision,
just like the blockchain, and in UTC.
"""
scalar Time

"""
This directive on an input object indicates that a client must specify one of the
fields of the object and no others. Typically used for lookups.
"""
directive @oneOf on INPUT_OBJECT

"""
The root query type for the GraphQL schema.
"""
type Query {
  """
  View a particular node.
  """
  node(
    """
    The ID of the node.
    """
    id: ID!
  ): Node

  DIMOData(
    """
    Select the page of data to retrieve.
    """
    page: PageSelection!
    """
    Filter the dimos based on specific criteria.
    """
    filterBy: DimosFilter
  ): DimoConnection @requiresToken

  Signals(tokenID: ID, from: Time, to: Time): SignalCollection @requiresToken
}

"""
The DimosFilter input is used to specify filtering criteria for querying dimos.
Dimos must match all of the specified criteria.
"""
input DimosFilter {
  tokenID: Int!
  since: Time!
  until: Time!
}

# Shared Types
interface Node {
  id: ID!
}

type DimoConnection {
  totalCount: Int!
  edges: [DimoEdge!]!
  nodes: [DIMOData!]!
  pageInfo: PageInfo!
}

type DimoEdge {
  cursor: String!
  node: DIMOData!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}
input PageSelection {
  """
  The number of items to retrieve.
  Mutually exclusive with ` + "`" + `last` + "`" + `.
  """
  first: Int
  """
  A cursor for pagination. Retrieve items after this cursor.
  """
  after: String
  """
  The number of items to retrieve from the end of the list.
  Mutually exclusive with ` + "`" + `first` + "`" + `.
  """
  last: Int
  """
  A cursor for pagination. Retrieve items before this cursor.
  """
  before: String
}

type DIMOData implements Node {
  id: ID!
  tokenID: Int!
}

type SignalCollection {
  tokenID: Int!
}

input FloatAggregation {
  """
  Aggregation type.
  """
  type: FloatAggregationType

  """
  interval is a time span that used for aggregatting the data.
  """
  interval: Int
}

input StringAggregation {
  """
  Aggregation type.
  """
  type: StringAggregationType

  """
  interval is a time span that used for aggregatting the data.
  """
  interval: Int
}

enum FloatAggregationType {
  avg
  med
  max
  min
  rand
}

enum StringAggregationType {
  """
  Randomly select a value from the group.
  """
  rand
  """
  Select the most frequently occurring value in the group.
  """
  top
  """
  Return a list of unique values in the group.
  """
  unique
}
`, BuiltIn: false},
	{Name: "../../schema/dimodata-gql.graphqls", Input: `
# Code generated by "model-garage" DO NOT EDIT.
extend type DIMOData {
  """
  ID for the vehicles definition
  Required Privlieges: [VehicleNonLocationData]
  """
  definitionID: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  where the data was sourced from
  Required Privlieges: [VehicleNonLocationData]
  """
  source: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  subjet of this vehicle data
  Required Privlieges: [VehicleNonLocationData]
  """
  subject: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  timestamp of when this data was colllected
  Required Privlieges: [VehicleNonLocationData]
  """
  timestamp: Time
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  type of data collected
  Required Privlieges: [VehicleNonLocationData]
  """
  type: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow1WheelLeftTirePressure: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow1WheelRightTirePressure: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow2WheelLeftTirePressure: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow2WheelRightTirePressure: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationAltitude: Float
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])
  """
  Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationLatitude: Float
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])
  """
  Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationLongitude: Float
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])
  """
  Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationTimestamp: Time
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])
  """
  Air temperature outside the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleExteriorAirTemperature: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Current Voltage of the low voltage battery.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleLowVoltageBatteryCurrentVoltage: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  PID 33 - Barometric pressure
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDBarometricPressure: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  PID 04 - Engine load in percent - 0 = no load, 100 = full load
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDEngineLoad: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  PID 0F - Intake temperature
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDIntakeTemp: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  PID 1F - Engine run time
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDRunTime: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Engine coolant temperature.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineECT: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Engine oil level.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineEngineOilLevel: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Engine speed measured as rotations per minute.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineSpeed: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Current throttle position.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineTPS: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Current available fuel in the fuel tank expressed in liters.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainFuelSystemAbsoluteLevel: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  High level information of fuel types supported
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainFuelSystemSupportedFuelTypes: [String]
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Remaining range in meters using all energy sources available in the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainRange: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Target charge limit (state of charge) for battery.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryChargingChargeLimit: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryChargingIsCharging: Boolean
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Gross capacity of the battery.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryGrossCapacity: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryStateOfChargeCurrent: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Odometer reading, total distance travelled during the lifetime of the transmission.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTransmissionTravelledDistance: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Defines the powertrain type of the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainType: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Vehicle speed.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleSpeed: Float
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Vehicle brand or manufacturer.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleVehicleIdentificationBrand: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Vehicle model.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleVehicleIdentificationModel: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  Model year of the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleVehicleIdentificationYear: Int
    @requiresPrivilege(privileges: [VehicleNonLocationData])
  """
  unque DIMO ID for the vehicle
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleID: String
    @requiresPrivilege(privileges: [VehicleNonLocationData])
}`, BuiltIn: false},
	{Name: "../../schema/signalcollection-gql.graphqls", Input: `# Code generated by "model-garage" DO NOT EDIT.
extend type SignalCollection {
  """
  ID for the vehicles definition
  Required Privlieges: [VehicleNonLocationData]
  """
  definitionID(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  where the data was sourced from
  Required Privlieges: [VehicleNonLocationData]
  """
  source(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  subjet of this vehicle data
  Required Privlieges: [VehicleNonLocationData]
  """
  subject(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  timestamp of when this data was colllected
  Required Privlieges: [VehicleNonLocationData]
  """
  timestamp(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  type of data collected
  Required Privlieges: [VehicleNonLocationData]
  """
  type(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow1WheelLeftTirePressure(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow1WheelRightTirePressure(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow2WheelLeftTirePressure(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Tire pressure in kilo-Pascal.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleChassisAxleRow2WheelRightTirePressure(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationAltitude(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])

  """
  Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationLatitude(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])

  """
  Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationLongitude(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])

  """
  Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone.
  Required Privlieges: [VehicleAllTimeLocation]
  """
  vehicleCurrentLocationTimestamp(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleAllTimeLocation])

  """
  Air temperature outside the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleExteriorAirTemperature(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Current Voltage of the low voltage battery.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleLowVoltageBatteryCurrentVoltage(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  PID 33 - Barometric pressure
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDBarometricPressure(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  PID 04 - Engine load in percent - 0 = no load, 100 = full load
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDEngineLoad(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  PID 0F - Intake temperature
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDIntakeTemp(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  PID 1F - Engine run time
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleOBDRunTime(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Engine coolant temperature.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineECT(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Engine oil level.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineEngineOilLevel(
    agg: StringAggregation
  ): [SignalString!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Engine speed measured as rotations per minute.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineSpeed(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Current throttle position.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainCombustionEngineTPS(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Current available fuel in the fuel tank expressed in liters.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainFuelSystemAbsoluteLevel(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  High level information of fuel types supported
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainFuelSystemSupportedFuelTypes(
    agg: StringAggregation
  ): [SignalString!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Remaining range in meters using all energy sources available in the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainRange(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Target charge limit (state of charge) for battery.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryChargingChargeLimit(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryChargingIsCharging(
    agg: StringAggregation
  ): [SignalString!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Gross capacity of the battery.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryGrossCapacity(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTractionBatteryStateOfChargeCurrent(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Odometer reading, total distance travelled during the lifetime of the transmission.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainTransmissionTravelledDistance(
    agg: FloatAggregation
  ): [SignalFloat!] @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Defines the powertrain type of the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehiclePowertrainType(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Vehicle speed.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleSpeed(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Vehicle brand or manufacturer.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleVehicleIdentificationBrand(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Vehicle model.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleVehicleIdentificationModel(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  Model year of the vehicle.
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleVehicleIdentificationYear(agg: FloatAggregation): [SignalFloat!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])

  """
  unque DIMO ID for the vehicle
  Required Privlieges: [VehicleNonLocationData]
  """
  vehicleID(agg: StringAggregation): [SignalString!]
    @requiresPrivilege(privileges: [VehicleNonLocationData])
}

type SignalFloat {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time

  """
  value of the signal
  """
  value: Float
}

type SignalString {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time

  """
  value of the signal
  """
  value: String
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_requiresPrivilege_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.Privilege
	if tmp, ok := rawArgs["privileges"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("privileges"))
		arg0, err = ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["privileges"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_DIMOData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PageSelection
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalNPageSelection2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPageSelection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *model.DimosFilter
	if tmp, ok := rawArgs["filterBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterBy"))
		arg1, err = ec.unmarshalODimosFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimosFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filterBy"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_Signals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["tokenID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenID"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tokenID"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg1, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_definitionID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_source_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_subject_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_timestamp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleCurrentLocationAltitude_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleCurrentLocationLatitude_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleCurrentLocationLongitude_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleCurrentLocationTimestamp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleExteriorAirTemperature_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleLowVoltageBatteryCurrentVoltage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleOBDBarometricPressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleOBDEngineLoad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleOBDIntakeTemp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleOBDRunTime_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainCombustionEngineECT_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainCombustionEngineSpeed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainCombustionEngineTPS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainRange_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainTransmissionTravelledDistance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehiclePowertrainType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleSpeed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleVehicleIdentificationBrand_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleVehicleIdentificationModel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StringAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field_SignalCollection_vehicleVehicleIdentificationYear_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FloatAggregation
	if tmp, ok := rawArgs["agg"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
		arg0, err = ec.unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agg"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _DIMOData_id(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_tokenID(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_tokenID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_tokenID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_definitionID(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_definitionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DefinitionID, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_definitionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_source(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Source, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_subject(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Subject, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_subject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Timestamp, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_type(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Type, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleChassisAxleRow1WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleChassisAxleRow1WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleChassisAxleRow1WheelLeftTirePressure, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint16)
	fc.Result = res
	return ec.marshalOInt2ᚖuint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleChassisAxleRow1WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleChassisAxleRow1WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleChassisAxleRow1WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleChassisAxleRow1WheelRightTirePressure, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint16)
	fc.Result = res
	return ec.marshalOInt2ᚖuint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleChassisAxleRow1WheelRightTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleChassisAxleRow2WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleChassisAxleRow2WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleChassisAxleRow2WheelLeftTirePressure, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint16)
	fc.Result = res
	return ec.marshalOInt2ᚖuint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleChassisAxleRow2WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleChassisAxleRow2WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleChassisAxleRow2WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleChassisAxleRow2WheelRightTirePressure, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint16)
	fc.Result = res
	return ec.marshalOInt2ᚖuint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleChassisAxleRow2WheelRightTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleCurrentLocationAltitude(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleCurrentLocationAltitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleCurrentLocationAltitude, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleCurrentLocationAltitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleCurrentLocationLatitude(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleCurrentLocationLatitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleCurrentLocationLatitude, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleCurrentLocationLatitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleCurrentLocationLongitude(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleCurrentLocationLongitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleCurrentLocationLongitude, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleCurrentLocationLongitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleCurrentLocationTimestamp(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleCurrentLocationTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleCurrentLocationTimestamp, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleCurrentLocationTimestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleExteriorAirTemperature(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleExteriorAirTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleExteriorAirTemperature, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleExteriorAirTemperature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleLowVoltageBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleLowVoltageBatteryCurrentVoltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleLowVoltageBatteryCurrentVoltage, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleLowVoltageBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleOBDBarometricPressure(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleOBDBarometricPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleOBDBarometricPressure, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleOBDBarometricPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleOBDEngineLoad(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleOBDEngineLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleOBDEngineLoad, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleOBDEngineLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleOBDIntakeTemp(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleOBDIntakeTemp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleOBDIntakeTemp, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleOBDIntakeTemp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleOBDRunTime(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleOBDRunTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleOBDRunTime, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleOBDRunTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainCombustionEngineECT(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineECT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainCombustionEngineECT, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*int16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *int16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int16)
	fc.Result = res
	return ec.marshalOInt2ᚖint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainCombustionEngineECT(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainCombustionEngineEngineOilLevel(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineEngineOilLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainCombustionEngineEngineOilLevel, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainCombustionEngineEngineOilLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainCombustionEngineSpeed(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainCombustionEngineSpeed, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint16)
	fc.Result = res
	return ec.marshalOInt2ᚖuint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainCombustionEngineSpeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainCombustionEngineTPS(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineTPS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainCombustionEngineTPS, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint8); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint8`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint8)
	fc.Result = res
	return ec.marshalOInt2ᚖuint8(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainCombustionEngineTPS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainFuelSystemAbsoluteLevel(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainFuelSystemAbsoluteLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainFuelSystemAbsoluteLevel, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainFuelSystemAbsoluteLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainFuelSystemSupportedFuelTypes, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainRange(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainRange, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint32)
	fc.Result = res
	return ec.marshalOInt2ᚖuint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainTractionBatteryChargingChargeLimit, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint8); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint8`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint8)
	fc.Result = res
	return ec.marshalOInt2ᚖuint8(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainTractionBatteryChargingIsCharging(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingIsCharging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainTractionBatteryChargingIsCharging, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingIsCharging(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainTractionBatteryGrossCapacity(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryGrossCapacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainTractionBatteryGrossCapacity, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint16)
	fc.Result = res
	return ec.marshalOInt2ᚖuint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainTractionBatteryGrossCapacity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainTractionBatteryStateOfChargeCurrent, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainTransmissionTravelledDistance(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainTransmissionTravelledDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainTransmissionTravelledDistance, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainTransmissionTravelledDistance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehiclePowertrainType(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehiclePowertrainType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehiclePowertrainType, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehiclePowertrainType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleSpeed(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleSpeed, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float32); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float32`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float32)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleSpeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleVehicleIdentificationBrand(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleVehicleIdentificationBrand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleVehicleIdentificationBrand, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleVehicleIdentificationBrand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleVehicleIdentificationModel(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleVehicleIdentificationModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleVehicleIdentificationModel, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleVehicleIdentificationModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleVehicleIdentificationYear(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleVehicleIdentificationYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleVehicleIdentificationYear, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*uint16); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *uint16`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uint16)
	fc.Result = res
	return ec.marshalOInt2ᚖuint16(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleVehicleIdentificationYear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DIMOData_vehicleID(ctx context.Context, field graphql.CollectedField, obj *model.DIMOData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DIMOData_vehicleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VehicleID, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DIMOData_vehicleID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DIMOData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DimoConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.DimoConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DimoConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DimoConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DimoConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DimoConnection_edges(ctx context.Context, field graphql.CollectedField, obj *model.DimoConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DimoConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DimoEdge)
	fc.Result = res
	return ec.marshalNDimoEdge2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimoEdgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DimoConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DimoConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_DimoEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_DimoEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DimoEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DimoConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DimoConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DimoConnection_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DIMOData)
	fc.Result = res
	return ec.marshalNDIMOData2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDIMODataᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DimoConnection_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DimoConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DIMOData_id(ctx, field)
			case "tokenID":
				return ec.fieldContext_DIMOData_tokenID(ctx, field)
			case "definitionID":
				return ec.fieldContext_DIMOData_definitionID(ctx, field)
			case "source":
				return ec.fieldContext_DIMOData_source(ctx, field)
			case "subject":
				return ec.fieldContext_DIMOData_subject(ctx, field)
			case "timestamp":
				return ec.fieldContext_DIMOData_timestamp(ctx, field)
			case "type":
				return ec.fieldContext_DIMOData_type(ctx, field)
			case "vehicleChassisAxleRow1WheelLeftTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow1WheelLeftTirePressure(ctx, field)
			case "vehicleChassisAxleRow1WheelRightTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow1WheelRightTirePressure(ctx, field)
			case "vehicleChassisAxleRow2WheelLeftTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow2WheelLeftTirePressure(ctx, field)
			case "vehicleChassisAxleRow2WheelRightTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow2WheelRightTirePressure(ctx, field)
			case "vehicleCurrentLocationAltitude":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationAltitude(ctx, field)
			case "vehicleCurrentLocationLatitude":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationLatitude(ctx, field)
			case "vehicleCurrentLocationLongitude":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationLongitude(ctx, field)
			case "vehicleCurrentLocationTimestamp":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationTimestamp(ctx, field)
			case "vehicleExteriorAirTemperature":
				return ec.fieldContext_DIMOData_vehicleExteriorAirTemperature(ctx, field)
			case "vehicleLowVoltageBatteryCurrentVoltage":
				return ec.fieldContext_DIMOData_vehicleLowVoltageBatteryCurrentVoltage(ctx, field)
			case "vehicleOBDBarometricPressure":
				return ec.fieldContext_DIMOData_vehicleOBDBarometricPressure(ctx, field)
			case "vehicleOBDEngineLoad":
				return ec.fieldContext_DIMOData_vehicleOBDEngineLoad(ctx, field)
			case "vehicleOBDIntakeTemp":
				return ec.fieldContext_DIMOData_vehicleOBDIntakeTemp(ctx, field)
			case "vehicleOBDRunTime":
				return ec.fieldContext_DIMOData_vehicleOBDRunTime(ctx, field)
			case "vehiclePowertrainCombustionEngineECT":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineECT(ctx, field)
			case "vehiclePowertrainCombustionEngineEngineOilLevel":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineEngineOilLevel(ctx, field)
			case "vehiclePowertrainCombustionEngineSpeed":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineSpeed(ctx, field)
			case "vehiclePowertrainCombustionEngineTPS":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineTPS(ctx, field)
			case "vehiclePowertrainFuelSystemAbsoluteLevel":
				return ec.fieldContext_DIMOData_vehiclePowertrainFuelSystemAbsoluteLevel(ctx, field)
			case "vehiclePowertrainFuelSystemSupportedFuelTypes":
				return ec.fieldContext_DIMOData_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx, field)
			case "vehiclePowertrainRange":
				return ec.fieldContext_DIMOData_vehiclePowertrainRange(ctx, field)
			case "vehiclePowertrainTractionBatteryChargingChargeLimit":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx, field)
			case "vehiclePowertrainTractionBatteryChargingIsCharging":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingIsCharging(ctx, field)
			case "vehiclePowertrainTractionBatteryGrossCapacity":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryGrossCapacity(ctx, field)
			case "vehiclePowertrainTractionBatteryStateOfChargeCurrent":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx, field)
			case "vehiclePowertrainTransmissionTravelledDistance":
				return ec.fieldContext_DIMOData_vehiclePowertrainTransmissionTravelledDistance(ctx, field)
			case "vehiclePowertrainType":
				return ec.fieldContext_DIMOData_vehiclePowertrainType(ctx, field)
			case "vehicleSpeed":
				return ec.fieldContext_DIMOData_vehicleSpeed(ctx, field)
			case "vehicleVehicleIdentificationBrand":
				return ec.fieldContext_DIMOData_vehicleVehicleIdentificationBrand(ctx, field)
			case "vehicleVehicleIdentificationModel":
				return ec.fieldContext_DIMOData_vehicleVehicleIdentificationModel(ctx, field)
			case "vehicleVehicleIdentificationYear":
				return ec.fieldContext_DIMOData_vehicleVehicleIdentificationYear(ctx, field)
			case "vehicleID":
				return ec.fieldContext_DIMOData_vehicleID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DIMOData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DimoConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *model.DimoConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DimoConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DimoConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DimoConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DimoEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.DimoEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DimoEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DimoEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DimoEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DimoEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.DimoEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DimoEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DIMOData)
	fc.Result = res
	return ec.marshalNDIMOData2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDIMOData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DimoEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DimoEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DIMOData_id(ctx, field)
			case "tokenID":
				return ec.fieldContext_DIMOData_tokenID(ctx, field)
			case "definitionID":
				return ec.fieldContext_DIMOData_definitionID(ctx, field)
			case "source":
				return ec.fieldContext_DIMOData_source(ctx, field)
			case "subject":
				return ec.fieldContext_DIMOData_subject(ctx, field)
			case "timestamp":
				return ec.fieldContext_DIMOData_timestamp(ctx, field)
			case "type":
				return ec.fieldContext_DIMOData_type(ctx, field)
			case "vehicleChassisAxleRow1WheelLeftTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow1WheelLeftTirePressure(ctx, field)
			case "vehicleChassisAxleRow1WheelRightTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow1WheelRightTirePressure(ctx, field)
			case "vehicleChassisAxleRow2WheelLeftTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow2WheelLeftTirePressure(ctx, field)
			case "vehicleChassisAxleRow2WheelRightTirePressure":
				return ec.fieldContext_DIMOData_vehicleChassisAxleRow2WheelRightTirePressure(ctx, field)
			case "vehicleCurrentLocationAltitude":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationAltitude(ctx, field)
			case "vehicleCurrentLocationLatitude":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationLatitude(ctx, field)
			case "vehicleCurrentLocationLongitude":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationLongitude(ctx, field)
			case "vehicleCurrentLocationTimestamp":
				return ec.fieldContext_DIMOData_vehicleCurrentLocationTimestamp(ctx, field)
			case "vehicleExteriorAirTemperature":
				return ec.fieldContext_DIMOData_vehicleExteriorAirTemperature(ctx, field)
			case "vehicleLowVoltageBatteryCurrentVoltage":
				return ec.fieldContext_DIMOData_vehicleLowVoltageBatteryCurrentVoltage(ctx, field)
			case "vehicleOBDBarometricPressure":
				return ec.fieldContext_DIMOData_vehicleOBDBarometricPressure(ctx, field)
			case "vehicleOBDEngineLoad":
				return ec.fieldContext_DIMOData_vehicleOBDEngineLoad(ctx, field)
			case "vehicleOBDIntakeTemp":
				return ec.fieldContext_DIMOData_vehicleOBDIntakeTemp(ctx, field)
			case "vehicleOBDRunTime":
				return ec.fieldContext_DIMOData_vehicleOBDRunTime(ctx, field)
			case "vehiclePowertrainCombustionEngineECT":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineECT(ctx, field)
			case "vehiclePowertrainCombustionEngineEngineOilLevel":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineEngineOilLevel(ctx, field)
			case "vehiclePowertrainCombustionEngineSpeed":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineSpeed(ctx, field)
			case "vehiclePowertrainCombustionEngineTPS":
				return ec.fieldContext_DIMOData_vehiclePowertrainCombustionEngineTPS(ctx, field)
			case "vehiclePowertrainFuelSystemAbsoluteLevel":
				return ec.fieldContext_DIMOData_vehiclePowertrainFuelSystemAbsoluteLevel(ctx, field)
			case "vehiclePowertrainFuelSystemSupportedFuelTypes":
				return ec.fieldContext_DIMOData_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx, field)
			case "vehiclePowertrainRange":
				return ec.fieldContext_DIMOData_vehiclePowertrainRange(ctx, field)
			case "vehiclePowertrainTractionBatteryChargingChargeLimit":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx, field)
			case "vehiclePowertrainTractionBatteryChargingIsCharging":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryChargingIsCharging(ctx, field)
			case "vehiclePowertrainTractionBatteryGrossCapacity":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryGrossCapacity(ctx, field)
			case "vehiclePowertrainTractionBatteryStateOfChargeCurrent":
				return ec.fieldContext_DIMOData_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx, field)
			case "vehiclePowertrainTransmissionTravelledDistance":
				return ec.fieldContext_DIMOData_vehiclePowertrainTransmissionTravelledDistance(ctx, field)
			case "vehiclePowertrainType":
				return ec.fieldContext_DIMOData_vehiclePowertrainType(ctx, field)
			case "vehicleSpeed":
				return ec.fieldContext_DIMOData_vehicleSpeed(ctx, field)
			case "vehicleVehicleIdentificationBrand":
				return ec.fieldContext_DIMOData_vehicleVehicleIdentificationBrand(ctx, field)
			case "vehicleVehicleIdentificationModel":
				return ec.fieldContext_DIMOData_vehicleVehicleIdentificationModel(ctx, field)
			case "vehicleVehicleIdentificationYear":
				return ec.fieldContext_DIMOData_vehicleVehicleIdentificationYear(ctx, field)
			case "vehicleID":
				return ec.fieldContext_DIMOData_vehicleID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DIMOData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.Node)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_DIMOData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_DIMOData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().DIMOData(rctx, fc.Args["page"].(model.PageSelection), fc.Args["filterBy"].(*model.DimosFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RequiresToken == nil {
				return nil, errors.New("directive requiresToken is not implemented")
			}
			return ec.directives.RequiresToken(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DimoConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.DimoConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DimoConnection)
	fc.Result = res
	return ec.marshalODimoConnection2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimoConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_DIMOData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_DimoConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_DimoConnection_edges(ctx, field)
			case "nodes":
				return ec.fieldContext_DimoConnection_nodes(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DimoConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DimoConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_DIMOData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Signals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Signals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Signals(rctx, fc.Args["tokenID"].(*string), fc.Args["from"].(*time.Time), fc.Args["to"].(*time.Time))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RequiresToken == nil {
				return nil, errors.New("directive requiresToken is not implemented")
			}
			return ec.directives.RequiresToken(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalCollection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalCollection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalCollection)
	fc.Result = res
	return ec.marshalOSignalCollection2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Signals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tokenID":
				return ec.fieldContext_SignalCollection_tokenID(ctx, field)
			case "definitionID":
				return ec.fieldContext_SignalCollection_definitionID(ctx, field)
			case "source":
				return ec.fieldContext_SignalCollection_source(ctx, field)
			case "subject":
				return ec.fieldContext_SignalCollection_subject(ctx, field)
			case "timestamp":
				return ec.fieldContext_SignalCollection_timestamp(ctx, field)
			case "type":
				return ec.fieldContext_SignalCollection_type(ctx, field)
			case "vehicleChassisAxleRow1WheelLeftTirePressure":
				return ec.fieldContext_SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure(ctx, field)
			case "vehicleChassisAxleRow1WheelRightTirePressure":
				return ec.fieldContext_SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure(ctx, field)
			case "vehicleChassisAxleRow2WheelLeftTirePressure":
				return ec.fieldContext_SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure(ctx, field)
			case "vehicleChassisAxleRow2WheelRightTirePressure":
				return ec.fieldContext_SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure(ctx, field)
			case "vehicleCurrentLocationAltitude":
				return ec.fieldContext_SignalCollection_vehicleCurrentLocationAltitude(ctx, field)
			case "vehicleCurrentLocationLatitude":
				return ec.fieldContext_SignalCollection_vehicleCurrentLocationLatitude(ctx, field)
			case "vehicleCurrentLocationLongitude":
				return ec.fieldContext_SignalCollection_vehicleCurrentLocationLongitude(ctx, field)
			case "vehicleCurrentLocationTimestamp":
				return ec.fieldContext_SignalCollection_vehicleCurrentLocationTimestamp(ctx, field)
			case "vehicleExteriorAirTemperature":
				return ec.fieldContext_SignalCollection_vehicleExteriorAirTemperature(ctx, field)
			case "vehicleLowVoltageBatteryCurrentVoltage":
				return ec.fieldContext_SignalCollection_vehicleLowVoltageBatteryCurrentVoltage(ctx, field)
			case "vehicleOBDBarometricPressure":
				return ec.fieldContext_SignalCollection_vehicleOBDBarometricPressure(ctx, field)
			case "vehicleOBDEngineLoad":
				return ec.fieldContext_SignalCollection_vehicleOBDEngineLoad(ctx, field)
			case "vehicleOBDIntakeTemp":
				return ec.fieldContext_SignalCollection_vehicleOBDIntakeTemp(ctx, field)
			case "vehicleOBDRunTime":
				return ec.fieldContext_SignalCollection_vehicleOBDRunTime(ctx, field)
			case "vehiclePowertrainCombustionEngineECT":
				return ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineECT(ctx, field)
			case "vehiclePowertrainCombustionEngineEngineOilLevel":
				return ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel(ctx, field)
			case "vehiclePowertrainCombustionEngineSpeed":
				return ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineSpeed(ctx, field)
			case "vehiclePowertrainCombustionEngineTPS":
				return ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineTPS(ctx, field)
			case "vehiclePowertrainFuelSystemAbsoluteLevel":
				return ec.fieldContext_SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel(ctx, field)
			case "vehiclePowertrainFuelSystemSupportedFuelTypes":
				return ec.fieldContext_SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx, field)
			case "vehiclePowertrainRange":
				return ec.fieldContext_SignalCollection_vehiclePowertrainRange(ctx, field)
			case "vehiclePowertrainTractionBatteryChargingChargeLimit":
				return ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx, field)
			case "vehiclePowertrainTractionBatteryChargingIsCharging":
				return ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging(ctx, field)
			case "vehiclePowertrainTractionBatteryGrossCapacity":
				return ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity(ctx, field)
			case "vehiclePowertrainTractionBatteryStateOfChargeCurrent":
				return ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx, field)
			case "vehiclePowertrainTransmissionTravelledDistance":
				return ec.fieldContext_SignalCollection_vehiclePowertrainTransmissionTravelledDistance(ctx, field)
			case "vehiclePowertrainType":
				return ec.fieldContext_SignalCollection_vehiclePowertrainType(ctx, field)
			case "vehicleSpeed":
				return ec.fieldContext_SignalCollection_vehicleSpeed(ctx, field)
			case "vehicleVehicleIdentificationBrand":
				return ec.fieldContext_SignalCollection_vehicleVehicleIdentificationBrand(ctx, field)
			case "vehicleVehicleIdentificationModel":
				return ec.fieldContext_SignalCollection_vehicleVehicleIdentificationModel(ctx, field)
			case "vehicleVehicleIdentificationYear":
				return ec.fieldContext_SignalCollection_vehicleVehicleIdentificationYear(ctx, field)
			case "vehicleID":
				return ec.fieldContext_SignalCollection_vehicleID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_Signals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_tokenID(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_tokenID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalNInt2uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_tokenID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_definitionID(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_definitionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().DefinitionID(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_definitionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_definitionID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_source(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().Source(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_source_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_subject(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().Subject(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_subject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_subject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().Timestamp(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_timestamp_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_type(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().Type(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleChassisAxleRow1WheelLeftTirePressure(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleChassisAxleRow1WheelRightTirePressure(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleChassisAxleRow2WheelLeftTirePressure(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleChassisAxleRow2WheelRightTirePressure(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleCurrentLocationAltitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleCurrentLocationAltitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleCurrentLocationAltitude(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleCurrentLocationAltitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleCurrentLocationAltitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleCurrentLocationLatitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleCurrentLocationLatitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleCurrentLocationLatitude(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleCurrentLocationLatitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleCurrentLocationLatitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleCurrentLocationLongitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleCurrentLocationLongitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleCurrentLocationLongitude(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleCurrentLocationLongitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleCurrentLocationLongitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleCurrentLocationTimestamp(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleCurrentLocationTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleCurrentLocationTimestamp(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleAllTimeLocation"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleCurrentLocationTimestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleCurrentLocationTimestamp_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleExteriorAirTemperature(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleExteriorAirTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleExteriorAirTemperature(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleExteriorAirTemperature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleExteriorAirTemperature_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleLowVoltageBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleLowVoltageBatteryCurrentVoltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleLowVoltageBatteryCurrentVoltage(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleLowVoltageBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleLowVoltageBatteryCurrentVoltage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleOBDBarometricPressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleOBDBarometricPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleOBDBarometricPressure(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleOBDBarometricPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleOBDBarometricPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleOBDEngineLoad(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleOBDEngineLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleOBDEngineLoad(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleOBDEngineLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleOBDEngineLoad_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleOBDIntakeTemp(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleOBDIntakeTemp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleOBDIntakeTemp(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleOBDIntakeTemp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleOBDIntakeTemp_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleOBDRunTime(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleOBDRunTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleOBDRunTime(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleOBDRunTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleOBDRunTime_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainCombustionEngineECT(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineECT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainCombustionEngineEct(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainCombustionEngineECT(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainCombustionEngineECT_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainCombustionEngineEngineOilLevel(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainCombustionEngineSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainCombustionEngineSpeed(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainCombustionEngineSpeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainCombustionEngineSpeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainCombustionEngineTPS(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainCombustionEngineTPS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainCombustionEngineTps(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainCombustionEngineTPS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainCombustionEngineTPS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainFuelSystemAbsoluteLevel(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainFuelSystemSupportedFuelTypes(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainRange(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainRange(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainRange_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainTractionBatteryChargingChargeLimit(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainTractionBatteryChargingIsCharging(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainTractionBatteryGrossCapacity(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainTractionBatteryStateOfChargeCurrent(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainTransmissionTravelledDistance(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainTransmissionTravelledDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainTransmissionTravelledDistance(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainTransmissionTravelledDistance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainTransmissionTravelledDistance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehiclePowertrainType(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehiclePowertrainType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehiclePowertrainType(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehiclePowertrainType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehiclePowertrainType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleSpeed(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleSpeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleSpeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleVehicleIdentificationBrand(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleVehicleIdentificationBrand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleVehicleIdentificationBrand(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleVehicleIdentificationBrand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleVehicleIdentificationBrand_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleVehicleIdentificationModel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleVehicleIdentificationModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleVehicleIdentificationModel(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleVehicleIdentificationModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleVehicleIdentificationModel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleVehicleIdentificationYear(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleVehicleIdentificationYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleVehicleIdentificationYear(rctx, obj, fc.Args["agg"].(*model.FloatAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleVehicleIdentificationYear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleVehicleIdentificationYear_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_vehicleID(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_vehicleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalCollection().VehicleID(rctx, obj, fc.Args["agg"].(*model.StringAggregation))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []interface{}{"VehicleNonLocationData"})
			if err != nil {
				return nil, err
			}
			if ec.directives.RequiresPrivilege == nil {
				return nil, errors.New("directive requiresPrivilege is not implemented")
			}
			return ec.directives.RequiresPrivilege(ctx, obj, directive0, privileges)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_vehicleID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalCollection_vehicleID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalFloat_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.SignalFloat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalFloat_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalFloat_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalFloat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalFloat_value(ctx context.Context, field graphql.CollectedField, obj *model.SignalFloat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalFloat_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalFloat_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalFloat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalString_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.SignalString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalString_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalString_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalString_value(ctx context.Context, field graphql.CollectedField, obj *model.SignalString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalString_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalString_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDimosFilter(ctx context.Context, obj interface{}) (model.DimosFilter, error) {
	var it model.DimosFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tokenID", "since", "until"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tokenID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenID"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenID = data
		case "since":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("since"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Since = data
		case "until":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("until"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Until = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatAggregation(ctx context.Context, obj interface{}) (model.FloatAggregation, error) {
	var it model.FloatAggregation
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "interval"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOFloatAggregationType2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "interval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interval"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Interval = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageSelection(ctx context.Context, obj interface{}) (model.PageSelection, error) {
	var it model.PageSelection
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"first", "after", "last", "before"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "first":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.First = data
		case "after":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.After = data
		case "last":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Last = data
		case "before":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Before = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringAggregation(ctx context.Context, obj interface{}) (model.StringAggregation, error) {
	var it model.StringAggregation
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "interval"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOStringAggregationType2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregationType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "interval":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interval"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Interval = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.DIMOData:
		return ec._DIMOData(ctx, sel, &obj)
	case *model.DIMOData:
		if obj == nil {
			return graphql.Null
		}
		return ec._DIMOData(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var dIMODataImplementors = []string{"DIMOData", "Node"}

func (ec *executionContext) _DIMOData(ctx context.Context, sel ast.SelectionSet, obj *model.DIMOData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dIMODataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DIMOData")
		case "id":
			out.Values[i] = ec._DIMOData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tokenID":
			out.Values[i] = ec._DIMOData_tokenID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "definitionID":
			out.Values[i] = ec._DIMOData_definitionID(ctx, field, obj)
		case "source":
			out.Values[i] = ec._DIMOData_source(ctx, field, obj)
		case "subject":
			out.Values[i] = ec._DIMOData_subject(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._DIMOData_timestamp(ctx, field, obj)
		case "type":
			out.Values[i] = ec._DIMOData_type(ctx, field, obj)
		case "vehicleChassisAxleRow1WheelLeftTirePressure":
			out.Values[i] = ec._DIMOData_vehicleChassisAxleRow1WheelLeftTirePressure(ctx, field, obj)
		case "vehicleChassisAxleRow1WheelRightTirePressure":
			out.Values[i] = ec._DIMOData_vehicleChassisAxleRow1WheelRightTirePressure(ctx, field, obj)
		case "vehicleChassisAxleRow2WheelLeftTirePressure":
			out.Values[i] = ec._DIMOData_vehicleChassisAxleRow2WheelLeftTirePressure(ctx, field, obj)
		case "vehicleChassisAxleRow2WheelRightTirePressure":
			out.Values[i] = ec._DIMOData_vehicleChassisAxleRow2WheelRightTirePressure(ctx, field, obj)
		case "vehicleCurrentLocationAltitude":
			out.Values[i] = ec._DIMOData_vehicleCurrentLocationAltitude(ctx, field, obj)
		case "vehicleCurrentLocationLatitude":
			out.Values[i] = ec._DIMOData_vehicleCurrentLocationLatitude(ctx, field, obj)
		case "vehicleCurrentLocationLongitude":
			out.Values[i] = ec._DIMOData_vehicleCurrentLocationLongitude(ctx, field, obj)
		case "vehicleCurrentLocationTimestamp":
			out.Values[i] = ec._DIMOData_vehicleCurrentLocationTimestamp(ctx, field, obj)
		case "vehicleExteriorAirTemperature":
			out.Values[i] = ec._DIMOData_vehicleExteriorAirTemperature(ctx, field, obj)
		case "vehicleLowVoltageBatteryCurrentVoltage":
			out.Values[i] = ec._DIMOData_vehicleLowVoltageBatteryCurrentVoltage(ctx, field, obj)
		case "vehicleOBDBarometricPressure":
			out.Values[i] = ec._DIMOData_vehicleOBDBarometricPressure(ctx, field, obj)
		case "vehicleOBDEngineLoad":
			out.Values[i] = ec._DIMOData_vehicleOBDEngineLoad(ctx, field, obj)
		case "vehicleOBDIntakeTemp":
			out.Values[i] = ec._DIMOData_vehicleOBDIntakeTemp(ctx, field, obj)
		case "vehicleOBDRunTime":
			out.Values[i] = ec._DIMOData_vehicleOBDRunTime(ctx, field, obj)
		case "vehiclePowertrainCombustionEngineECT":
			out.Values[i] = ec._DIMOData_vehiclePowertrainCombustionEngineECT(ctx, field, obj)
		case "vehiclePowertrainCombustionEngineEngineOilLevel":
			out.Values[i] = ec._DIMOData_vehiclePowertrainCombustionEngineEngineOilLevel(ctx, field, obj)
		case "vehiclePowertrainCombustionEngineSpeed":
			out.Values[i] = ec._DIMOData_vehiclePowertrainCombustionEngineSpeed(ctx, field, obj)
		case "vehiclePowertrainCombustionEngineTPS":
			out.Values[i] = ec._DIMOData_vehiclePowertrainCombustionEngineTPS(ctx, field, obj)
		case "vehiclePowertrainFuelSystemAbsoluteLevel":
			out.Values[i] = ec._DIMOData_vehiclePowertrainFuelSystemAbsoluteLevel(ctx, field, obj)
		case "vehiclePowertrainFuelSystemSupportedFuelTypes":
			out.Values[i] = ec._DIMOData_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx, field, obj)
		case "vehiclePowertrainRange":
			out.Values[i] = ec._DIMOData_vehiclePowertrainRange(ctx, field, obj)
		case "vehiclePowertrainTractionBatteryChargingChargeLimit":
			out.Values[i] = ec._DIMOData_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx, field, obj)
		case "vehiclePowertrainTractionBatteryChargingIsCharging":
			out.Values[i] = ec._DIMOData_vehiclePowertrainTractionBatteryChargingIsCharging(ctx, field, obj)
		case "vehiclePowertrainTractionBatteryGrossCapacity":
			out.Values[i] = ec._DIMOData_vehiclePowertrainTractionBatteryGrossCapacity(ctx, field, obj)
		case "vehiclePowertrainTractionBatteryStateOfChargeCurrent":
			out.Values[i] = ec._DIMOData_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx, field, obj)
		case "vehiclePowertrainTransmissionTravelledDistance":
			out.Values[i] = ec._DIMOData_vehiclePowertrainTransmissionTravelledDistance(ctx, field, obj)
		case "vehiclePowertrainType":
			out.Values[i] = ec._DIMOData_vehiclePowertrainType(ctx, field, obj)
		case "vehicleSpeed":
			out.Values[i] = ec._DIMOData_vehicleSpeed(ctx, field, obj)
		case "vehicleVehicleIdentificationBrand":
			out.Values[i] = ec._DIMOData_vehicleVehicleIdentificationBrand(ctx, field, obj)
		case "vehicleVehicleIdentificationModel":
			out.Values[i] = ec._DIMOData_vehicleVehicleIdentificationModel(ctx, field, obj)
		case "vehicleVehicleIdentificationYear":
			out.Values[i] = ec._DIMOData_vehicleVehicleIdentificationYear(ctx, field, obj)
		case "vehicleID":
			out.Values[i] = ec._DIMOData_vehicleID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dimoConnectionImplementors = []string{"DimoConnection"}

func (ec *executionContext) _DimoConnection(ctx context.Context, sel ast.SelectionSet, obj *model.DimoConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dimoConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DimoConnection")
		case "totalCount":
			out.Values[i] = ec._DimoConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "edges":
			out.Values[i] = ec._DimoConnection_edges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nodes":
			out.Values[i] = ec._DimoConnection_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._DimoConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dimoEdgeImplementors = []string{"DimoEdge"}

func (ec *executionContext) _DimoEdge(ctx context.Context, sel ast.SelectionSet, obj *model.DimoEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dimoEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DimoEdge")
		case "cursor":
			out.Values[i] = ec._DimoEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "node":
			out.Values[i] = ec._DimoEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "DIMOData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_DIMOData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Signals":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Signals(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signalCollectionImplementors = []string{"SignalCollection"}

func (ec *executionContext) _SignalCollection(ctx context.Context, sel ast.SelectionSet, obj *model.SignalCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signalCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignalCollection")
		case "tokenID":
			out.Values[i] = ec._SignalCollection_tokenID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "definitionID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_definitionID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_source(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subject":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_subject(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timestamp":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_timestamp(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_type(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleChassisAxleRow1WheelLeftTirePressure":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleChassisAxleRow1WheelLeftTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleChassisAxleRow1WheelRightTirePressure":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleChassisAxleRow1WheelRightTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleChassisAxleRow2WheelLeftTirePressure":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleChassisAxleRow2WheelLeftTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleChassisAxleRow2WheelRightTirePressure":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleChassisAxleRow2WheelRightTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleCurrentLocationAltitude":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleCurrentLocationAltitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleCurrentLocationLatitude":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleCurrentLocationLatitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleCurrentLocationLongitude":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleCurrentLocationLongitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleCurrentLocationTimestamp":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleCurrentLocationTimestamp(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleExteriorAirTemperature":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleExteriorAirTemperature(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleLowVoltageBatteryCurrentVoltage":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleLowVoltageBatteryCurrentVoltage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleOBDBarometricPressure":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleOBDBarometricPressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleOBDEngineLoad":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleOBDEngineLoad(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleOBDIntakeTemp":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleOBDIntakeTemp(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleOBDRunTime":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleOBDRunTime(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainCombustionEngineECT":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainCombustionEngineECT(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainCombustionEngineEngineOilLevel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainCombustionEngineEngineOilLevel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainCombustionEngineSpeed":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainCombustionEngineSpeed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainCombustionEngineTPS":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainCombustionEngineTPS(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainFuelSystemAbsoluteLevel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainFuelSystemAbsoluteLevel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainFuelSystemSupportedFuelTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainFuelSystemSupportedFuelTypes(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainRange":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainRange(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainTractionBatteryChargingChargeLimit":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainTractionBatteryChargingChargeLimit(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainTractionBatteryChargingIsCharging":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainTractionBatteryChargingIsCharging(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainTractionBatteryGrossCapacity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainTractionBatteryGrossCapacity(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainTractionBatteryStateOfChargeCurrent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainTransmissionTravelledDistance":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainTransmissionTravelledDistance(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehiclePowertrainType":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehiclePowertrainType(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleSpeed":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleSpeed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleVehicleIdentificationBrand":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleVehicleIdentificationBrand(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleVehicleIdentificationModel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleVehicleIdentificationModel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleVehicleIdentificationYear":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleVehicleIdentificationYear(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalCollection_vehicleID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signalFloatImplementors = []string{"SignalFloat"}

func (ec *executionContext) _SignalFloat(ctx context.Context, sel ast.SelectionSet, obj *model.SignalFloat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signalFloatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignalFloat")
		case "timestamp":
			out.Values[i] = ec._SignalFloat_timestamp(ctx, field, obj)
		case "value":
			out.Values[i] = ec._SignalFloat_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signalStringImplementors = []string{"SignalString"}

func (ec *executionContext) _SignalString(ctx context.Context, sel ast.SelectionSet, obj *model.SignalString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signalStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignalString")
		case "timestamp":
			out.Values[i] = ec._SignalString_timestamp(ctx, field, obj)
		case "value":
			out.Values[i] = ec._SignalString_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNDIMOData2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDIMODataᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DIMOData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDIMOData2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDIMOData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDIMOData2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDIMOData(ctx context.Context, sel ast.SelectionSet, v *model.DIMOData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DIMOData(ctx, sel, v)
}

func (ec *executionContext) marshalNDimoEdge2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimoEdgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DimoEdge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDimoEdge2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimoEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDimoEdge2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimoEdge(ctx context.Context, sel ast.SelectionSet, v *model.DimoEdge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DimoEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2uint32(ctx context.Context, v interface{}) (uint32, error) {
	res, err := graphql.UnmarshalUint32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2uint32(ctx context.Context, sel ast.SelectionSet, v uint32) graphql.Marshaler {
	res := graphql.MarshalUint32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *model.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPageSelection2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPageSelection(ctx context.Context, v interface{}) (model.PageSelection, error) {
	res, err := ec.unmarshalInputPageSelection(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx context.Context, v interface{}) (model.Privilege, error) {
	var res model.Privilege
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx context.Context, sel ast.SelectionSet, v model.Privilege) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx context.Context, v interface{}) ([]model.Privilege, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.Privilege, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Privilege) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx context.Context, sel ast.SelectionSet, v *model.SignalFloat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SignalFloat(ctx, sel, v)
}

func (ec *executionContext) marshalNSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx context.Context, sel ast.SelectionSet, v *model.SignalString) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SignalString(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalODimoConnection2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimoConnection(ctx context.Context, sel ast.SelectionSet, v *model.DimoConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DimoConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalODimosFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDimosFilter(ctx context.Context, v interface{}) (*model.DimosFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDimosFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat32(ctx context.Context, v interface{}) (*float32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalFloat32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat32(ctx context.Context, sel ast.SelectionSet, v *float32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := types.MarshalFloat32(*v)
	return res
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloat(*v)
	return res
}

func (ec *executionContext) unmarshalOFloatAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx context.Context, v interface{}) (*model.FloatAggregation, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFloatAggregation(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloatAggregationType2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregationType(ctx context.Context, v interface{}) (*model.FloatAggregationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FloatAggregationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloatAggregationType2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregationType(ctx context.Context, sel ast.SelectionSet, v *model.FloatAggregationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint16(ctx context.Context, v interface{}) (*int16, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalInt16(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint16(ctx context.Context, sel ast.SelectionSet, v *int16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := types.MarshalInt16(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖuint16(ctx context.Context, v interface{}) (*uint16, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalUint16(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖuint16(ctx context.Context, sel ast.SelectionSet, v *uint16) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := types.MarshalUint16(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖuint32(ctx context.Context, v interface{}) (*uint32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUint32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖuint32(ctx context.Context, sel ast.SelectionSet, v *uint32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUint32(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖuint8(ctx context.Context, v interface{}) (*uint8, error) {
	if v == nil {
		return nil, nil
	}
	res, err := types.UnmarshalUint8(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖuint8(ctx context.Context, sel ast.SelectionSet, v *uint8) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := types.MarshalUint8(*v)
	return res
}

func (ec *executionContext) marshalONode2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐNode(ctx context.Context, sel ast.SelectionSet, v model.Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOSignalCollection2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalCollection(ctx context.Context, sel ast.SelectionSet, v *model.SignalCollection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SignalCollection(ctx, sel, v)
}

func (ec *executionContext) marshalOSignalFloat2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloatᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SignalFloat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSignalString2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalStringᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SignalString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOStringAggregation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx context.Context, v interface{}) (*model.StringAggregation, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringAggregation(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOStringAggregationType2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregationType(ctx context.Context, v interface{}) (*model.StringAggregationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.StringAggregationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStringAggregationType2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregationType(ctx context.Context, sel ast.SelectionSet, v *model.StringAggregationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
