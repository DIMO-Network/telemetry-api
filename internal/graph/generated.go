// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
	"github.com/ethereum/go-ethereum/common"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
	SignalAggregations() SignalAggregationsResolver
}

type DirectiveRoot struct {
	HasAggregation            func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
	IsSignal                  func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
	RequiresAllOfPrivileges   func(ctx context.Context, obj any, next graphql.Resolver, privileges []model.Privilege) (res any, err error)
	RequiresManufacturerToken func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
	RequiresOneOfPrivilege    func(ctx context.Context, obj any, next graphql.Resolver, privileges []model.Privilege) (res any, err error)
	RequiresVehicleToken      func(ctx context.Context, obj any, next graphql.Resolver) (res any, err error)
}

type ComplexityRoot struct {
	Attestation struct {
		Attestation    func(childComplexity int) int
		DataVersion    func(childComplexity int) int
		ID             func(childComplexity int) int
		Producer       func(childComplexity int) int
		RecordedAt     func(childComplexity int) int
		Source         func(childComplexity int) int
		Type           func(childComplexity int) int
		VehicleTokenID func(childComplexity int) int
	}

	DeviceActivity struct {
		LastActive func(childComplexity int) int
	}

	POMVC struct {
		RawVc                  func(childComplexity int) int
		RecordedBy             func(childComplexity int) int
		ValidFrom              func(childComplexity int) int
		VehicleContractAddress func(childComplexity int) int
		VehicleTokenID         func(childComplexity int) int
	}

	Query struct {
		Attestations     func(childComplexity int, tokenID int, source *common.Address, filter *model.AttestationFilter) int
		AvailableSignals func(childComplexity int, tokenID int, filter *model.SignalFilter) int
		DeviceActivity   func(childComplexity int, by model.AftermarketDeviceBy) int
		PomVCLatest      func(childComplexity int, tokenID int) int
		Signals          func(childComplexity int, tokenID int, interval string, from time.Time, to time.Time, filter *model.SignalFilter) int
		SignalsLatest    func(childComplexity int, tokenID int, filter *model.SignalFilter) int
		VinVCLatest      func(childComplexity int, tokenID int) int
	}

	SignalAggregations struct {
		AngularVelocityYaw                                        func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow1DriverSideIsOpen                             func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow1DriverSideWindowIsOpen                       func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow1PassengerSideIsOpen                          func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow1PassengerSideWindowIsOpen                    func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow2DriverSideIsOpen                             func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow2DriverSideWindowIsOpen                       func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow2PassengerSideIsOpen                          func(childComplexity int, agg model.FloatAggregation) int
		CabinDoorRow2PassengerSideWindowIsOpen                    func(childComplexity int, agg model.FloatAggregation) int
		ChassisAxleRow1WheelLeftSpeed                             func(childComplexity int, agg model.FloatAggregation) int
		ChassisAxleRow1WheelLeftTirePressure                      func(childComplexity int, agg model.FloatAggregation) int
		ChassisAxleRow1WheelRightSpeed                            func(childComplexity int, agg model.FloatAggregation) int
		ChassisAxleRow1WheelRightTirePressure                     func(childComplexity int, agg model.FloatAggregation) int
		ChassisAxleRow2WheelLeftTirePressure                      func(childComplexity int, agg model.FloatAggregation) int
		ChassisAxleRow2WheelRightTirePressure                     func(childComplexity int, agg model.FloatAggregation) int
		CurrentLocationAltitude                                   func(childComplexity int, agg model.FloatAggregation) int
		CurrentLocationApproximateLatitude                        func(childComplexity int, agg model.FloatAggregation) int
		CurrentLocationApproximateLongitude                       func(childComplexity int, agg model.FloatAggregation) int
		CurrentLocationHeading                                    func(childComplexity int, agg model.FloatAggregation) int
		CurrentLocationIsRedacted                                 func(childComplexity int, agg model.FloatAggregation) int
		CurrentLocationLatitude                                   func(childComplexity int, agg model.FloatAggregation) int
		CurrentLocationLongitude                                  func(childComplexity int, agg model.FloatAggregation) int
		DimoAftermarketHdop                                       func(childComplexity int, agg model.FloatAggregation) int
		DimoAftermarketNsat                                       func(childComplexity int, agg model.FloatAggregation) int
		DimoAftermarketSsid                                       func(childComplexity int, agg model.StringAggregation) int
		DimoAftermarketWPAState                                   func(childComplexity int, agg model.StringAggregation) int
		ExteriorAirTemperature                                    func(childComplexity int, agg model.FloatAggregation) int
		IsIgnitionOn                                              func(childComplexity int, agg model.FloatAggregation) int
		LowVoltageBatteryCurrentVoltage                           func(childComplexity int, agg model.FloatAggregation) int
		ObdBarometricPressure                                     func(childComplexity int, agg model.FloatAggregation) int
		ObdCommandedEgr                                           func(childComplexity int, agg model.FloatAggregation) int
		ObdCommandedEvap                                          func(childComplexity int, agg model.FloatAggregation) int
		ObdDTCList                                                func(childComplexity int, agg model.StringAggregation) int
		ObdDistanceSinceDTCClear                                  func(childComplexity int, agg model.FloatAggregation) int
		ObdDistanceWithMil                                        func(childComplexity int, agg model.FloatAggregation) int
		ObdEngineLoad                                             func(childComplexity int, agg model.FloatAggregation) int
		ObdFuelPressure                                           func(childComplexity int, agg model.FloatAggregation) int
		ObdIntakeTemp                                             func(childComplexity int, agg model.FloatAggregation) int
		ObdLongTermFuelTrim1                                      func(childComplexity int, agg model.FloatAggregation) int
		ObdMap                                                    func(childComplexity int, agg model.FloatAggregation) int
		ObdO2WRSensor1Voltage                                     func(childComplexity int, agg model.FloatAggregation) int
		ObdO2WRSensor2Voltage                                     func(childComplexity int, agg model.FloatAggregation) int
		ObdRunTime                                                func(childComplexity int, agg model.FloatAggregation) int
		ObdShortTermFuelTrim1                                     func(childComplexity int, agg model.FloatAggregation) int
		ObdWarmupsSinceDTCClear                                   func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineDieselExhaustFluidCapacity      func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineDieselExhaustFluidLevel         func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineEct                             func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineEngineOilLevel                  func(childComplexity int, agg model.StringAggregation) int
		PowertrainCombustionEngineEngineOilRelativeLevel          func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineEop                             func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineEot                             func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineMaf                             func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineSpeed                           func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineTorque                          func(childComplexity int, agg model.FloatAggregation) int
		PowertrainCombustionEngineTps                             func(childComplexity int, agg model.FloatAggregation) int
		PowertrainFuelSystemAbsoluteLevel                         func(childComplexity int, agg model.FloatAggregation) int
		PowertrainFuelSystemRelativeLevel                         func(childComplexity int, agg model.FloatAggregation) int
		PowertrainFuelSystemSupportedFuelTypes                    func(childComplexity int, agg model.StringAggregation) int
		PowertrainRange                                           func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryChargingAddedEnergy              func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryChargingChargeCurrentAc          func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryChargingChargeLimit              func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryChargingChargeVoltageUnknownType func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryChargingIsCharging               func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryCurrentPower                     func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryCurrentVoltage                   func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryGrossCapacity                    func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryRange                            func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryStateOfChargeCurrent             func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryStateOfChargeCurrentEnergy       func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTractionBatteryTemperatureAverage               func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTransmissionCurrentGear                         func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTransmissionTemperature                         func(childComplexity int, agg model.FloatAggregation) int
		PowertrainTransmissionTravelledDistance                   func(childComplexity int, agg model.FloatAggregation) int
		PowertrainType                                            func(childComplexity int, agg model.StringAggregation) int
		ServiceDistanceToService                                  func(childComplexity int, agg model.FloatAggregation) int
		Speed                                                     func(childComplexity int, agg model.FloatAggregation) int
		Timestamp                                                 func(childComplexity int) int
	}

	SignalCollection struct {
		AngularVelocityYaw                                        func(childComplexity int) int
		CabinDoorRow1DriverSideIsOpen                             func(childComplexity int) int
		CabinDoorRow1DriverSideWindowIsOpen                       func(childComplexity int) int
		CabinDoorRow1PassengerSideIsOpen                          func(childComplexity int) int
		CabinDoorRow1PassengerSideWindowIsOpen                    func(childComplexity int) int
		CabinDoorRow2DriverSideIsOpen                             func(childComplexity int) int
		CabinDoorRow2DriverSideWindowIsOpen                       func(childComplexity int) int
		CabinDoorRow2PassengerSideIsOpen                          func(childComplexity int) int
		CabinDoorRow2PassengerSideWindowIsOpen                    func(childComplexity int) int
		ChassisAxleRow1WheelLeftSpeed                             func(childComplexity int) int
		ChassisAxleRow1WheelLeftTirePressure                      func(childComplexity int) int
		ChassisAxleRow1WheelRightSpeed                            func(childComplexity int) int
		ChassisAxleRow1WheelRightTirePressure                     func(childComplexity int) int
		ChassisAxleRow2WheelLeftTirePressure                      func(childComplexity int) int
		ChassisAxleRow2WheelRightTirePressure                     func(childComplexity int) int
		CurrentLocationAltitude                                   func(childComplexity int) int
		CurrentLocationApproximateLatitude                        func(childComplexity int) int
		CurrentLocationApproximateLongitude                       func(childComplexity int) int
		CurrentLocationHeading                                    func(childComplexity int) int
		CurrentLocationIsRedacted                                 func(childComplexity int) int
		CurrentLocationLatitude                                   func(childComplexity int) int
		CurrentLocationLongitude                                  func(childComplexity int) int
		DIMOAftermarketHDOP                                       func(childComplexity int) int
		DIMOAftermarketNSAT                                       func(childComplexity int) int
		DIMOAftermarketSSID                                       func(childComplexity int) int
		DIMOAftermarketWPAState                                   func(childComplexity int) int
		ExteriorAirTemperature                                    func(childComplexity int) int
		IsIgnitionOn                                              func(childComplexity int) int
		LastSeen                                                  func(childComplexity int) int
		LowVoltageBatteryCurrentVoltage                           func(childComplexity int) int
		OBDBarometricPressure                                     func(childComplexity int) int
		OBDCommandedEGR                                           func(childComplexity int) int
		OBDCommandedEVAP                                          func(childComplexity int) int
		OBDDTCList                                                func(childComplexity int) int
		OBDDistanceSinceDTCClear                                  func(childComplexity int) int
		OBDDistanceWithMIL                                        func(childComplexity int) int
		OBDEngineLoad                                             func(childComplexity int) int
		OBDFuelPressure                                           func(childComplexity int) int
		OBDIntakeTemp                                             func(childComplexity int) int
		OBDLongTermFuelTrim1                                      func(childComplexity int) int
		OBDMAP                                                    func(childComplexity int) int
		OBDO2WRSensor1Voltage                                     func(childComplexity int) int
		OBDO2WRSensor2Voltage                                     func(childComplexity int) int
		OBDRunTime                                                func(childComplexity int) int
		OBDShortTermFuelTrim1                                     func(childComplexity int) int
		OBDWarmupsSinceDTCClear                                   func(childComplexity int) int
		PowertrainCombustionEngineDieselExhaustFluidCapacity      func(childComplexity int) int
		PowertrainCombustionEngineDieselExhaustFluidLevel         func(childComplexity int) int
		PowertrainCombustionEngineECT                             func(childComplexity int) int
		PowertrainCombustionEngineEOP                             func(childComplexity int) int
		PowertrainCombustionEngineEOT                             func(childComplexity int) int
		PowertrainCombustionEngineEngineOilLevel                  func(childComplexity int) int
		PowertrainCombustionEngineEngineOilRelativeLevel          func(childComplexity int) int
		PowertrainCombustionEngineMAF                             func(childComplexity int) int
		PowertrainCombustionEngineSpeed                           func(childComplexity int) int
		PowertrainCombustionEngineTPS                             func(childComplexity int) int
		PowertrainCombustionEngineTorque                          func(childComplexity int) int
		PowertrainFuelSystemAbsoluteLevel                         func(childComplexity int) int
		PowertrainFuelSystemRelativeLevel                         func(childComplexity int) int
		PowertrainFuelSystemSupportedFuelTypes                    func(childComplexity int) int
		PowertrainRange                                           func(childComplexity int) int
		PowertrainTractionBatteryChargingAddedEnergy              func(childComplexity int) int
		PowertrainTractionBatteryChargingChargeCurrentAC          func(childComplexity int) int
		PowertrainTractionBatteryChargingChargeLimit              func(childComplexity int) int
		PowertrainTractionBatteryChargingChargeVoltageUnknownType func(childComplexity int) int
		PowertrainTractionBatteryChargingIsCharging               func(childComplexity int) int
		PowertrainTractionBatteryCurrentPower                     func(childComplexity int) int
		PowertrainTractionBatteryCurrentVoltage                   func(childComplexity int) int
		PowertrainTractionBatteryGrossCapacity                    func(childComplexity int) int
		PowertrainTractionBatteryRange                            func(childComplexity int) int
		PowertrainTractionBatteryStateOfChargeCurrent             func(childComplexity int) int
		PowertrainTractionBatteryStateOfChargeCurrentEnergy       func(childComplexity int) int
		PowertrainTractionBatteryTemperatureAverage               func(childComplexity int) int
		PowertrainTransmissionCurrentGear                         func(childComplexity int) int
		PowertrainTransmissionTemperature                         func(childComplexity int) int
		PowertrainTransmissionTravelledDistance                   func(childComplexity int) int
		PowertrainType                                            func(childComplexity int) int
		ServiceDistanceToService                                  func(childComplexity int) int
		Speed                                                     func(childComplexity int) int
	}

	SignalFloat struct {
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	SignalString struct {
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	VINVC struct {
		CountryCode            func(childComplexity int) int
		RawVc                  func(childComplexity int) int
		RecordedAt             func(childComplexity int) int
		RecordedBy             func(childComplexity int) int
		ValidFrom              func(childComplexity int) int
		ValidTo                func(childComplexity int) int
		VehicleContractAddress func(childComplexity int) int
		VehicleTokenID         func(childComplexity int) int
		Vin                    func(childComplexity int) int
	}
}

type QueryResolver interface {
	Signals(ctx context.Context, tokenID int, interval string, from time.Time, to time.Time, filter *model.SignalFilter) ([]*model.SignalAggregations, error)
	SignalsLatest(ctx context.Context, tokenID int, filter *model.SignalFilter) (*model.SignalCollection, error)
	AvailableSignals(ctx context.Context, tokenID int, filter *model.SignalFilter) ([]string, error)
	Attestations(ctx context.Context, tokenID int, source *common.Address, filter *model.AttestationFilter) ([]*model.Attestation, error)
	DeviceActivity(ctx context.Context, by model.AftermarketDeviceBy) (*model.DeviceActivity, error)
	VinVCLatest(ctx context.Context, tokenID int) (*model.Vinvc, error)
	PomVCLatest(ctx context.Context, tokenID int) (*model.Pomvc, error)
}
type SignalAggregationsResolver interface {
	CurrentLocationApproximateLatitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CurrentLocationApproximateLongitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	AngularVelocityYaw(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow1DriverSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow1DriverSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow1PassengerSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow1PassengerSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow2DriverSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow2DriverSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow2PassengerSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CabinDoorRow2PassengerSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ChassisAxleRow1WheelLeftSpeed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ChassisAxleRow1WheelRightSpeed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CurrentLocationAltitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CurrentLocationHeading(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CurrentLocationIsRedacted(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CurrentLocationLatitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	CurrentLocationLongitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	DimoAftermarketHdop(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	DimoAftermarketNsat(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	DimoAftermarketSsid(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error)
	DimoAftermarketWPAState(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error)
	ExteriorAirTemperature(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	IsIgnitionOn(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	LowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdBarometricPressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdCommandedEgr(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdCommandedEvap(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdDTCList(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error)
	ObdDistanceSinceDTCClear(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdDistanceWithMil(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdEngineLoad(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdFuelPressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdIntakeTemp(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdLongTermFuelTrim1(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdMap(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdO2WRSensor1Voltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdO2WRSensor2Voltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdRunTime(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdShortTermFuelTrim1(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	ObdWarmupsSinceDTCClear(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineDieselExhaustFluidCapacity(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineDieselExhaustFluidLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineEop(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineEot(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error)
	PowertrainCombustionEngineEngineOilRelativeLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineMaf(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainCombustionEngineTorque(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainFuelSystemRelativeLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error)
	PowertrainRange(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryChargingAddedEnergy(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryChargingChargeCurrentAc(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryChargingChargeVoltageUnknownType(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryCurrentPower(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryCurrentVoltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryRange(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryStateOfChargeCurrentEnergy(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTractionBatteryTemperatureAverage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTransmissionCurrentGear(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTransmissionTemperature(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	PowertrainType(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error)
	ServiceDistanceToService(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
	Speed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Attestation.attestation":
		if e.complexity.Attestation.Attestation == nil {
			break
		}

		return e.complexity.Attestation.Attestation(childComplexity), true

	case "Attestation.dataVersion":
		if e.complexity.Attestation.DataVersion == nil {
			break
		}

		return e.complexity.Attestation.DataVersion(childComplexity), true

	case "Attestation.ID":
		if e.complexity.Attestation.ID == nil {
			break
		}

		return e.complexity.Attestation.ID(childComplexity), true

	case "Attestation.producer":
		if e.complexity.Attestation.Producer == nil {
			break
		}

		return e.complexity.Attestation.Producer(childComplexity), true

	case "Attestation.recordedAt":
		if e.complexity.Attestation.RecordedAt == nil {
			break
		}

		return e.complexity.Attestation.RecordedAt(childComplexity), true

	case "Attestation.source":
		if e.complexity.Attestation.Source == nil {
			break
		}

		return e.complexity.Attestation.Source(childComplexity), true

	case "Attestation.type":
		if e.complexity.Attestation.Type == nil {
			break
		}

		return e.complexity.Attestation.Type(childComplexity), true

	case "Attestation.vehicleTokenId":
		if e.complexity.Attestation.VehicleTokenID == nil {
			break
		}

		return e.complexity.Attestation.VehicleTokenID(childComplexity), true

	case "DeviceActivity.lastActive":
		if e.complexity.DeviceActivity.LastActive == nil {
			break
		}

		return e.complexity.DeviceActivity.LastActive(childComplexity), true

	case "POMVC.rawVC":
		if e.complexity.POMVC.RawVc == nil {
			break
		}

		return e.complexity.POMVC.RawVc(childComplexity), true

	case "POMVC.recordedBy":
		if e.complexity.POMVC.RecordedBy == nil {
			break
		}

		return e.complexity.POMVC.RecordedBy(childComplexity), true

	case "POMVC.validFrom":
		if e.complexity.POMVC.ValidFrom == nil {
			break
		}

		return e.complexity.POMVC.ValidFrom(childComplexity), true

	case "POMVC.vehicleContractAddress":
		if e.complexity.POMVC.VehicleContractAddress == nil {
			break
		}

		return e.complexity.POMVC.VehicleContractAddress(childComplexity), true

	case "POMVC.vehicleTokenId":
		if e.complexity.POMVC.VehicleTokenID == nil {
			break
		}

		return e.complexity.POMVC.VehicleTokenID(childComplexity), true

	case "Query.attestations":
		if e.complexity.Query.Attestations == nil {
			break
		}

		args, err := ec.field_Query_attestations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Attestations(childComplexity, args["tokenId"].(int), args["source"].(*common.Address), args["filter"].(*model.AttestationFilter)), true

	case "Query.availableSignals":
		if e.complexity.Query.AvailableSignals == nil {
			break
		}

		args, err := ec.field_Query_availableSignals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AvailableSignals(childComplexity, args["tokenId"].(int), args["filter"].(*model.SignalFilter)), true

	case "Query.deviceActivity":
		if e.complexity.Query.DeviceActivity == nil {
			break
		}

		args, err := ec.field_Query_deviceActivity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeviceActivity(childComplexity, args["by"].(model.AftermarketDeviceBy)), true

	case "Query.pomVCLatest":
		if e.complexity.Query.PomVCLatest == nil {
			break
		}

		args, err := ec.field_Query_pomVCLatest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PomVCLatest(childComplexity, args["tokenId"].(int)), true

	case "Query.signals":
		if e.complexity.Query.Signals == nil {
			break
		}

		args, err := ec.field_Query_signals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Signals(childComplexity, args["tokenId"].(int), args["interval"].(string), args["from"].(time.Time), args["to"].(time.Time), args["filter"].(*model.SignalFilter)), true

	case "Query.signalsLatest":
		if e.complexity.Query.SignalsLatest == nil {
			break
		}

		args, err := ec.field_Query_signalsLatest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SignalsLatest(childComplexity, args["tokenId"].(int), args["filter"].(*model.SignalFilter)), true

	case "Query.vinVCLatest":
		if e.complexity.Query.VinVCLatest == nil {
			break
		}

		args, err := ec.field_Query_vinVCLatest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VinVCLatest(childComplexity, args["tokenId"].(int)), true

	case "SignalAggregations.angularVelocityYaw":
		if e.complexity.SignalAggregations.AngularVelocityYaw == nil {
			break
		}

		args, err := ec.field_SignalAggregations_angularVelocityYaw_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.AngularVelocityYaw(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow1DriverSideIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow1DriverSideIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow1DriverSideIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow1DriverSideIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow1DriverSideWindowIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow1DriverSideWindowIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow1DriverSideWindowIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow1PassengerSideIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow1PassengerSideIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow1PassengerSideIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow1PassengerSideIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow1PassengerSideWindowIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow1PassengerSideWindowIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow1PassengerSideWindowIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow2DriverSideIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow2DriverSideIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow2DriverSideIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow2DriverSideIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow2DriverSideWindowIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow2DriverSideWindowIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow2DriverSideWindowIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow2PassengerSideIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow2PassengerSideIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow2PassengerSideIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow2PassengerSideIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.cabinDoorRow2PassengerSideWindowIsOpen":
		if e.complexity.SignalAggregations.CabinDoorRow2PassengerSideWindowIsOpen == nil {
			break
		}

		args, err := ec.field_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CabinDoorRow2PassengerSideWindowIsOpen(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.chassisAxleRow1WheelLeftSpeed":
		if e.complexity.SignalAggregations.ChassisAxleRow1WheelLeftSpeed == nil {
			break
		}

		args, err := ec.field_SignalAggregations_chassisAxleRow1WheelLeftSpeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ChassisAxleRow1WheelLeftSpeed(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.chassisAxleRow1WheelLeftTirePressure":
		if e.complexity.SignalAggregations.ChassisAxleRow1WheelLeftTirePressure == nil {
			break
		}

		args, err := ec.field_SignalAggregations_chassisAxleRow1WheelLeftTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ChassisAxleRow1WheelLeftTirePressure(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.chassisAxleRow1WheelRightSpeed":
		if e.complexity.SignalAggregations.ChassisAxleRow1WheelRightSpeed == nil {
			break
		}

		args, err := ec.field_SignalAggregations_chassisAxleRow1WheelRightSpeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ChassisAxleRow1WheelRightSpeed(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.chassisAxleRow1WheelRightTirePressure":
		if e.complexity.SignalAggregations.ChassisAxleRow1WheelRightTirePressure == nil {
			break
		}

		args, err := ec.field_SignalAggregations_chassisAxleRow1WheelRightTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ChassisAxleRow1WheelRightTirePressure(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.chassisAxleRow2WheelLeftTirePressure":
		if e.complexity.SignalAggregations.ChassisAxleRow2WheelLeftTirePressure == nil {
			break
		}

		args, err := ec.field_SignalAggregations_chassisAxleRow2WheelLeftTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ChassisAxleRow2WheelLeftTirePressure(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.chassisAxleRow2WheelRightTirePressure":
		if e.complexity.SignalAggregations.ChassisAxleRow2WheelRightTirePressure == nil {
			break
		}

		args, err := ec.field_SignalAggregations_chassisAxleRow2WheelRightTirePressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ChassisAxleRow2WheelRightTirePressure(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.currentLocationAltitude":
		if e.complexity.SignalAggregations.CurrentLocationAltitude == nil {
			break
		}

		args, err := ec.field_SignalAggregations_currentLocationAltitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CurrentLocationAltitude(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.currentLocationApproximateLatitude":
		if e.complexity.SignalAggregations.CurrentLocationApproximateLatitude == nil {
			break
		}

		args, err := ec.field_SignalAggregations_currentLocationApproximateLatitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CurrentLocationApproximateLatitude(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.currentLocationApproximateLongitude":
		if e.complexity.SignalAggregations.CurrentLocationApproximateLongitude == nil {
			break
		}

		args, err := ec.field_SignalAggregations_currentLocationApproximateLongitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CurrentLocationApproximateLongitude(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.currentLocationHeading":
		if e.complexity.SignalAggregations.CurrentLocationHeading == nil {
			break
		}

		args, err := ec.field_SignalAggregations_currentLocationHeading_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CurrentLocationHeading(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.currentLocationIsRedacted":
		if e.complexity.SignalAggregations.CurrentLocationIsRedacted == nil {
			break
		}

		args, err := ec.field_SignalAggregations_currentLocationIsRedacted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CurrentLocationIsRedacted(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.currentLocationLatitude":
		if e.complexity.SignalAggregations.CurrentLocationLatitude == nil {
			break
		}

		args, err := ec.field_SignalAggregations_currentLocationLatitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CurrentLocationLatitude(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.currentLocationLongitude":
		if e.complexity.SignalAggregations.CurrentLocationLongitude == nil {
			break
		}

		args, err := ec.field_SignalAggregations_currentLocationLongitude_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.CurrentLocationLongitude(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.dimoAftermarketHDOP":
		if e.complexity.SignalAggregations.DimoAftermarketHdop == nil {
			break
		}

		args, err := ec.field_SignalAggregations_dimoAftermarketHDOP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.DimoAftermarketHdop(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.dimoAftermarketNSAT":
		if e.complexity.SignalAggregations.DimoAftermarketNsat == nil {
			break
		}

		args, err := ec.field_SignalAggregations_dimoAftermarketNSAT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.DimoAftermarketNsat(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.dimoAftermarketSSID":
		if e.complexity.SignalAggregations.DimoAftermarketSsid == nil {
			break
		}

		args, err := ec.field_SignalAggregations_dimoAftermarketSSID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.DimoAftermarketSsid(childComplexity, args["agg"].(model.StringAggregation)), true

	case "SignalAggregations.dimoAftermarketWPAState":
		if e.complexity.SignalAggregations.DimoAftermarketWPAState == nil {
			break
		}

		args, err := ec.field_SignalAggregations_dimoAftermarketWPAState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.DimoAftermarketWPAState(childComplexity, args["agg"].(model.StringAggregation)), true

	case "SignalAggregations.exteriorAirTemperature":
		if e.complexity.SignalAggregations.ExteriorAirTemperature == nil {
			break
		}

		args, err := ec.field_SignalAggregations_exteriorAirTemperature_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ExteriorAirTemperature(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.isIgnitionOn":
		if e.complexity.SignalAggregations.IsIgnitionOn == nil {
			break
		}

		args, err := ec.field_SignalAggregations_isIgnitionOn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.IsIgnitionOn(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.lowVoltageBatteryCurrentVoltage":
		if e.complexity.SignalAggregations.LowVoltageBatteryCurrentVoltage == nil {
			break
		}

		args, err := ec.field_SignalAggregations_lowVoltageBatteryCurrentVoltage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.LowVoltageBatteryCurrentVoltage(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdBarometricPressure":
		if e.complexity.SignalAggregations.ObdBarometricPressure == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdBarometricPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdBarometricPressure(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdCommandedEGR":
		if e.complexity.SignalAggregations.ObdCommandedEgr == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdCommandedEGR_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdCommandedEgr(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdCommandedEVAP":
		if e.complexity.SignalAggregations.ObdCommandedEvap == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdCommandedEVAP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdCommandedEvap(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdDTCList":
		if e.complexity.SignalAggregations.ObdDTCList == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdDTCList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdDTCList(childComplexity, args["agg"].(model.StringAggregation)), true

	case "SignalAggregations.obdDistanceSinceDTCClear":
		if e.complexity.SignalAggregations.ObdDistanceSinceDTCClear == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdDistanceSinceDTCClear_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdDistanceSinceDTCClear(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdDistanceWithMIL":
		if e.complexity.SignalAggregations.ObdDistanceWithMil == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdDistanceWithMIL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdDistanceWithMil(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdEngineLoad":
		if e.complexity.SignalAggregations.ObdEngineLoad == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdEngineLoad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdEngineLoad(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdFuelPressure":
		if e.complexity.SignalAggregations.ObdFuelPressure == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdFuelPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdFuelPressure(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdIntakeTemp":
		if e.complexity.SignalAggregations.ObdIntakeTemp == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdIntakeTemp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdIntakeTemp(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdLongTermFuelTrim1":
		if e.complexity.SignalAggregations.ObdLongTermFuelTrim1 == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdLongTermFuelTrim1_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdLongTermFuelTrim1(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdMAP":
		if e.complexity.SignalAggregations.ObdMap == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdMAP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdMap(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdO2WRSensor1Voltage":
		if e.complexity.SignalAggregations.ObdO2WRSensor1Voltage == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdO2WRSensor1Voltage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdO2WRSensor1Voltage(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdO2WRSensor2Voltage":
		if e.complexity.SignalAggregations.ObdO2WRSensor2Voltage == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdO2WRSensor2Voltage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdO2WRSensor2Voltage(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdRunTime":
		if e.complexity.SignalAggregations.ObdRunTime == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdRunTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdRunTime(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdShortTermFuelTrim1":
		if e.complexity.SignalAggregations.ObdShortTermFuelTrim1 == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdShortTermFuelTrim1_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdShortTermFuelTrim1(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.obdWarmupsSinceDTCClear":
		if e.complexity.SignalAggregations.ObdWarmupsSinceDTCClear == nil {
			break
		}

		args, err := ec.field_SignalAggregations_obdWarmupsSinceDTCClear_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ObdWarmupsSinceDTCClear(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineDieselExhaustFluidCapacity":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineDieselExhaustFluidCapacity == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineDieselExhaustFluidCapacity(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineDieselExhaustFluidLevel":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineDieselExhaustFluidLevel == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineDieselExhaustFluidLevel(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineECT":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineEct == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineECT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineEct(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineEngineOilLevel":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineEngineOilLevel == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineEngineOilLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineEngineOilLevel(childComplexity, args["agg"].(model.StringAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineEngineOilRelativeLevel":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineEngineOilRelativeLevel == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineEngineOilRelativeLevel(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineEOP":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineEop == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineEOP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineEop(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineEOT":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineEot == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineEOT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineEot(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineMAF":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineMaf == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineMAF_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineMaf(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineSpeed":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineSpeed == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineSpeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineSpeed(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineTorque":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineTorque == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineTorque_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineTorque(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainCombustionEngineTPS":
		if e.complexity.SignalAggregations.PowertrainCombustionEngineTps == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainCombustionEngineTPS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainCombustionEngineTps(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainFuelSystemAbsoluteLevel":
		if e.complexity.SignalAggregations.PowertrainFuelSystemAbsoluteLevel == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainFuelSystemAbsoluteLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainFuelSystemAbsoluteLevel(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainFuelSystemRelativeLevel":
		if e.complexity.SignalAggregations.PowertrainFuelSystemRelativeLevel == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainFuelSystemRelativeLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainFuelSystemRelativeLevel(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainFuelSystemSupportedFuelTypes":
		if e.complexity.SignalAggregations.PowertrainFuelSystemSupportedFuelTypes == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainFuelSystemSupportedFuelTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainFuelSystemSupportedFuelTypes(childComplexity, args["agg"].(model.StringAggregation)), true

	case "SignalAggregations.powertrainRange":
		if e.complexity.SignalAggregations.PowertrainRange == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainRange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainRange(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryChargingAddedEnergy":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryChargingAddedEnergy == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryChargingAddedEnergy(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryChargingChargeCurrentAC":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryChargingChargeCurrentAc == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryChargingChargeCurrentAc(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryChargingChargeLimit":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryChargingChargeLimit == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeLimit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryChargingChargeLimit(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryChargingChargeVoltageUnknownType":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryChargingChargeVoltageUnknownType == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryChargingChargeVoltageUnknownType(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryChargingIsCharging":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryChargingIsCharging == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingIsCharging_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryChargingIsCharging(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryCurrentPower":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryCurrentPower == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryCurrentPower_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryCurrentPower(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryCurrentVoltage":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryCurrentVoltage == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryCurrentVoltage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryCurrentVoltage(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryGrossCapacity":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryGrossCapacity == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryGrossCapacity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryGrossCapacity(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryRange":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryRange == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryRange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryRange(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryStateOfChargeCurrent":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryStateOfChargeCurrent == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryStateOfChargeCurrent(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryStateOfChargeCurrentEnergy":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryStateOfChargeCurrentEnergy == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryStateOfChargeCurrentEnergy(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTractionBatteryTemperatureAverage":
		if e.complexity.SignalAggregations.PowertrainTractionBatteryTemperatureAverage == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTractionBatteryTemperatureAverage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTractionBatteryTemperatureAverage(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTransmissionCurrentGear":
		if e.complexity.SignalAggregations.PowertrainTransmissionCurrentGear == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTransmissionCurrentGear_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTransmissionCurrentGear(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTransmissionTemperature":
		if e.complexity.SignalAggregations.PowertrainTransmissionTemperature == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTransmissionTemperature_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTransmissionTemperature(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainTransmissionTravelledDistance":
		if e.complexity.SignalAggregations.PowertrainTransmissionTravelledDistance == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainTransmissionTravelledDistance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainTransmissionTravelledDistance(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.powertrainType":
		if e.complexity.SignalAggregations.PowertrainType == nil {
			break
		}

		args, err := ec.field_SignalAggregations_powertrainType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.PowertrainType(childComplexity, args["agg"].(model.StringAggregation)), true

	case "SignalAggregations.serviceDistanceToService":
		if e.complexity.SignalAggregations.ServiceDistanceToService == nil {
			break
		}

		args, err := ec.field_SignalAggregations_serviceDistanceToService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.ServiceDistanceToService(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.speed":
		if e.complexity.SignalAggregations.Speed == nil {
			break
		}

		args, err := ec.field_SignalAggregations_speed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SignalAggregations.Speed(childComplexity, args["agg"].(model.FloatAggregation)), true

	case "SignalAggregations.timestamp":
		if e.complexity.SignalAggregations.Timestamp == nil {
			break
		}

		return e.complexity.SignalAggregations.Timestamp(childComplexity), true

	case "SignalCollection.angularVelocityYaw":
		if e.complexity.SignalCollection.AngularVelocityYaw == nil {
			break
		}

		return e.complexity.SignalCollection.AngularVelocityYaw(childComplexity), true

	case "SignalCollection.cabinDoorRow1DriverSideIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow1DriverSideIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow1DriverSideIsOpen(childComplexity), true

	case "SignalCollection.cabinDoorRow1DriverSideWindowIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow1DriverSideWindowIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow1DriverSideWindowIsOpen(childComplexity), true

	case "SignalCollection.cabinDoorRow1PassengerSideIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow1PassengerSideIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow1PassengerSideIsOpen(childComplexity), true

	case "SignalCollection.cabinDoorRow1PassengerSideWindowIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow1PassengerSideWindowIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow1PassengerSideWindowIsOpen(childComplexity), true

	case "SignalCollection.cabinDoorRow2DriverSideIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow2DriverSideIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow2DriverSideIsOpen(childComplexity), true

	case "SignalCollection.cabinDoorRow2DriverSideWindowIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow2DriverSideWindowIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow2DriverSideWindowIsOpen(childComplexity), true

	case "SignalCollection.cabinDoorRow2PassengerSideIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow2PassengerSideIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow2PassengerSideIsOpen(childComplexity), true

	case "SignalCollection.cabinDoorRow2PassengerSideWindowIsOpen":
		if e.complexity.SignalCollection.CabinDoorRow2PassengerSideWindowIsOpen == nil {
			break
		}

		return e.complexity.SignalCollection.CabinDoorRow2PassengerSideWindowIsOpen(childComplexity), true

	case "SignalCollection.chassisAxleRow1WheelLeftSpeed":
		if e.complexity.SignalCollection.ChassisAxleRow1WheelLeftSpeed == nil {
			break
		}

		return e.complexity.SignalCollection.ChassisAxleRow1WheelLeftSpeed(childComplexity), true

	case "SignalCollection.chassisAxleRow1WheelLeftTirePressure":
		if e.complexity.SignalCollection.ChassisAxleRow1WheelLeftTirePressure == nil {
			break
		}

		return e.complexity.SignalCollection.ChassisAxleRow1WheelLeftTirePressure(childComplexity), true

	case "SignalCollection.chassisAxleRow1WheelRightSpeed":
		if e.complexity.SignalCollection.ChassisAxleRow1WheelRightSpeed == nil {
			break
		}

		return e.complexity.SignalCollection.ChassisAxleRow1WheelRightSpeed(childComplexity), true

	case "SignalCollection.chassisAxleRow1WheelRightTirePressure":
		if e.complexity.SignalCollection.ChassisAxleRow1WheelRightTirePressure == nil {
			break
		}

		return e.complexity.SignalCollection.ChassisAxleRow1WheelRightTirePressure(childComplexity), true

	case "SignalCollection.chassisAxleRow2WheelLeftTirePressure":
		if e.complexity.SignalCollection.ChassisAxleRow2WheelLeftTirePressure == nil {
			break
		}

		return e.complexity.SignalCollection.ChassisAxleRow2WheelLeftTirePressure(childComplexity), true

	case "SignalCollection.chassisAxleRow2WheelRightTirePressure":
		if e.complexity.SignalCollection.ChassisAxleRow2WheelRightTirePressure == nil {
			break
		}

		return e.complexity.SignalCollection.ChassisAxleRow2WheelRightTirePressure(childComplexity), true

	case "SignalCollection.currentLocationAltitude":
		if e.complexity.SignalCollection.CurrentLocationAltitude == nil {
			break
		}

		return e.complexity.SignalCollection.CurrentLocationAltitude(childComplexity), true

	case "SignalCollection.currentLocationApproximateLatitude":
		if e.complexity.SignalCollection.CurrentLocationApproximateLatitude == nil {
			break
		}

		return e.complexity.SignalCollection.CurrentLocationApproximateLatitude(childComplexity), true

	case "SignalCollection.currentLocationApproximateLongitude":
		if e.complexity.SignalCollection.CurrentLocationApproximateLongitude == nil {
			break
		}

		return e.complexity.SignalCollection.CurrentLocationApproximateLongitude(childComplexity), true

	case "SignalCollection.currentLocationHeading":
		if e.complexity.SignalCollection.CurrentLocationHeading == nil {
			break
		}

		return e.complexity.SignalCollection.CurrentLocationHeading(childComplexity), true

	case "SignalCollection.currentLocationIsRedacted":
		if e.complexity.SignalCollection.CurrentLocationIsRedacted == nil {
			break
		}

		return e.complexity.SignalCollection.CurrentLocationIsRedacted(childComplexity), true

	case "SignalCollection.currentLocationLatitude":
		if e.complexity.SignalCollection.CurrentLocationLatitude == nil {
			break
		}

		return e.complexity.SignalCollection.CurrentLocationLatitude(childComplexity), true

	case "SignalCollection.currentLocationLongitude":
		if e.complexity.SignalCollection.CurrentLocationLongitude == nil {
			break
		}

		return e.complexity.SignalCollection.CurrentLocationLongitude(childComplexity), true

	case "SignalCollection.dimoAftermarketHDOP":
		if e.complexity.SignalCollection.DIMOAftermarketHDOP == nil {
			break
		}

		return e.complexity.SignalCollection.DIMOAftermarketHDOP(childComplexity), true

	case "SignalCollection.dimoAftermarketNSAT":
		if e.complexity.SignalCollection.DIMOAftermarketNSAT == nil {
			break
		}

		return e.complexity.SignalCollection.DIMOAftermarketNSAT(childComplexity), true

	case "SignalCollection.dimoAftermarketSSID":
		if e.complexity.SignalCollection.DIMOAftermarketSSID == nil {
			break
		}

		return e.complexity.SignalCollection.DIMOAftermarketSSID(childComplexity), true

	case "SignalCollection.dimoAftermarketWPAState":
		if e.complexity.SignalCollection.DIMOAftermarketWPAState == nil {
			break
		}

		return e.complexity.SignalCollection.DIMOAftermarketWPAState(childComplexity), true

	case "SignalCollection.exteriorAirTemperature":
		if e.complexity.SignalCollection.ExteriorAirTemperature == nil {
			break
		}

		return e.complexity.SignalCollection.ExteriorAirTemperature(childComplexity), true

	case "SignalCollection.isIgnitionOn":
		if e.complexity.SignalCollection.IsIgnitionOn == nil {
			break
		}

		return e.complexity.SignalCollection.IsIgnitionOn(childComplexity), true

	case "SignalCollection.lastSeen":
		if e.complexity.SignalCollection.LastSeen == nil {
			break
		}

		return e.complexity.SignalCollection.LastSeen(childComplexity), true

	case "SignalCollection.lowVoltageBatteryCurrentVoltage":
		if e.complexity.SignalCollection.LowVoltageBatteryCurrentVoltage == nil {
			break
		}

		return e.complexity.SignalCollection.LowVoltageBatteryCurrentVoltage(childComplexity), true

	case "SignalCollection.obdBarometricPressure":
		if e.complexity.SignalCollection.OBDBarometricPressure == nil {
			break
		}

		return e.complexity.SignalCollection.OBDBarometricPressure(childComplexity), true

	case "SignalCollection.obdCommandedEGR":
		if e.complexity.SignalCollection.OBDCommandedEGR == nil {
			break
		}

		return e.complexity.SignalCollection.OBDCommandedEGR(childComplexity), true

	case "SignalCollection.obdCommandedEVAP":
		if e.complexity.SignalCollection.OBDCommandedEVAP == nil {
			break
		}

		return e.complexity.SignalCollection.OBDCommandedEVAP(childComplexity), true

	case "SignalCollection.obdDTCList":
		if e.complexity.SignalCollection.OBDDTCList == nil {
			break
		}

		return e.complexity.SignalCollection.OBDDTCList(childComplexity), true

	case "SignalCollection.obdDistanceSinceDTCClear":
		if e.complexity.SignalCollection.OBDDistanceSinceDTCClear == nil {
			break
		}

		return e.complexity.SignalCollection.OBDDistanceSinceDTCClear(childComplexity), true

	case "SignalCollection.obdDistanceWithMIL":
		if e.complexity.SignalCollection.OBDDistanceWithMIL == nil {
			break
		}

		return e.complexity.SignalCollection.OBDDistanceWithMIL(childComplexity), true

	case "SignalCollection.obdEngineLoad":
		if e.complexity.SignalCollection.OBDEngineLoad == nil {
			break
		}

		return e.complexity.SignalCollection.OBDEngineLoad(childComplexity), true

	case "SignalCollection.obdFuelPressure":
		if e.complexity.SignalCollection.OBDFuelPressure == nil {
			break
		}

		return e.complexity.SignalCollection.OBDFuelPressure(childComplexity), true

	case "SignalCollection.obdIntakeTemp":
		if e.complexity.SignalCollection.OBDIntakeTemp == nil {
			break
		}

		return e.complexity.SignalCollection.OBDIntakeTemp(childComplexity), true

	case "SignalCollection.obdLongTermFuelTrim1":
		if e.complexity.SignalCollection.OBDLongTermFuelTrim1 == nil {
			break
		}

		return e.complexity.SignalCollection.OBDLongTermFuelTrim1(childComplexity), true

	case "SignalCollection.obdMAP":
		if e.complexity.SignalCollection.OBDMAP == nil {
			break
		}

		return e.complexity.SignalCollection.OBDMAP(childComplexity), true

	case "SignalCollection.obdO2WRSensor1Voltage":
		if e.complexity.SignalCollection.OBDO2WRSensor1Voltage == nil {
			break
		}

		return e.complexity.SignalCollection.OBDO2WRSensor1Voltage(childComplexity), true

	case "SignalCollection.obdO2WRSensor2Voltage":
		if e.complexity.SignalCollection.OBDO2WRSensor2Voltage == nil {
			break
		}

		return e.complexity.SignalCollection.OBDO2WRSensor2Voltage(childComplexity), true

	case "SignalCollection.obdRunTime":
		if e.complexity.SignalCollection.OBDRunTime == nil {
			break
		}

		return e.complexity.SignalCollection.OBDRunTime(childComplexity), true

	case "SignalCollection.obdShortTermFuelTrim1":
		if e.complexity.SignalCollection.OBDShortTermFuelTrim1 == nil {
			break
		}

		return e.complexity.SignalCollection.OBDShortTermFuelTrim1(childComplexity), true

	case "SignalCollection.obdWarmupsSinceDTCClear":
		if e.complexity.SignalCollection.OBDWarmupsSinceDTCClear == nil {
			break
		}

		return e.complexity.SignalCollection.OBDWarmupsSinceDTCClear(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineDieselExhaustFluidCapacity":
		if e.complexity.SignalCollection.PowertrainCombustionEngineDieselExhaustFluidCapacity == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineDieselExhaustFluidCapacity(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineDieselExhaustFluidLevel":
		if e.complexity.SignalCollection.PowertrainCombustionEngineDieselExhaustFluidLevel == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineDieselExhaustFluidLevel(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineECT":
		if e.complexity.SignalCollection.PowertrainCombustionEngineECT == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineECT(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineEOP":
		if e.complexity.SignalCollection.PowertrainCombustionEngineEOP == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineEOP(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineEOT":
		if e.complexity.SignalCollection.PowertrainCombustionEngineEOT == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineEOT(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineEngineOilLevel":
		if e.complexity.SignalCollection.PowertrainCombustionEngineEngineOilLevel == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineEngineOilLevel(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineEngineOilRelativeLevel":
		if e.complexity.SignalCollection.PowertrainCombustionEngineEngineOilRelativeLevel == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineEngineOilRelativeLevel(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineMAF":
		if e.complexity.SignalCollection.PowertrainCombustionEngineMAF == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineMAF(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineSpeed":
		if e.complexity.SignalCollection.PowertrainCombustionEngineSpeed == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineSpeed(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineTPS":
		if e.complexity.SignalCollection.PowertrainCombustionEngineTPS == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineTPS(childComplexity), true

	case "SignalCollection.powertrainCombustionEngineTorque":
		if e.complexity.SignalCollection.PowertrainCombustionEngineTorque == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainCombustionEngineTorque(childComplexity), true

	case "SignalCollection.powertrainFuelSystemAbsoluteLevel":
		if e.complexity.SignalCollection.PowertrainFuelSystemAbsoluteLevel == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainFuelSystemAbsoluteLevel(childComplexity), true

	case "SignalCollection.powertrainFuelSystemRelativeLevel":
		if e.complexity.SignalCollection.PowertrainFuelSystemRelativeLevel == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainFuelSystemRelativeLevel(childComplexity), true

	case "SignalCollection.powertrainFuelSystemSupportedFuelTypes":
		if e.complexity.SignalCollection.PowertrainFuelSystemSupportedFuelTypes == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainFuelSystemSupportedFuelTypes(childComplexity), true

	case "SignalCollection.powertrainRange":
		if e.complexity.SignalCollection.PowertrainRange == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainRange(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryChargingAddedEnergy":
		if e.complexity.SignalCollection.PowertrainTractionBatteryChargingAddedEnergy == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryChargingAddedEnergy(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryChargingChargeCurrentAC":
		if e.complexity.SignalCollection.PowertrainTractionBatteryChargingChargeCurrentAC == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryChargingChargeCurrentAC(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryChargingChargeLimit":
		if e.complexity.SignalCollection.PowertrainTractionBatteryChargingChargeLimit == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryChargingChargeLimit(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryChargingChargeVoltageUnknownType":
		if e.complexity.SignalCollection.PowertrainTractionBatteryChargingChargeVoltageUnknownType == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryChargingChargeVoltageUnknownType(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryChargingIsCharging":
		if e.complexity.SignalCollection.PowertrainTractionBatteryChargingIsCharging == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryChargingIsCharging(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryCurrentPower":
		if e.complexity.SignalCollection.PowertrainTractionBatteryCurrentPower == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryCurrentPower(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryCurrentVoltage":
		if e.complexity.SignalCollection.PowertrainTractionBatteryCurrentVoltage == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryCurrentVoltage(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryGrossCapacity":
		if e.complexity.SignalCollection.PowertrainTractionBatteryGrossCapacity == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryGrossCapacity(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryRange":
		if e.complexity.SignalCollection.PowertrainTractionBatteryRange == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryRange(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryStateOfChargeCurrent":
		if e.complexity.SignalCollection.PowertrainTractionBatteryStateOfChargeCurrent == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryStateOfChargeCurrent(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryStateOfChargeCurrentEnergy":
		if e.complexity.SignalCollection.PowertrainTractionBatteryStateOfChargeCurrentEnergy == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryStateOfChargeCurrentEnergy(childComplexity), true

	case "SignalCollection.powertrainTractionBatteryTemperatureAverage":
		if e.complexity.SignalCollection.PowertrainTractionBatteryTemperatureAverage == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTractionBatteryTemperatureAverage(childComplexity), true

	case "SignalCollection.powertrainTransmissionCurrentGear":
		if e.complexity.SignalCollection.PowertrainTransmissionCurrentGear == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTransmissionCurrentGear(childComplexity), true

	case "SignalCollection.powertrainTransmissionTemperature":
		if e.complexity.SignalCollection.PowertrainTransmissionTemperature == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTransmissionTemperature(childComplexity), true

	case "SignalCollection.powertrainTransmissionTravelledDistance":
		if e.complexity.SignalCollection.PowertrainTransmissionTravelledDistance == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainTransmissionTravelledDistance(childComplexity), true

	case "SignalCollection.powertrainType":
		if e.complexity.SignalCollection.PowertrainType == nil {
			break
		}

		return e.complexity.SignalCollection.PowertrainType(childComplexity), true

	case "SignalCollection.serviceDistanceToService":
		if e.complexity.SignalCollection.ServiceDistanceToService == nil {
			break
		}

		return e.complexity.SignalCollection.ServiceDistanceToService(childComplexity), true

	case "SignalCollection.speed":
		if e.complexity.SignalCollection.Speed == nil {
			break
		}

		return e.complexity.SignalCollection.Speed(childComplexity), true

	case "SignalFloat.timestamp":
		if e.complexity.SignalFloat.Timestamp == nil {
			break
		}

		return e.complexity.SignalFloat.Timestamp(childComplexity), true

	case "SignalFloat.value":
		if e.complexity.SignalFloat.Value == nil {
			break
		}

		return e.complexity.SignalFloat.Value(childComplexity), true

	case "SignalString.timestamp":
		if e.complexity.SignalString.Timestamp == nil {
			break
		}

		return e.complexity.SignalString.Timestamp(childComplexity), true

	case "SignalString.value":
		if e.complexity.SignalString.Value == nil {
			break
		}

		return e.complexity.SignalString.Value(childComplexity), true

	case "VINVC.countryCode":
		if e.complexity.VINVC.CountryCode == nil {
			break
		}

		return e.complexity.VINVC.CountryCode(childComplexity), true

	case "VINVC.rawVC":
		if e.complexity.VINVC.RawVc == nil {
			break
		}

		return e.complexity.VINVC.RawVc(childComplexity), true

	case "VINVC.recordedAt":
		if e.complexity.VINVC.RecordedAt == nil {
			break
		}

		return e.complexity.VINVC.RecordedAt(childComplexity), true

	case "VINVC.recordedBy":
		if e.complexity.VINVC.RecordedBy == nil {
			break
		}

		return e.complexity.VINVC.RecordedBy(childComplexity), true

	case "VINVC.validFrom":
		if e.complexity.VINVC.ValidFrom == nil {
			break
		}

		return e.complexity.VINVC.ValidFrom(childComplexity), true

	case "VINVC.validTo":
		if e.complexity.VINVC.ValidTo == nil {
			break
		}

		return e.complexity.VINVC.ValidTo(childComplexity), true

	case "VINVC.vehicleContractAddress":
		if e.complexity.VINVC.VehicleContractAddress == nil {
			break
		}

		return e.complexity.VINVC.VehicleContractAddress(childComplexity), true

	case "VINVC.vehicleTokenId":
		if e.complexity.VINVC.VehicleTokenID == nil {
			break
		}

		return e.complexity.VINVC.VehicleTokenID(childComplexity), true

	case "VINVC.vin":
		if e.complexity.VINVC.Vin == nil {
			break
		}

		return e.complexity.VINVC.Vin(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAftermarketDeviceBy,
		ec.unmarshalInputAttestationFilter,
		ec.unmarshalInputSignalFilter,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../schema/attestation.graphqls", Input: `extend type Query {
  """
  attestations returns all attestations for a given vehicle token.

  Required Privileges: [VEHICLE_RAW_DATA]
  """
  attestations(
    """
    The token ID of the vehicle.
    """
    tokenId: Int!
    """
    The attesting party. 
    """
    source: Address
    """
    Filter attestation by producer effectiveAt, expiresAt, or attestation ID. 
    """
    filter: AttestationFilter
  ): [Attestation]
    @requiresVehicleToken
    @requiresAllOfPrivileges(privileges: [VEHICLE_RAW_DATA])
}

type Attestation {
  """
  ID is the ID of the attestation.
  """
  ID: String!

  """
  vehicleTokenId is the token ID of the vehicle.
  """
  vehicleTokenId: Int!

  """
  recordedAt represents the time the attestation was recorded at.
  """
  recordedAt: Time!

  """
  attestation is the data being attested to.
  """
  attestation: String!

  """
  type
  """
  type: String!

  """
  source
  """
  source: Address!

  """
  dataversion
  """
  dataVersion: String!

  """
  producer
  """
  producer: String

}

"""
AttestationFilter holds the filter parameters for the attestation querys.
"""
input AttestationFilter {
  """
  Filter attestations by data version.
  """
  dataVersion: String

  """
  Filter attestations by source type.
  """
  producer: String

  """
  Filter attestations effective at or after this date.
  """
  effectiveAt: Time

  """
  Filter attestations effective until this date.
  """
  expiresAt: Time
}
`, BuiltIn: false},
	{Name: "../../schema/auth.graphqls", Input: `scalar Map

directive @requiresAllOfPrivileges(
  privileges: [Privilege!]!
) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @requiresOneOfPrivilege(
  privileges: [Privilege!]!
) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

enum Privilege {
  VEHICLE_NON_LOCATION_DATA
  VEHICLE_COMMANDS
  VEHICLE_CURRENT_LOCATION
  VEHICLE_ALL_TIME_LOCATION
  VEHICLE_VIN_CREDENTIAL
  VEHICLE_APPROXIMATE_LOCATION
  MANUFACTURER_DEVICE_LAST_SEEN
  VEHICLE_RAW_DATA
}

directive @requiresVehicleToken on FIELD_DEFINITION
directive @requiresManufacturerToken on FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "../../schema/base.graphqls", Input: `"""
A point in time, encoded per RFC-3999. Typically these will be in second precision,
just like the blockchain, and in UTC.
"""
scalar Time

"""
A 20-byte Ethereum address, encoded as a checksummed hex string with 0x prefix.
"""
scalar Address

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @isSignal on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @hasAggregation on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
"""
The root query type for the GraphQL schema.
"""
type Query {
  """
  signals returns a collection of signals for a given token in a given time range.
  """
  signals(
    tokenId: Int!
    """
    interval is a time span that used for aggregatting the data with.
    A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix,
    such as "300ms" or "2h45m". Valid time units are "ms", "s", "m", "h"
    """
    interval: String!
    from: Time!
    to: Time!
    filter: SignalFilter
  ): [SignalAggregations!] @requiresVehicleToken
  """
  SignalsLatest returns the latest signals for a given token.
  """
  signalsLatest(tokenId: Int!, filter: SignalFilter): SignalCollection
    @requiresVehicleToken
  """
  availableSignals returns a list of queryable signal names that have stored data for a given tokenId.
  """
  availableSignals(tokenId: Int!, filter: SignalFilter): [String!]
    @requiresVehicleToken
}
type SignalAggregations {
  """
  Timestamp of the aggregated data.
  """
  timestamp: Time!
  """
  Approximate Latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-90' Max: '90'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLatitude(agg: FloatAggregation!): Float
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLatitude", forceResolver: true)
    @isSignal
    @hasAggregation

  """
  Approximate Longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-180' Max: '180'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLongitude(agg: FloatAggregation!): Float
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLongitude", forceResolver: true)
    @isSignal
    @hasAggregation
}

type SignalCollection {
  """
  The last time any signal was seen matching the filter.
  """
  lastSeen: Time
  """
  Approximate Latitude of vehicle in WGS 84 geodetic coordinates.
  This returned location is the center of the h3 cell with resolution 6 that the location is in.
  More Info on H3: https://h3geo.org/
  Unit: 'degrees' Min: '-90' Max: '90'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLatitude: SignalFloat
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLatitude")
    @isSignal

  """
  Approximate Longitude of vehicle in WGS 84 geodetic coordinates.
  This returned location is the center of the h3 cell with resolution 6 that the location is in.
  More Info on H3: https://h3geo.org/
  Unit: 'degrees' Min: '-180' Max: '180'
  Required Privileges: [VEHICLE_APPROXIMATE_LOCATION OR VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationApproximateLongitude: SignalFloat
    @requiresOneOfPrivilege(
      privileges: [VEHICLE_APPROXIMATE_LOCATION, VEHICLE_ALL_TIME_LOCATION]
    )
    @goField(name: "CurrentLocationApproximateLongitude")
    @isSignal
}

enum FloatAggregation {
  AVG
  MED
  MAX
  MIN
  RAND
  FIRST
  LAST
}

enum StringAggregation {
  """
  Randomly select a value from the group.
  """
  RAND
  """
  Select the most frequently occurring value in the group.
  """
  TOP
  """
  Return a list of unique values in the group.
  """
  UNIQUE
  """
  Return value in group associated with the minimum time value.
  """
  FIRST
  """
  Return value in group associated with the maximum time value.
  """
  LAST
}
type SignalFloat {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time!

  """
  value of the signal
  """
  value: Float!
}

type SignalString {
  """
  timestamp of when this data was colllected
  """
  timestamp: Time!

  """
  value of the signal
  """
  value: String!
}

"""
SignalFilter holds the filter parameters for the signal querys.
"""
input SignalFilter {
  """
  Filter signals by source type.
  available sources are: "autopi", "macaron", "ruptela", "smartcar", "tesla","compass"
  """
  source: String
}
`, BuiltIn: false},
	{Name: "../../schema/device_activity.graphqls", Input: `extend type Query {
  """
  DeviceActivity indicates when a given device last transmitted data. For privacy, ranges are used rather than exact timestamps.

  Required Privileges: MANUFACTURER_DEVICE_LAST_SEEN
  """
  deviceActivity(
    """
    The token ID of the aftermarket device.
    """
    by: AftermarketDeviceBy!
  ): DeviceActivity @requiresManufacturerToken @requiresAllOfPrivileges(privileges: [MANUFACTURER_DEVICE_LAST_SEEN])
}

type DeviceActivity {
  """
  lastActive indicates the start of a 3 hour block during which the device was last active.
  """
  lastActive: Time
}

"""
The AftermarketDeviceBy input is used to specify a unique aftermarket device to query for last active status.
"""
input AftermarketDeviceBy @oneOf {
  tokenId: Int
  address: Address
  serial: String
}
`, BuiltIn: false},
	{Name: "../../schema/signals_gen.graphqls", Input: `# Code generated  with ` + "`" + `make gql-model` + "`" + ` DO NOT EDIT.
extend type SignalAggregations {
  """
  Vehicle rotation rate along Z (vertical).
  Unit: 'degrees/s'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  angularVelocityYaw(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "AngularVelocityYaw", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1DriverSideIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1DriverSideIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1DriverSideWindowIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1DriverSideWindowIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1PassengerSideIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1PassengerSideIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1PassengerSideWindowIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1PassengerSideWindowIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2DriverSideIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2DriverSideIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2DriverSideWindowIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2DriverSideWindowIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2PassengerSideIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2PassengerSideIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2PassengerSideWindowIsOpen(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2PassengerSideWindowIsOpen", forceResolver: true) @isSignal @hasAggregation
  
  """
  Rotational speed of a vehicle's wheel.
  Unit: 'km/h'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelLeftSpeed(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelLeftSpeed", forceResolver: true) @isSignal @hasAggregation
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelLeftTirePressure(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelLeftTirePressure", forceResolver: true) @isSignal @hasAggregation
  
  """
  Rotational speed of a vehicle's wheel.
  Unit: 'km/h'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelRightSpeed(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelRightSpeed", forceResolver: true) @isSignal @hasAggregation
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelRightTirePressure(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelRightTirePressure", forceResolver: true) @isSignal @hasAggregation
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow2WheelLeftTirePressure(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow2WheelLeftTirePressure", forceResolver: true) @isSignal @hasAggregation
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow2WheelRightTirePressure(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow2WheelRightTirePressure", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
  Unit: 'm'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationAltitude(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationAltitude", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West.
  Unit: 'degrees' Min: '0' Max: '360'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationHeading(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationHeading", forceResolver: true) @isSignal @hasAggregation
  
  """
  Indicates if the latitude and longitude signals at the current timestamp have been redacted using a privacy zone.
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationIsRedacted(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationIsRedacted", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-90' Max: '90'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationLatitude(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationLatitude", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-180' Max: '180'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationLongitude(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationLongitude", forceResolver: true) @isSignal @hasAggregation
  
  """
  Horizontal dilution of precision of GPS
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketHDOP(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketHDOP", forceResolver: true) @isSignal @hasAggregation
  
  """
  Number of sync satellites for GPS
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketNSAT(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketNSAT", forceResolver: true) @isSignal @hasAggregation
  
  """
  Service Set Identifier for the wifi.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketSSID(
    agg: StringAggregation!
  ):  String @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketSSID", forceResolver: true) @isSignal @hasAggregation
  
  """
  Indicate the current WPA state for the device's wifi, e.g. "CONNECTED", "SCANNING", "DISCONNECTED"
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketWPAState(
    agg: StringAggregation!
  ):  String @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketWPAState", forceResolver: true) @isSignal @hasAggregation
  
  """
  Air temperature outside the vehicle.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  exteriorAirTemperature(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ExteriorAirTemperature", forceResolver: true) @isSignal @hasAggregation
  
  """
  Vehicle ignition status. False - off, True - on.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  isIgnitionOn(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "IsIgnitionOn", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current Voltage of the low voltage battery.
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  lowVoltageBatteryCurrentVoltage(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "LowVoltageBatteryCurrentVoltage", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 33 - Barometric pressure
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdBarometricPressure(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDBarometricPressure", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 2C - Commanded exhaust gas recirculation (EGR)
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdCommandedEGR(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDCommandedEGR", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 2E - Commanded evaporative purge (EVAP) valve
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdCommandedEVAP(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDCommandedEVAP", forceResolver: true) @isSignal @hasAggregation
  
  """
  List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdDTCList(
    agg: StringAggregation!
  ):  String @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDDTCList", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 31 - Distance traveled since codes cleared
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdDistanceSinceDTCClear(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDDistanceSinceDTCClear", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 21 - Distance traveled with MIL on
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdDistanceWithMIL(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDDistanceWithMIL", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 04 - Engine load in percent - 0 = no load, 100 = full load
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdEngineLoad(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDEngineLoad", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 0A - Fuel pressure
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdFuelPressure(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDFuelPressure", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 0F - Intake temperature
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdIntakeTemp(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDIntakeTemp", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdLongTermFuelTrim1(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDLongTermFuelTrim1", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 0B - Intake manifold pressure
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdMAP(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDMAP", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdO2WRSensor1Voltage(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDO2WRSensor1Voltage", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdO2WRSensor2Voltage(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDO2WRSensor2Voltage", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 1F - Engine run time
  Unit: 's'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdRunTime(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDRunTime", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdShortTermFuelTrim1(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDShortTermFuelTrim1", forceResolver: true) @isSignal @hasAggregation
  
  """
  PID 30 - Number of warm-ups since codes cleared
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdWarmupsSinceDTCClear(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDWarmupsSinceDTCClear", forceResolver: true) @isSignal @hasAggregation
  
  """
  Capacity in liters of the Diesel Exhaust Fluid Tank.
  Unit: 'l'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineDieselExhaustFluidCapacity(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineDieselExhaustFluidCapacity", forceResolver: true) @isSignal @hasAggregation
  
  """
  Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineDieselExhaustFluidLevel(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineDieselExhaustFluidLevel", forceResolver: true) @isSignal @hasAggregation
  
  """
  Engine coolant temperature.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineECT(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineECT", forceResolver: true) @isSignal @hasAggregation
  
  """
  Engine oil pressure.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEOP(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEOP", forceResolver: true) @isSignal @hasAggregation
  
  """
  Engine oil temperature.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEOT(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEOT", forceResolver: true) @isSignal @hasAggregation
  
  """
  Engine oil level.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEngineOilLevel(
    agg: StringAggregation!
  ):  String @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEngineOilLevel", forceResolver: true) @isSignal @hasAggregation
  
  """
  Engine oil level as a percentage.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEngineOilRelativeLevel(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEngineOilRelativeLevel", forceResolver: true) @isSignal @hasAggregation
  
  """
  Grams of air drawn into engine per second.
  Unit: 'g/s'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineMAF(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineMAF", forceResolver: true) @isSignal @hasAggregation
  
  """
  Engine speed measured as rotations per minute.
  Unit: 'rpm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineSpeed(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineSpeed", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current throttle position.
  Unit: 'percent' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineTPS(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineTPS", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current engine torque. Shall be reported as 0 during engine breaking.
  Unit: 'Nm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineTorque(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineTorque", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current available fuel in the fuel tank expressed in liters.
  Unit: 'l'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainFuelSystemAbsoluteLevel(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainFuelSystemAbsoluteLevel", forceResolver: true) @isSignal @hasAggregation
  
  """
  Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainFuelSystemRelativeLevel(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainFuelSystemRelativeLevel", forceResolver: true) @isSignal @hasAggregation
  
  """
  High level information of fuel types supported
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainFuelSystemSupportedFuelTypes(
    agg: StringAggregation!
  ):  String @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainFuelSystemSupportedFuelTypes", forceResolver: true) @isSignal @hasAggregation
  
  """
  Remaining range in meters using all energy sources available in the vehicle.
  Unit: 'm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainRange(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainRange", forceResolver: true) @isSignal @hasAggregation
  
  """
  Amount of charge added to the high voltage battery during the current charging session, expressed in kilowatt-hours.
  Unit: 'kWh'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingAddedEnergy(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingAddedEnergy", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current AC charging current (rms) at inlet. Negative if returning energy to grid. Used when per-phase numbers are unavailable.
  Unit: 'A'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingChargeCurrentAC(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingChargeCurrentAC", forceResolver: true) @isSignal @hasAggregation
  
  """
  Target charge limit (state of charge) for battery.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingChargeLimit(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingChargeLimit", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current charging voltage at inlet. Used when the data source does not indicate the current type (AC or DC) in use.
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingChargeVoltageUnknownType(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingChargeVoltageUnknownType", forceResolver: true) @isSignal @hasAggregation
  
  """
  True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingIsCharging(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingIsCharging", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
  Unit: 'W'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryCurrentPower(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryCurrentPower", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current Voltage of the battery.
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryCurrentVoltage(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryCurrentVoltage", forceResolver: true) @isSignal @hasAggregation
  
  """
  Gross capacity of the battery.
  Unit: 'kWh'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryGrossCapacity(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryGrossCapacity", forceResolver: true) @isSignal @hasAggregation
  
  """
  Remaining range in meters using only battery.
  Unit: 'm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryRange(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryRange", forceResolver: true) @isSignal @hasAggregation
  
  """
  Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
  Unit: 'percent' Min: '0' Max: '100.0'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryStateOfChargeCurrent(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryStateOfChargeCurrent", forceResolver: true) @isSignal @hasAggregation
  
  """
  Physical state of charge of high voltage battery expressed in kWh.
  Unit: 'kWh'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryStateOfChargeCurrentEnergy(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryStateOfChargeCurrentEnergy", forceResolver: true) @isSignal @hasAggregation
  
  """
  Current average temperature of the battery cells.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryTemperatureAverage(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryTemperatureAverage", forceResolver: true) @isSignal @hasAggregation
  
  """
  The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTransmissionCurrentGear(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTransmissionCurrentGear", forceResolver: true) @isSignal @hasAggregation
  
  """
  The current gearbox temperature.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTransmissionTemperature(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTransmissionTemperature", forceResolver: true) @isSignal @hasAggregation
  
  """
  Odometer reading, total distance travelled during the lifetime of the transmission.
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTransmissionTravelledDistance(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTransmissionTravelledDistance", forceResolver: true) @isSignal @hasAggregation
  
  """
  Defines the powertrain type of the vehicle.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainType(
    agg: StringAggregation!
  ):  String @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainType", forceResolver: true) @isSignal @hasAggregation
  
  """
  Remaining distance to service (of any kind). Negative values indicate service overdue.
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  serviceDistanceToService(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ServiceDistanceToService", forceResolver: true) @isSignal @hasAggregation
  
  """
  Vehicle speed.
  Unit: 'km/h'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  speed(
    agg: FloatAggregation!
  ):  Float @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "Speed", forceResolver: true) @isSignal @hasAggregation
  
}

extend type SignalCollection {
  """
  Vehicle rotation rate along Z (vertical).
  Unit: 'degrees/s'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  angularVelocityYaw: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "AngularVelocityYaw") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1DriverSideIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1DriverSideIsOpen") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1DriverSideWindowIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1DriverSideWindowIsOpen") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1PassengerSideIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1PassengerSideIsOpen") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow1PassengerSideWindowIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow1PassengerSideWindowIsOpen") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2DriverSideIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2DriverSideIsOpen") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2DriverSideWindowIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2DriverSideWindowIsOpen") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2PassengerSideIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2PassengerSideIsOpen") @isSignal
  
  """
  Is item open or closed? True = Fully or partially open. False = Fully closed.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  cabinDoorRow2PassengerSideWindowIsOpen: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "CabinDoorRow2PassengerSideWindowIsOpen") @isSignal
  
  """
  Rotational speed of a vehicle's wheel.
  Unit: 'km/h'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelLeftSpeed: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelLeftSpeed") @isSignal
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelLeftTirePressure: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelLeftTirePressure") @isSignal
  
  """
  Rotational speed of a vehicle's wheel.
  Unit: 'km/h'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelRightSpeed: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelRightSpeed") @isSignal
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow1WheelRightTirePressure: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow1WheelRightTirePressure") @isSignal
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow2WheelLeftTirePressure: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow2WheelLeftTirePressure") @isSignal
  
  """
  Tire pressure in kilo-Pascal.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  chassisAxleRow2WheelRightTirePressure: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ChassisAxleRow2WheelRightTirePressure") @isSignal
  
  """
  Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.
  Unit: 'm'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationAltitude: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationAltitude") @isSignal
  
  """
  Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West.
  Unit: 'degrees' Min: '0' Max: '360'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationHeading: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationHeading") @isSignal
  
  """
  Indicates if the latitude and longitude signals at the current timestamp have been redacted using a privacy zone.
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationIsRedacted: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationIsRedacted") @isSignal
  
  """
  Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-90' Max: '90'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationLatitude: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationLatitude") @isSignal
  
  """
  Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.
  Unit: 'degrees' Min: '-180' Max: '180'
  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  currentLocationLongitude: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION]) @goField(name: "CurrentLocationLongitude") @isSignal
  
  """
  Horizontal dilution of precision of GPS
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketHDOP: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketHDOP") @isSignal
  
  """
  Number of sync satellites for GPS
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketNSAT: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketNSAT") @isSignal
  
  """
  Service Set Identifier for the wifi.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketSSID: SignalString @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketSSID") @isSignal
  
  """
  Indicate the current WPA state for the device's wifi, e.g. "CONNECTED", "SCANNING", "DISCONNECTED"
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  dimoAftermarketWPAState: SignalString @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "DIMOAftermarketWPAState") @isSignal
  
  """
  Air temperature outside the vehicle.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  exteriorAirTemperature: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ExteriorAirTemperature") @isSignal
  
  """
  Vehicle ignition status. False - off, True - on.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  isIgnitionOn: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "IsIgnitionOn") @isSignal
  
  """
  Current Voltage of the low voltage battery.
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  lowVoltageBatteryCurrentVoltage: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "LowVoltageBatteryCurrentVoltage") @isSignal
  
  """
  PID 33 - Barometric pressure
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdBarometricPressure: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDBarometricPressure") @isSignal
  
  """
  PID 2C - Commanded exhaust gas recirculation (EGR)
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdCommandedEGR: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDCommandedEGR") @isSignal
  
  """
  PID 2E - Commanded evaporative purge (EVAP) valve
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdCommandedEVAP: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDCommandedEVAP") @isSignal
  
  """
  List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdDTCList: SignalString @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDDTCList") @isSignal
  
  """
  PID 31 - Distance traveled since codes cleared
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdDistanceSinceDTCClear: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDDistanceSinceDTCClear") @isSignal
  
  """
  PID 21 - Distance traveled with MIL on
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdDistanceWithMIL: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDDistanceWithMIL") @isSignal
  
  """
  PID 04 - Engine load in percent - 0 = no load, 100 = full load
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdEngineLoad: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDEngineLoad") @isSignal
  
  """
  PID 0A - Fuel pressure
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdFuelPressure: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDFuelPressure") @isSignal
  
  """
  PID 0F - Intake temperature
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdIntakeTemp: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDIntakeTemp") @isSignal
  
  """
  PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdLongTermFuelTrim1: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDLongTermFuelTrim1") @isSignal
  
  """
  PID 0B - Intake manifold pressure
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdMAP: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDMAP") @isSignal
  
  """
  PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdO2WRSensor1Voltage: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDO2WRSensor1Voltage") @isSignal
  
  """
  PID 2x (byte CD) - Voltage for wide range/band oxygen sensor
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdO2WRSensor2Voltage: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDO2WRSensor2Voltage") @isSignal
  
  """
  PID 1F - Engine run time
  Unit: 's'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdRunTime: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDRunTime") @isSignal
  
  """
  PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer
  Unit: 'percent'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdShortTermFuelTrim1: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDShortTermFuelTrim1") @isSignal
  
  """
  PID 30 - Number of warm-ups since codes cleared
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  obdWarmupsSinceDTCClear: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "OBDWarmupsSinceDTCClear") @isSignal
  
  """
  Capacity in liters of the Diesel Exhaust Fluid Tank.
  Unit: 'l'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineDieselExhaustFluidCapacity: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineDieselExhaustFluidCapacity") @isSignal
  
  """
  Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineDieselExhaustFluidLevel: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineDieselExhaustFluidLevel") @isSignal
  
  """
  Engine coolant temperature.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineECT: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineECT") @isSignal
  
  """
  Engine oil pressure.
  Unit: 'kPa'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEOP: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEOP") @isSignal
  
  """
  Engine oil temperature.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEOT: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEOT") @isSignal
  
  """
  Engine oil level.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEngineOilLevel: SignalString @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEngineOilLevel") @isSignal
  
  """
  Engine oil level as a percentage.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineEngineOilRelativeLevel: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineEngineOilRelativeLevel") @isSignal
  
  """
  Grams of air drawn into engine per second.
  Unit: 'g/s'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineMAF: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineMAF") @isSignal
  
  """
  Engine speed measured as rotations per minute.
  Unit: 'rpm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineSpeed: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineSpeed") @isSignal
  
  """
  Current throttle position.
  Unit: 'percent' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineTPS: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineTPS") @isSignal
  
  """
  Current engine torque. Shall be reported as 0 during engine breaking.
  Unit: 'Nm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainCombustionEngineTorque: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainCombustionEngineTorque") @isSignal
  
  """
  Current available fuel in the fuel tank expressed in liters.
  Unit: 'l'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainFuelSystemAbsoluteLevel: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainFuelSystemAbsoluteLevel") @isSignal
  
  """
  Level in fuel tank as percent of capacity. 0 = empty. 100 = full.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainFuelSystemRelativeLevel: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainFuelSystemRelativeLevel") @isSignal
  
  """
  High level information of fuel types supported
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainFuelSystemSupportedFuelTypes: SignalString @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainFuelSystemSupportedFuelTypes") @isSignal
  
  """
  Remaining range in meters using all energy sources available in the vehicle.
  Unit: 'm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainRange: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainRange") @isSignal
  
  """
  Amount of charge added to the high voltage battery during the current charging session, expressed in kilowatt-hours.
  Unit: 'kWh'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingAddedEnergy: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingAddedEnergy") @isSignal
  
  """
  Current AC charging current (rms) at inlet. Negative if returning energy to grid. Used when per-phase numbers are unavailable.
  Unit: 'A'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingChargeCurrentAC: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingChargeCurrentAC") @isSignal
  
  """
  Target charge limit (state of charge) for battery.
  Unit: 'percent' Min: '0' Max: '100'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingChargeLimit: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingChargeLimit") @isSignal
  
  """
  Current charging voltage at inlet. Used when the data source does not indicate the current type (AC or DC) in use.
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingChargeVoltageUnknownType: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingChargeVoltageUnknownType") @isSignal
  
  """
  True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryChargingIsCharging: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryChargingIsCharging") @isSignal
  
  """
  Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.
  Unit: 'W'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryCurrentPower: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryCurrentPower") @isSignal
  
  """
  Current Voltage of the battery.
  Unit: 'V'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryCurrentVoltage: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryCurrentVoltage") @isSignal
  
  """
  Gross capacity of the battery.
  Unit: 'kWh'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryGrossCapacity: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryGrossCapacity") @isSignal
  
  """
  Remaining range in meters using only battery.
  Unit: 'm'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryRange: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryRange") @isSignal
  
  """
  Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.
  Unit: 'percent' Min: '0' Max: '100.0'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryStateOfChargeCurrent: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryStateOfChargeCurrent") @isSignal
  
  """
  Physical state of charge of high voltage battery expressed in kWh.
  Unit: 'kWh'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryStateOfChargeCurrentEnergy: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryStateOfChargeCurrentEnergy") @isSignal
  
  """
  Current average temperature of the battery cells.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTractionBatteryTemperatureAverage: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTractionBatteryTemperatureAverage") @isSignal
  
  """
  The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTransmissionCurrentGear: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTransmissionCurrentGear") @isSignal
  
  """
  The current gearbox temperature.
  Unit: 'celsius'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTransmissionTemperature: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTransmissionTemperature") @isSignal
  
  """
  Odometer reading, total distance travelled during the lifetime of the transmission.
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainTransmissionTravelledDistance: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainTransmissionTravelledDistance") @isSignal
  
  """
  Defines the powertrain type of the vehicle.
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  powertrainType: SignalString @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "PowertrainType") @isSignal
  
  """
  Remaining distance to service (of any kind). Negative values indicate service overdue.
  Unit: 'km'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  serviceDistanceToService: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "ServiceDistanceToService") @isSignal
  
  """
  Vehicle speed.
  Unit: 'km/h'
  Required Privileges: [VEHICLE_NON_LOCATION_DATA]
  """
  speed: SignalFloat @requiresAllOfPrivileges(privileges: [VEHICLE_NON_LOCATION_DATA]) @goField(name: "Speed") @isSignal
  
}

`, BuiltIn: false},
	{Name: "../../schema/vc.graphqls", Input: `extend type Query {
  """
  vinVCLatest returns the latest VINVC data for a given token.

  Required Privileges: [VEHICLE_VIN_CREDENTIAL]
  """
  vinVCLatest(
    """
    The token ID of the vehicle.
    """
    tokenId: Int!
  ): VINVC
    @requiresVehicleToken
    @requiresAllOfPrivileges(privileges: [VEHICLE_VIN_CREDENTIAL])

  """
  pomVCLatest returns the latest POMVC data for a given token.

  Required Privileges: [VEHICLE_ALL_TIME_LOCATION]
  """
  pomVCLatest(
    """
    The token ID of the vehicle.
    """
    tokenId: Int!
  ): POMVC
    @requiresVehicleToken
    @requiresAllOfPrivileges(privileges: [VEHICLE_ALL_TIME_LOCATION])
}

type VINVC {
  """
  vehicleTokenId is the token ID of the vehicle.
  """
  vehicleTokenId: Int

  """
  vin is the vehicle identification number.
  """
  vin: String

  """
  recordedBy is the entity that recorded the VIN.
  """
  recordedBy: String

  """
  The time the VIN was recorded.
  """
  recordedAt: Time

  """
  countryCode is the country code that the VIN belongs to.
  """
  countryCode: String

  """
  vehicleContractAddress is the address of the vehicle contract.
  """
  vehicleContractAddress: String

  """
  validFrom is the time the VC is valid from.
  """
  validFrom: Time

  """
  validTo is the time the VC is valid to.
  """
  validTo: Time

  """
  rawVC is the raw VC JSON.
  """
  rawVC: String!
}

type POMVC {
  """
  vehicleTokenId is the token ID of the vehicle.
  """
  vehicleTokenId: Int

  """
  recordedBy is the entity that recorded the VIN.
  """
  recordedBy: String
  """
  vehicleContractAddress is the address of the vehicle contract.
  """
  vehicleContractAddress: String

  """
  validFrom is the time the VC is valid from.
  """
  validFrom: Time

  """
  rawVC is the raw VC JSON.
  """
  rawVC: String!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_requiresAllOfPrivileges_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_requiresAllOfPrivileges_argsPrivileges(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["privileges"] = arg0
	return args, nil
}
func (ec *executionContext) dir_requiresAllOfPrivileges_argsPrivileges(
	ctx context.Context,
	rawArgs map[string]any,
) ([]model.Privilege, error) {
	if _, ok := rawArgs["privileges"]; !ok {
		var zeroVal []model.Privilege
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("privileges"))
	if tmp, ok := rawArgs["privileges"]; ok {
		return ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, tmp)
	}

	var zeroVal []model.Privilege
	return zeroVal, nil
}

func (ec *executionContext) dir_requiresOneOfPrivilege_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_requiresOneOfPrivilege_argsPrivileges(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["privileges"] = arg0
	return args, nil
}
func (ec *executionContext) dir_requiresOneOfPrivilege_argsPrivileges(
	ctx context.Context,
	rawArgs map[string]any,
) ([]model.Privilege, error) {
	if _, ok := rawArgs["privileges"]; !ok {
		var zeroVal []model.Privilege
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("privileges"))
	if tmp, ok := rawArgs["privileges"]; ok {
		return ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, tmp)
	}

	var zeroVal []model.Privilege
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_attestations_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_attestations_argsTokenID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["tokenId"] = arg0
	arg1, err := ec.field_Query_attestations_argsSource(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["source"] = arg1
	arg2, err := ec.field_Query_attestations_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg2
	return args, nil
}
func (ec *executionContext) field_Query_attestations_argsTokenID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["tokenId"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenId"))
	if tmp, ok := rawArgs["tokenId"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_attestations_argsSource(
	ctx context.Context,
	rawArgs map[string]any,
) (*common.Address, error) {
	if _, ok := rawArgs["source"]; !ok {
		var zeroVal *common.Address
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
	if tmp, ok := rawArgs["source"]; ok {
		return ec.unmarshalOAddress2ᚖgithubᚗcomᚋethereumᚋgoᚑethereumᚋcommonᚐAddress(ctx, tmp)
	}

	var zeroVal *common.Address
	return zeroVal, nil
}

func (ec *executionContext) field_Query_attestations_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.AttestationFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *model.AttestationFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOAttestationFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAttestationFilter(ctx, tmp)
	}

	var zeroVal *model.AttestationFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_availableSignals_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_availableSignals_argsTokenID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["tokenId"] = arg0
	arg1, err := ec.field_Query_availableSignals_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_availableSignals_argsTokenID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["tokenId"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenId"))
	if tmp, ok := rawArgs["tokenId"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_availableSignals_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SignalFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *model.SignalFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOSignalFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFilter(ctx, tmp)
	}

	var zeroVal *model.SignalFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deviceActivity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_deviceActivity_argsBy(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["by"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_deviceActivity_argsBy(
	ctx context.Context,
	rawArgs map[string]any,
) (model.AftermarketDeviceBy, error) {
	if _, ok := rawArgs["by"]; !ok {
		var zeroVal model.AftermarketDeviceBy
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("by"))
	if tmp, ok := rawArgs["by"]; ok {
		return ec.unmarshalNAftermarketDeviceBy2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAftermarketDeviceBy(ctx, tmp)
	}

	var zeroVal model.AftermarketDeviceBy
	return zeroVal, nil
}

func (ec *executionContext) field_Query_pomVCLatest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_pomVCLatest_argsTokenID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["tokenId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_pomVCLatest_argsTokenID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["tokenId"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenId"))
	if tmp, ok := rawArgs["tokenId"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_signalsLatest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_signalsLatest_argsTokenID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["tokenId"] = arg0
	arg1, err := ec.field_Query_signalsLatest_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_signalsLatest_argsTokenID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["tokenId"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenId"))
	if tmp, ok := rawArgs["tokenId"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_signalsLatest_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SignalFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *model.SignalFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOSignalFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFilter(ctx, tmp)
	}

	var zeroVal *model.SignalFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_signals_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_signals_argsTokenID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["tokenId"] = arg0
	arg1, err := ec.field_Query_signals_argsInterval(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["interval"] = arg1
	arg2, err := ec.field_Query_signals_argsFrom(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["from"] = arg2
	arg3, err := ec.field_Query_signals_argsTo(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["to"] = arg3
	arg4, err := ec.field_Query_signals_argsFilter(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["filter"] = arg4
	return args, nil
}
func (ec *executionContext) field_Query_signals_argsTokenID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["tokenId"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenId"))
	if tmp, ok := rawArgs["tokenId"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_Query_signals_argsInterval(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["interval"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("interval"))
	if tmp, ok := rawArgs["interval"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_signals_argsFrom(
	ctx context.Context,
	rawArgs map[string]any,
) (time.Time, error) {
	if _, ok := rawArgs["from"]; !ok {
		var zeroVal time.Time
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
	if tmp, ok := rawArgs["from"]; ok {
		return ec.unmarshalNTime2timeᚐTime(ctx, tmp)
	}

	var zeroVal time.Time
	return zeroVal, nil
}

func (ec *executionContext) field_Query_signals_argsTo(
	ctx context.Context,
	rawArgs map[string]any,
) (time.Time, error) {
	if _, ok := rawArgs["to"]; !ok {
		var zeroVal time.Time
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
	if tmp, ok := rawArgs["to"]; ok {
		return ec.unmarshalNTime2timeᚐTime(ctx, tmp)
	}

	var zeroVal time.Time
	return zeroVal, nil
}

func (ec *executionContext) field_Query_signals_argsFilter(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.SignalFilter, error) {
	if _, ok := rawArgs["filter"]; !ok {
		var zeroVal *model.SignalFilter
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
	if tmp, ok := rawArgs["filter"]; ok {
		return ec.unmarshalOSignalFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFilter(ctx, tmp)
	}

	var zeroVal *model.SignalFilter
	return zeroVal, nil
}

func (ec *executionContext) field_Query_vinVCLatest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_vinVCLatest_argsTokenID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["tokenId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_vinVCLatest_argsTokenID(
	ctx context.Context,
	rawArgs map[string]any,
) (int, error) {
	if _, ok := rawArgs["tokenId"]; !ok {
		var zeroVal int
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenId"))
	if tmp, ok := rawArgs["tokenId"]; ok {
		return ec.unmarshalNInt2int(ctx, tmp)
	}

	var zeroVal int
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_angularVelocityYaw_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_angularVelocityYaw_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_angularVelocityYaw_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow1DriverSideIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow1DriverSideIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow1DriverSideIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow1PassengerSideIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow1PassengerSideIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow1PassengerSideIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow2DriverSideIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow2DriverSideIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow2DriverSideIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow2PassengerSideIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow2PassengerSideIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow2PassengerSideIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelLeftSpeed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_chassisAxleRow1WheelLeftSpeed_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelLeftSpeed_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelLeftTirePressure_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_chassisAxleRow1WheelLeftTirePressure_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelLeftTirePressure_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelRightSpeed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_chassisAxleRow1WheelRightSpeed_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelRightSpeed_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelRightTirePressure_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_chassisAxleRow1WheelRightTirePressure_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_chassisAxleRow1WheelRightTirePressure_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_chassisAxleRow2WheelLeftTirePressure_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_chassisAxleRow2WheelLeftTirePressure_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_chassisAxleRow2WheelLeftTirePressure_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_chassisAxleRow2WheelRightTirePressure_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_chassisAxleRow2WheelRightTirePressure_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_chassisAxleRow2WheelRightTirePressure_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_currentLocationAltitude_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_currentLocationAltitude_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_currentLocationAltitude_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_currentLocationApproximateLatitude_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_currentLocationApproximateLatitude_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_currentLocationApproximateLatitude_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_currentLocationApproximateLongitude_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_currentLocationApproximateLongitude_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_currentLocationApproximateLongitude_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_currentLocationHeading_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_currentLocationHeading_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_currentLocationHeading_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_currentLocationIsRedacted_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_currentLocationIsRedacted_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_currentLocationIsRedacted_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_currentLocationLatitude_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_currentLocationLatitude_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_currentLocationLatitude_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_currentLocationLongitude_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_currentLocationLongitude_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_currentLocationLongitude_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_dimoAftermarketHDOP_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_dimoAftermarketHDOP_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_dimoAftermarketHDOP_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_dimoAftermarketNSAT_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_dimoAftermarketNSAT_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_dimoAftermarketNSAT_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_dimoAftermarketSSID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_dimoAftermarketSSID_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_dimoAftermarketSSID_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StringAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.StringAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
	}

	var zeroVal model.StringAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_dimoAftermarketWPAState_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_dimoAftermarketWPAState_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_dimoAftermarketWPAState_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StringAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.StringAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
	}

	var zeroVal model.StringAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_exteriorAirTemperature_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_exteriorAirTemperature_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_exteriorAirTemperature_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_isIgnitionOn_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_isIgnitionOn_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_isIgnitionOn_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_lowVoltageBatteryCurrentVoltage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_lowVoltageBatteryCurrentVoltage_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_lowVoltageBatteryCurrentVoltage_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdBarometricPressure_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdBarometricPressure_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdBarometricPressure_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdCommandedEGR_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdCommandedEGR_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdCommandedEGR_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdCommandedEVAP_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdCommandedEVAP_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdCommandedEVAP_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdDTCList_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdDTCList_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdDTCList_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StringAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.StringAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
	}

	var zeroVal model.StringAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdDistanceSinceDTCClear_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdDistanceSinceDTCClear_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdDistanceSinceDTCClear_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdDistanceWithMIL_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdDistanceWithMIL_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdDistanceWithMIL_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdEngineLoad_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdEngineLoad_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdEngineLoad_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdFuelPressure_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdFuelPressure_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdFuelPressure_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdIntakeTemp_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdIntakeTemp_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdIntakeTemp_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdLongTermFuelTrim1_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdLongTermFuelTrim1_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdLongTermFuelTrim1_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdMAP_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdMAP_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdMAP_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdO2WRSensor1Voltage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdO2WRSensor1Voltage_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdO2WRSensor1Voltage_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdO2WRSensor2Voltage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdO2WRSensor2Voltage_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdO2WRSensor2Voltage_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdRunTime_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdRunTime_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdRunTime_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdShortTermFuelTrim1_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdShortTermFuelTrim1_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdShortTermFuelTrim1_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_obdWarmupsSinceDTCClear_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_obdWarmupsSinceDTCClear_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_obdWarmupsSinceDTCClear_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineECT_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineECT_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineECT_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEOP_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineEOP_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEOP_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEOT_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineEOT_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEOT_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEngineOilLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineEngineOilLevel_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEngineOilLevel_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StringAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.StringAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
	}

	var zeroVal model.StringAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineMAF_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineMAF_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineMAF_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineSpeed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineSpeed_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineSpeed_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineTPS_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineTPS_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineTPS_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineTorque_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainCombustionEngineTorque_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainCombustionEngineTorque_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainFuelSystemAbsoluteLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainFuelSystemAbsoluteLevel_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainFuelSystemAbsoluteLevel_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainFuelSystemRelativeLevel_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainFuelSystemRelativeLevel_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainFuelSystemRelativeLevel_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainFuelSystemSupportedFuelTypes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainFuelSystemSupportedFuelTypes_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainFuelSystemSupportedFuelTypes_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StringAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.StringAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
	}

	var zeroVal model.StringAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainRange_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainRange_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainRange_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingChargeLimit_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeLimit_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingChargeLimit_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingIsCharging_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryChargingIsCharging_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryChargingIsCharging_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryCurrentPower_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryCurrentPower_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryCurrentPower_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryCurrentVoltage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryCurrentVoltage_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryCurrentVoltage_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryGrossCapacity_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryGrossCapacity_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryGrossCapacity_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryRange_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryRange_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryRange_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryTemperatureAverage_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTractionBatteryTemperatureAverage_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTractionBatteryTemperatureAverage_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTransmissionCurrentGear_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTransmissionCurrentGear_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTransmissionCurrentGear_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTransmissionTemperature_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTransmissionTemperature_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTransmissionTemperature_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainTransmissionTravelledDistance_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainTransmissionTravelledDistance_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainTransmissionTravelledDistance_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_powertrainType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_powertrainType_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_powertrainType_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.StringAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.StringAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx, tmp)
	}

	var zeroVal model.StringAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_serviceDistanceToService_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_serviceDistanceToService_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_serviceDistanceToService_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field_SignalAggregations_speed_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_SignalAggregations_speed_argsAgg(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["agg"] = arg0
	return args, nil
}
func (ec *executionContext) field_SignalAggregations_speed_argsAgg(
	ctx context.Context,
	rawArgs map[string]any,
) (model.FloatAggregation, error) {
	if _, ok := rawArgs["agg"]; !ok {
		var zeroVal model.FloatAggregation
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("agg"))
	if tmp, ok := rawArgs["agg"]; ok {
		return ec.unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx, tmp)
	}

	var zeroVal model.FloatAggregation
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Attestation_ID(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_ID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attestation_vehicleTokenId(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_vehicleTokenId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleTokenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_vehicleTokenId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attestation_recordedAt(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_recordedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_recordedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attestation_attestation(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_attestation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attestation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_attestation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attestation_type(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attestation_source(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(common.Address)
	fc.Result = res
	return ec.marshalNAddress2githubᚗcomᚋethereumᚋgoᚑethereumᚋcommonᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Address does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attestation_dataVersion(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_dataVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_dataVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attestation_producer(ctx context.Context, field graphql.CollectedField, obj *model.Attestation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attestation_producer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Producer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attestation_producer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attestation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceActivity_lastActive(ctx context.Context, field graphql.CollectedField, obj *model.DeviceActivity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceActivity_lastActive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceActivity_lastActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceActivity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _POMVC_vehicleTokenId(ctx context.Context, field graphql.CollectedField, obj *model.Pomvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_POMVC_vehicleTokenId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleTokenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_POMVC_vehicleTokenId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "POMVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _POMVC_recordedBy(ctx context.Context, field graphql.CollectedField, obj *model.Pomvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_POMVC_recordedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_POMVC_recordedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "POMVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _POMVC_vehicleContractAddress(ctx context.Context, field graphql.CollectedField, obj *model.Pomvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_POMVC_vehicleContractAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleContractAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_POMVC_vehicleContractAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "POMVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _POMVC_validFrom(ctx context.Context, field graphql.CollectedField, obj *model.Pomvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_POMVC_validFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_POMVC_validFrom(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "POMVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _POMVC_rawVC(ctx context.Context, field graphql.CollectedField, obj *model.Pomvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_POMVC_rawVC(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawVc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_POMVC_rawVC(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "POMVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_signals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_signals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Signals(rctx, fc.Args["tokenId"].(int), fc.Args["interval"].(string), fc.Args["from"].(time.Time), fc.Args["to"].(time.Time), fc.Args["filter"].(*model.SignalFilter))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.RequiresVehicleToken == nil {
				var zeroVal []*model.SignalAggregations
				return zeroVal, errors.New("directive requiresVehicleToken is not implemented")
			}
			return ec.directives.RequiresVehicleToken(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.SignalAggregations); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalAggregations`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SignalAggregations)
	fc.Result = res
	return ec.marshalOSignalAggregations2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalAggregationsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_signals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalAggregations_timestamp(ctx, field)
			case "currentLocationApproximateLatitude":
				return ec.fieldContext_SignalAggregations_currentLocationApproximateLatitude(ctx, field)
			case "currentLocationApproximateLongitude":
				return ec.fieldContext_SignalAggregations_currentLocationApproximateLongitude(ctx, field)
			case "angularVelocityYaw":
				return ec.fieldContext_SignalAggregations_angularVelocityYaw(ctx, field)
			case "cabinDoorRow1DriverSideIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow1DriverSideIsOpen(ctx, field)
			case "cabinDoorRow1DriverSideWindowIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen(ctx, field)
			case "cabinDoorRow1PassengerSideIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow1PassengerSideIsOpen(ctx, field)
			case "cabinDoorRow1PassengerSideWindowIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen(ctx, field)
			case "cabinDoorRow2DriverSideIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow2DriverSideIsOpen(ctx, field)
			case "cabinDoorRow2DriverSideWindowIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen(ctx, field)
			case "cabinDoorRow2PassengerSideIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow2PassengerSideIsOpen(ctx, field)
			case "cabinDoorRow2PassengerSideWindowIsOpen":
				return ec.fieldContext_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen(ctx, field)
			case "chassisAxleRow1WheelLeftSpeed":
				return ec.fieldContext_SignalAggregations_chassisAxleRow1WheelLeftSpeed(ctx, field)
			case "chassisAxleRow1WheelLeftTirePressure":
				return ec.fieldContext_SignalAggregations_chassisAxleRow1WheelLeftTirePressure(ctx, field)
			case "chassisAxleRow1WheelRightSpeed":
				return ec.fieldContext_SignalAggregations_chassisAxleRow1WheelRightSpeed(ctx, field)
			case "chassisAxleRow1WheelRightTirePressure":
				return ec.fieldContext_SignalAggregations_chassisAxleRow1WheelRightTirePressure(ctx, field)
			case "chassisAxleRow2WheelLeftTirePressure":
				return ec.fieldContext_SignalAggregations_chassisAxleRow2WheelLeftTirePressure(ctx, field)
			case "chassisAxleRow2WheelRightTirePressure":
				return ec.fieldContext_SignalAggregations_chassisAxleRow2WheelRightTirePressure(ctx, field)
			case "currentLocationAltitude":
				return ec.fieldContext_SignalAggregations_currentLocationAltitude(ctx, field)
			case "currentLocationHeading":
				return ec.fieldContext_SignalAggregations_currentLocationHeading(ctx, field)
			case "currentLocationIsRedacted":
				return ec.fieldContext_SignalAggregations_currentLocationIsRedacted(ctx, field)
			case "currentLocationLatitude":
				return ec.fieldContext_SignalAggregations_currentLocationLatitude(ctx, field)
			case "currentLocationLongitude":
				return ec.fieldContext_SignalAggregations_currentLocationLongitude(ctx, field)
			case "dimoAftermarketHDOP":
				return ec.fieldContext_SignalAggregations_dimoAftermarketHDOP(ctx, field)
			case "dimoAftermarketNSAT":
				return ec.fieldContext_SignalAggregations_dimoAftermarketNSAT(ctx, field)
			case "dimoAftermarketSSID":
				return ec.fieldContext_SignalAggregations_dimoAftermarketSSID(ctx, field)
			case "dimoAftermarketWPAState":
				return ec.fieldContext_SignalAggregations_dimoAftermarketWPAState(ctx, field)
			case "exteriorAirTemperature":
				return ec.fieldContext_SignalAggregations_exteriorAirTemperature(ctx, field)
			case "isIgnitionOn":
				return ec.fieldContext_SignalAggregations_isIgnitionOn(ctx, field)
			case "lowVoltageBatteryCurrentVoltage":
				return ec.fieldContext_SignalAggregations_lowVoltageBatteryCurrentVoltage(ctx, field)
			case "obdBarometricPressure":
				return ec.fieldContext_SignalAggregations_obdBarometricPressure(ctx, field)
			case "obdCommandedEGR":
				return ec.fieldContext_SignalAggregations_obdCommandedEGR(ctx, field)
			case "obdCommandedEVAP":
				return ec.fieldContext_SignalAggregations_obdCommandedEVAP(ctx, field)
			case "obdDTCList":
				return ec.fieldContext_SignalAggregations_obdDTCList(ctx, field)
			case "obdDistanceSinceDTCClear":
				return ec.fieldContext_SignalAggregations_obdDistanceSinceDTCClear(ctx, field)
			case "obdDistanceWithMIL":
				return ec.fieldContext_SignalAggregations_obdDistanceWithMIL(ctx, field)
			case "obdEngineLoad":
				return ec.fieldContext_SignalAggregations_obdEngineLoad(ctx, field)
			case "obdFuelPressure":
				return ec.fieldContext_SignalAggregations_obdFuelPressure(ctx, field)
			case "obdIntakeTemp":
				return ec.fieldContext_SignalAggregations_obdIntakeTemp(ctx, field)
			case "obdLongTermFuelTrim1":
				return ec.fieldContext_SignalAggregations_obdLongTermFuelTrim1(ctx, field)
			case "obdMAP":
				return ec.fieldContext_SignalAggregations_obdMAP(ctx, field)
			case "obdO2WRSensor1Voltage":
				return ec.fieldContext_SignalAggregations_obdO2WRSensor1Voltage(ctx, field)
			case "obdO2WRSensor2Voltage":
				return ec.fieldContext_SignalAggregations_obdO2WRSensor2Voltage(ctx, field)
			case "obdRunTime":
				return ec.fieldContext_SignalAggregations_obdRunTime(ctx, field)
			case "obdShortTermFuelTrim1":
				return ec.fieldContext_SignalAggregations_obdShortTermFuelTrim1(ctx, field)
			case "obdWarmupsSinceDTCClear":
				return ec.fieldContext_SignalAggregations_obdWarmupsSinceDTCClear(ctx, field)
			case "powertrainCombustionEngineDieselExhaustFluidCapacity":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx, field)
			case "powertrainCombustionEngineDieselExhaustFluidLevel":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel(ctx, field)
			case "powertrainCombustionEngineECT":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineECT(ctx, field)
			case "powertrainCombustionEngineEOP":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineEOP(ctx, field)
			case "powertrainCombustionEngineEOT":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineEOT(ctx, field)
			case "powertrainCombustionEngineEngineOilLevel":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineEngineOilLevel(ctx, field)
			case "powertrainCombustionEngineEngineOilRelativeLevel":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel(ctx, field)
			case "powertrainCombustionEngineMAF":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineMAF(ctx, field)
			case "powertrainCombustionEngineSpeed":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineSpeed(ctx, field)
			case "powertrainCombustionEngineTPS":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineTPS(ctx, field)
			case "powertrainCombustionEngineTorque":
				return ec.fieldContext_SignalAggregations_powertrainCombustionEngineTorque(ctx, field)
			case "powertrainFuelSystemAbsoluteLevel":
				return ec.fieldContext_SignalAggregations_powertrainFuelSystemAbsoluteLevel(ctx, field)
			case "powertrainFuelSystemRelativeLevel":
				return ec.fieldContext_SignalAggregations_powertrainFuelSystemRelativeLevel(ctx, field)
			case "powertrainFuelSystemSupportedFuelTypes":
				return ec.fieldContext_SignalAggregations_powertrainFuelSystemSupportedFuelTypes(ctx, field)
			case "powertrainRange":
				return ec.fieldContext_SignalAggregations_powertrainRange(ctx, field)
			case "powertrainTractionBatteryChargingAddedEnergy":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy(ctx, field)
			case "powertrainTractionBatteryChargingChargeCurrentAC":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC(ctx, field)
			case "powertrainTractionBatteryChargingChargeLimit":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeLimit(ctx, field)
			case "powertrainTractionBatteryChargingChargeVoltageUnknownType":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx, field)
			case "powertrainTractionBatteryChargingIsCharging":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingIsCharging(ctx, field)
			case "powertrainTractionBatteryCurrentPower":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryCurrentPower(ctx, field)
			case "powertrainTractionBatteryCurrentVoltage":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryCurrentVoltage(ctx, field)
			case "powertrainTractionBatteryGrossCapacity":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryGrossCapacity(ctx, field)
			case "powertrainTractionBatteryRange":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryRange(ctx, field)
			case "powertrainTractionBatteryStateOfChargeCurrent":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent(ctx, field)
			case "powertrainTractionBatteryStateOfChargeCurrentEnergy":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx, field)
			case "powertrainTractionBatteryTemperatureAverage":
				return ec.fieldContext_SignalAggregations_powertrainTractionBatteryTemperatureAverage(ctx, field)
			case "powertrainTransmissionCurrentGear":
				return ec.fieldContext_SignalAggregations_powertrainTransmissionCurrentGear(ctx, field)
			case "powertrainTransmissionTemperature":
				return ec.fieldContext_SignalAggregations_powertrainTransmissionTemperature(ctx, field)
			case "powertrainTransmissionTravelledDistance":
				return ec.fieldContext_SignalAggregations_powertrainTransmissionTravelledDistance(ctx, field)
			case "powertrainType":
				return ec.fieldContext_SignalAggregations_powertrainType(ctx, field)
			case "serviceDistanceToService":
				return ec.fieldContext_SignalAggregations_serviceDistanceToService(ctx, field)
			case "speed":
				return ec.fieldContext_SignalAggregations_speed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalAggregations", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_signals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_signalsLatest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_signalsLatest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SignalsLatest(rctx, fc.Args["tokenId"].(int), fc.Args["filter"].(*model.SignalFilter))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.RequiresVehicleToken == nil {
				var zeroVal *model.SignalCollection
				return zeroVal, errors.New("directive requiresVehicleToken is not implemented")
			}
			return ec.directives.RequiresVehicleToken(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalCollection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalCollection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalCollection)
	fc.Result = res
	return ec.marshalOSignalCollection2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalCollection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_signalsLatest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lastSeen":
				return ec.fieldContext_SignalCollection_lastSeen(ctx, field)
			case "currentLocationApproximateLatitude":
				return ec.fieldContext_SignalCollection_currentLocationApproximateLatitude(ctx, field)
			case "currentLocationApproximateLongitude":
				return ec.fieldContext_SignalCollection_currentLocationApproximateLongitude(ctx, field)
			case "angularVelocityYaw":
				return ec.fieldContext_SignalCollection_angularVelocityYaw(ctx, field)
			case "cabinDoorRow1DriverSideIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow1DriverSideIsOpen(ctx, field)
			case "cabinDoorRow1DriverSideWindowIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow1DriverSideWindowIsOpen(ctx, field)
			case "cabinDoorRow1PassengerSideIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow1PassengerSideIsOpen(ctx, field)
			case "cabinDoorRow1PassengerSideWindowIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow1PassengerSideWindowIsOpen(ctx, field)
			case "cabinDoorRow2DriverSideIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow2DriverSideIsOpen(ctx, field)
			case "cabinDoorRow2DriverSideWindowIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow2DriverSideWindowIsOpen(ctx, field)
			case "cabinDoorRow2PassengerSideIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow2PassengerSideIsOpen(ctx, field)
			case "cabinDoorRow2PassengerSideWindowIsOpen":
				return ec.fieldContext_SignalCollection_cabinDoorRow2PassengerSideWindowIsOpen(ctx, field)
			case "chassisAxleRow1WheelLeftSpeed":
				return ec.fieldContext_SignalCollection_chassisAxleRow1WheelLeftSpeed(ctx, field)
			case "chassisAxleRow1WheelLeftTirePressure":
				return ec.fieldContext_SignalCollection_chassisAxleRow1WheelLeftTirePressure(ctx, field)
			case "chassisAxleRow1WheelRightSpeed":
				return ec.fieldContext_SignalCollection_chassisAxleRow1WheelRightSpeed(ctx, field)
			case "chassisAxleRow1WheelRightTirePressure":
				return ec.fieldContext_SignalCollection_chassisAxleRow1WheelRightTirePressure(ctx, field)
			case "chassisAxleRow2WheelLeftTirePressure":
				return ec.fieldContext_SignalCollection_chassisAxleRow2WheelLeftTirePressure(ctx, field)
			case "chassisAxleRow2WheelRightTirePressure":
				return ec.fieldContext_SignalCollection_chassisAxleRow2WheelRightTirePressure(ctx, field)
			case "currentLocationAltitude":
				return ec.fieldContext_SignalCollection_currentLocationAltitude(ctx, field)
			case "currentLocationHeading":
				return ec.fieldContext_SignalCollection_currentLocationHeading(ctx, field)
			case "currentLocationIsRedacted":
				return ec.fieldContext_SignalCollection_currentLocationIsRedacted(ctx, field)
			case "currentLocationLatitude":
				return ec.fieldContext_SignalCollection_currentLocationLatitude(ctx, field)
			case "currentLocationLongitude":
				return ec.fieldContext_SignalCollection_currentLocationLongitude(ctx, field)
			case "dimoAftermarketHDOP":
				return ec.fieldContext_SignalCollection_dimoAftermarketHDOP(ctx, field)
			case "dimoAftermarketNSAT":
				return ec.fieldContext_SignalCollection_dimoAftermarketNSAT(ctx, field)
			case "dimoAftermarketSSID":
				return ec.fieldContext_SignalCollection_dimoAftermarketSSID(ctx, field)
			case "dimoAftermarketWPAState":
				return ec.fieldContext_SignalCollection_dimoAftermarketWPAState(ctx, field)
			case "exteriorAirTemperature":
				return ec.fieldContext_SignalCollection_exteriorAirTemperature(ctx, field)
			case "isIgnitionOn":
				return ec.fieldContext_SignalCollection_isIgnitionOn(ctx, field)
			case "lowVoltageBatteryCurrentVoltage":
				return ec.fieldContext_SignalCollection_lowVoltageBatteryCurrentVoltage(ctx, field)
			case "obdBarometricPressure":
				return ec.fieldContext_SignalCollection_obdBarometricPressure(ctx, field)
			case "obdCommandedEGR":
				return ec.fieldContext_SignalCollection_obdCommandedEGR(ctx, field)
			case "obdCommandedEVAP":
				return ec.fieldContext_SignalCollection_obdCommandedEVAP(ctx, field)
			case "obdDTCList":
				return ec.fieldContext_SignalCollection_obdDTCList(ctx, field)
			case "obdDistanceSinceDTCClear":
				return ec.fieldContext_SignalCollection_obdDistanceSinceDTCClear(ctx, field)
			case "obdDistanceWithMIL":
				return ec.fieldContext_SignalCollection_obdDistanceWithMIL(ctx, field)
			case "obdEngineLoad":
				return ec.fieldContext_SignalCollection_obdEngineLoad(ctx, field)
			case "obdFuelPressure":
				return ec.fieldContext_SignalCollection_obdFuelPressure(ctx, field)
			case "obdIntakeTemp":
				return ec.fieldContext_SignalCollection_obdIntakeTemp(ctx, field)
			case "obdLongTermFuelTrim1":
				return ec.fieldContext_SignalCollection_obdLongTermFuelTrim1(ctx, field)
			case "obdMAP":
				return ec.fieldContext_SignalCollection_obdMAP(ctx, field)
			case "obdO2WRSensor1Voltage":
				return ec.fieldContext_SignalCollection_obdO2WRSensor1Voltage(ctx, field)
			case "obdO2WRSensor2Voltage":
				return ec.fieldContext_SignalCollection_obdO2WRSensor2Voltage(ctx, field)
			case "obdRunTime":
				return ec.fieldContext_SignalCollection_obdRunTime(ctx, field)
			case "obdShortTermFuelTrim1":
				return ec.fieldContext_SignalCollection_obdShortTermFuelTrim1(ctx, field)
			case "obdWarmupsSinceDTCClear":
				return ec.fieldContext_SignalCollection_obdWarmupsSinceDTCClear(ctx, field)
			case "powertrainCombustionEngineDieselExhaustFluidCapacity":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx, field)
			case "powertrainCombustionEngineDieselExhaustFluidLevel":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineDieselExhaustFluidLevel(ctx, field)
			case "powertrainCombustionEngineECT":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineECT(ctx, field)
			case "powertrainCombustionEngineEOP":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineEOP(ctx, field)
			case "powertrainCombustionEngineEOT":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineEOT(ctx, field)
			case "powertrainCombustionEngineEngineOilLevel":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineEngineOilLevel(ctx, field)
			case "powertrainCombustionEngineEngineOilRelativeLevel":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineEngineOilRelativeLevel(ctx, field)
			case "powertrainCombustionEngineMAF":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineMAF(ctx, field)
			case "powertrainCombustionEngineSpeed":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineSpeed(ctx, field)
			case "powertrainCombustionEngineTPS":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineTPS(ctx, field)
			case "powertrainCombustionEngineTorque":
				return ec.fieldContext_SignalCollection_powertrainCombustionEngineTorque(ctx, field)
			case "powertrainFuelSystemAbsoluteLevel":
				return ec.fieldContext_SignalCollection_powertrainFuelSystemAbsoluteLevel(ctx, field)
			case "powertrainFuelSystemRelativeLevel":
				return ec.fieldContext_SignalCollection_powertrainFuelSystemRelativeLevel(ctx, field)
			case "powertrainFuelSystemSupportedFuelTypes":
				return ec.fieldContext_SignalCollection_powertrainFuelSystemSupportedFuelTypes(ctx, field)
			case "powertrainRange":
				return ec.fieldContext_SignalCollection_powertrainRange(ctx, field)
			case "powertrainTractionBatteryChargingAddedEnergy":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingAddedEnergy(ctx, field)
			case "powertrainTractionBatteryChargingChargeCurrentAC":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeCurrentAC(ctx, field)
			case "powertrainTractionBatteryChargingChargeLimit":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeLimit(ctx, field)
			case "powertrainTractionBatteryChargingChargeVoltageUnknownType":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx, field)
			case "powertrainTractionBatteryChargingIsCharging":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingIsCharging(ctx, field)
			case "powertrainTractionBatteryCurrentPower":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryCurrentPower(ctx, field)
			case "powertrainTractionBatteryCurrentVoltage":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryCurrentVoltage(ctx, field)
			case "powertrainTractionBatteryGrossCapacity":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryGrossCapacity(ctx, field)
			case "powertrainTractionBatteryRange":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryRange(ctx, field)
			case "powertrainTractionBatteryStateOfChargeCurrent":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryStateOfChargeCurrent(ctx, field)
			case "powertrainTractionBatteryStateOfChargeCurrentEnergy":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx, field)
			case "powertrainTractionBatteryTemperatureAverage":
				return ec.fieldContext_SignalCollection_powertrainTractionBatteryTemperatureAverage(ctx, field)
			case "powertrainTransmissionCurrentGear":
				return ec.fieldContext_SignalCollection_powertrainTransmissionCurrentGear(ctx, field)
			case "powertrainTransmissionTemperature":
				return ec.fieldContext_SignalCollection_powertrainTransmissionTemperature(ctx, field)
			case "powertrainTransmissionTravelledDistance":
				return ec.fieldContext_SignalCollection_powertrainTransmissionTravelledDistance(ctx, field)
			case "powertrainType":
				return ec.fieldContext_SignalCollection_powertrainType(ctx, field)
			case "serviceDistanceToService":
				return ec.fieldContext_SignalCollection_serviceDistanceToService(ctx, field)
			case "speed":
				return ec.fieldContext_SignalCollection_speed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalCollection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_signalsLatest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_availableSignals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_availableSignals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AvailableSignals(rctx, fc.Args["tokenId"].(int), fc.Args["filter"].(*model.SignalFilter))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.RequiresVehicleToken == nil {
				var zeroVal []string
				return zeroVal, errors.New("directive requiresVehicleToken is not implemented")
			}
			return ec.directives.RequiresVehicleToken(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_availableSignals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_availableSignals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_attestations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_attestations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Attestations(rctx, fc.Args["tokenId"].(int), fc.Args["source"].(*common.Address), fc.Args["filter"].(*model.AttestationFilter))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.RequiresVehicleToken == nil {
				var zeroVal []*model.Attestation
				return zeroVal, errors.New("directive requiresVehicleToken is not implemented")
			}
			return ec.directives.RequiresVehicleToken(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_RAW_DATA"})
			if err != nil {
				var zeroVal []*model.Attestation
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal []*model.Attestation
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, nil, directive1, privileges)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Attestation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/DIMO-Network/telemetry-api/internal/graph/model.Attestation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Attestation)
	fc.Result = res
	return ec.marshalOAttestation2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAttestation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_attestations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Attestation_ID(ctx, field)
			case "vehicleTokenId":
				return ec.fieldContext_Attestation_vehicleTokenId(ctx, field)
			case "recordedAt":
				return ec.fieldContext_Attestation_recordedAt(ctx, field)
			case "attestation":
				return ec.fieldContext_Attestation_attestation(ctx, field)
			case "type":
				return ec.fieldContext_Attestation_type(ctx, field)
			case "source":
				return ec.fieldContext_Attestation_source(ctx, field)
			case "dataVersion":
				return ec.fieldContext_Attestation_dataVersion(ctx, field)
			case "producer":
				return ec.fieldContext_Attestation_producer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attestation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_attestations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_deviceActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deviceActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().DeviceActivity(rctx, fc.Args["by"].(model.AftermarketDeviceBy))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.RequiresManufacturerToken == nil {
				var zeroVal *model.DeviceActivity
				return zeroVal, errors.New("directive requiresManufacturerToken is not implemented")
			}
			return ec.directives.RequiresManufacturerToken(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"MANUFACTURER_DEVICE_LAST_SEEN"})
			if err != nil {
				var zeroVal *model.DeviceActivity
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.DeviceActivity
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, nil, directive1, privileges)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeviceActivity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.DeviceActivity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceActivity)
	fc.Result = res
	return ec.marshalODeviceActivity2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDeviceActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deviceActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lastActive":
				return ec.fieldContext_DeviceActivity_lastActive(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceActivity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deviceActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vinVCLatest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_vinVCLatest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().VinVCLatest(rctx, fc.Args["tokenId"].(int))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.RequiresVehicleToken == nil {
				var zeroVal *model.Vinvc
				return zeroVal, errors.New("directive requiresVehicleToken is not implemented")
			}
			return ec.directives.RequiresVehicleToken(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_VIN_CREDENTIAL"})
			if err != nil {
				var zeroVal *model.Vinvc
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.Vinvc
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, nil, directive1, privileges)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Vinvc); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.Vinvc`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Vinvc)
	fc.Result = res
	return ec.marshalOVINVC2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐVinvc(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_vinVCLatest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vehicleTokenId":
				return ec.fieldContext_VINVC_vehicleTokenId(ctx, field)
			case "vin":
				return ec.fieldContext_VINVC_vin(ctx, field)
			case "recordedBy":
				return ec.fieldContext_VINVC_recordedBy(ctx, field)
			case "recordedAt":
				return ec.fieldContext_VINVC_recordedAt(ctx, field)
			case "countryCode":
				return ec.fieldContext_VINVC_countryCode(ctx, field)
			case "vehicleContractAddress":
				return ec.fieldContext_VINVC_vehicleContractAddress(ctx, field)
			case "validFrom":
				return ec.fieldContext_VINVC_validFrom(ctx, field)
			case "validTo":
				return ec.fieldContext_VINVC_validTo(ctx, field)
			case "rawVC":
				return ec.fieldContext_VINVC_rawVC(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VINVC", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vinVCLatest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pomVCLatest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pomVCLatest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PomVCLatest(rctx, fc.Args["tokenId"].(int))
		}

		directive1 := func(ctx context.Context) (any, error) {
			if ec.directives.RequiresVehicleToken == nil {
				var zeroVal *model.Pomvc
				return zeroVal, errors.New("directive requiresVehicleToken is not implemented")
			}
			return ec.directives.RequiresVehicleToken(ctx, nil, directive0)
		}
		directive2 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.Pomvc
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.Pomvc
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, nil, directive1, privileges)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Pomvc); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.Pomvc`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Pomvc)
	fc.Result = res
	return ec.marshalOPOMVC2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPomvc(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pomVCLatest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vehicleTokenId":
				return ec.fieldContext_POMVC_vehicleTokenId(ctx, field)
			case "recordedBy":
				return ec.fieldContext_POMVC_recordedBy(ctx, field)
			case "vehicleContractAddress":
				return ec.fieldContext_POMVC_vehicleContractAddress(ctx, field)
			case "validFrom":
				return ec.fieldContext_POMVC_validFrom(ctx, field)
			case "rawVC":
				return ec.fieldContext_POMVC_rawVC(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type POMVC", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pomVCLatest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_currentLocationApproximateLatitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_currentLocationApproximateLatitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CurrentLocationApproximateLatitude(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_APPROXIMATE_LOCATION", "VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresOneOfPrivilege == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresOneOfPrivilege is not implemented")
			}
			return ec.directives.RequiresOneOfPrivilege(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_currentLocationApproximateLatitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_currentLocationApproximateLatitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_currentLocationApproximateLongitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_currentLocationApproximateLongitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CurrentLocationApproximateLongitude(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_APPROXIMATE_LOCATION", "VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresOneOfPrivilege == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresOneOfPrivilege is not implemented")
			}
			return ec.directives.RequiresOneOfPrivilege(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_currentLocationApproximateLongitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_currentLocationApproximateLongitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_angularVelocityYaw(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_angularVelocityYaw(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().AngularVelocityYaw(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_angularVelocityYaw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_angularVelocityYaw_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow1DriverSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow1DriverSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow1DriverSideIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow1DriverSideIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow1DriverSideIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow1DriverSideWindowIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow1PassengerSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow1PassengerSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow1PassengerSideIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow1PassengerSideIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow1PassengerSideIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow1PassengerSideWindowIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow2DriverSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow2DriverSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow2DriverSideIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow2DriverSideIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow2DriverSideIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow2DriverSideWindowIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow2PassengerSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow2PassengerSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow2PassengerSideIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow2PassengerSideIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow2PassengerSideIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CabinDoorRow2PassengerSideWindowIsOpen(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_chassisAxleRow1WheelLeftSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_chassisAxleRow1WheelLeftSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ChassisAxleRow1WheelLeftSpeed(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_chassisAxleRow1WheelLeftSpeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_chassisAxleRow1WheelLeftSpeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_chassisAxleRow1WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_chassisAxleRow1WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ChassisAxleRow1WheelLeftTirePressure(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_chassisAxleRow1WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_chassisAxleRow1WheelLeftTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_chassisAxleRow1WheelRightSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_chassisAxleRow1WheelRightSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ChassisAxleRow1WheelRightSpeed(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_chassisAxleRow1WheelRightSpeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_chassisAxleRow1WheelRightSpeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_chassisAxleRow1WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_chassisAxleRow1WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ChassisAxleRow1WheelRightTirePressure(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_chassisAxleRow1WheelRightTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_chassisAxleRow1WheelRightTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_chassisAxleRow2WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_chassisAxleRow2WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ChassisAxleRow2WheelLeftTirePressure(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_chassisAxleRow2WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_chassisAxleRow2WheelLeftTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_chassisAxleRow2WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_chassisAxleRow2WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ChassisAxleRow2WheelRightTirePressure(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_chassisAxleRow2WheelRightTirePressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_chassisAxleRow2WheelRightTirePressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_currentLocationAltitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_currentLocationAltitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CurrentLocationAltitude(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_currentLocationAltitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_currentLocationAltitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_currentLocationHeading(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_currentLocationHeading(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CurrentLocationHeading(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_currentLocationHeading(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_currentLocationHeading_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_currentLocationIsRedacted(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_currentLocationIsRedacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CurrentLocationIsRedacted(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_currentLocationIsRedacted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_currentLocationIsRedacted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_currentLocationLatitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_currentLocationLatitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CurrentLocationLatitude(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_currentLocationLatitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_currentLocationLatitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_currentLocationLongitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_currentLocationLongitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().CurrentLocationLongitude(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_currentLocationLongitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_currentLocationLongitude_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_dimoAftermarketHDOP(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_dimoAftermarketHDOP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().DimoAftermarketHdop(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_dimoAftermarketHDOP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_dimoAftermarketHDOP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_dimoAftermarketNSAT(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_dimoAftermarketNSAT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().DimoAftermarketNsat(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_dimoAftermarketNSAT(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_dimoAftermarketNSAT_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_dimoAftermarketSSID(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_dimoAftermarketSSID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().DimoAftermarketSsid(rctx, obj, fc.Args["agg"].(model.StringAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *string
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_dimoAftermarketSSID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_dimoAftermarketSSID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_dimoAftermarketWPAState(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_dimoAftermarketWPAState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().DimoAftermarketWPAState(rctx, obj, fc.Args["agg"].(model.StringAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *string
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_dimoAftermarketWPAState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_dimoAftermarketWPAState_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_exteriorAirTemperature(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_exteriorAirTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ExteriorAirTemperature(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_exteriorAirTemperature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_exteriorAirTemperature_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_isIgnitionOn(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_isIgnitionOn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().IsIgnitionOn(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_isIgnitionOn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_isIgnitionOn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_lowVoltageBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_lowVoltageBatteryCurrentVoltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().LowVoltageBatteryCurrentVoltage(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_lowVoltageBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_lowVoltageBatteryCurrentVoltage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdBarometricPressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdBarometricPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdBarometricPressure(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdBarometricPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdBarometricPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdCommandedEGR(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdCommandedEGR(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdCommandedEgr(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdCommandedEGR(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdCommandedEGR_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdCommandedEVAP(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdCommandedEVAP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdCommandedEvap(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdCommandedEVAP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdCommandedEVAP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdDTCList(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdDTCList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdDTCList(rctx, obj, fc.Args["agg"].(model.StringAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *string
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdDTCList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdDTCList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdDistanceSinceDTCClear(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdDistanceSinceDTCClear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdDistanceSinceDTCClear(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdDistanceSinceDTCClear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdDistanceSinceDTCClear_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdDistanceWithMIL(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdDistanceWithMIL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdDistanceWithMil(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdDistanceWithMIL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdDistanceWithMIL_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdEngineLoad(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdEngineLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdEngineLoad(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdEngineLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdEngineLoad_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdFuelPressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdFuelPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdFuelPressure(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdFuelPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdFuelPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdIntakeTemp(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdIntakeTemp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdIntakeTemp(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdIntakeTemp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdIntakeTemp_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdLongTermFuelTrim1(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdLongTermFuelTrim1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdLongTermFuelTrim1(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdLongTermFuelTrim1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdLongTermFuelTrim1_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdMAP(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdMAP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdMap(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdMAP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdMAP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdO2WRSensor1Voltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdO2WRSensor1Voltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdO2WRSensor1Voltage(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdO2WRSensor1Voltage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdO2WRSensor1Voltage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdO2WRSensor2Voltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdO2WRSensor2Voltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdO2WRSensor2Voltage(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdO2WRSensor2Voltage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdO2WRSensor2Voltage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdRunTime(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdRunTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdRunTime(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdRunTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdRunTime_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdShortTermFuelTrim1(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdShortTermFuelTrim1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdShortTermFuelTrim1(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdShortTermFuelTrim1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdShortTermFuelTrim1_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_obdWarmupsSinceDTCClear(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_obdWarmupsSinceDTCClear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ObdWarmupsSinceDTCClear(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_obdWarmupsSinceDTCClear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_obdWarmupsSinceDTCClear_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineDieselExhaustFluidCapacity(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineDieselExhaustFluidLevel(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineECT(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineECT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineEct(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineECT(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineECT_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineEOP(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineEOP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineEop(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineEOP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineEOP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineEOT(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineEOT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineEot(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineEOT(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineEOT_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineEngineOilLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineEngineOilLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineEngineOilLevel(rctx, obj, fc.Args["agg"].(model.StringAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *string
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineEngineOilLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineEngineOilLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineEngineOilRelativeLevel(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineMAF(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineMAF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineMaf(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineMAF(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineMAF_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineSpeed(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineSpeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineSpeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineTPS(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineTPS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineTps(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineTPS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineTPS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainCombustionEngineTorque(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainCombustionEngineTorque(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainCombustionEngineTorque(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainCombustionEngineTorque(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainCombustionEngineTorque_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainFuelSystemAbsoluteLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainFuelSystemAbsoluteLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainFuelSystemAbsoluteLevel(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainFuelSystemAbsoluteLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainFuelSystemAbsoluteLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainFuelSystemRelativeLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainFuelSystemRelativeLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainFuelSystemRelativeLevel(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainFuelSystemRelativeLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainFuelSystemRelativeLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainFuelSystemSupportedFuelTypes(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainFuelSystemSupportedFuelTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainFuelSystemSupportedFuelTypes(rctx, obj, fc.Args["agg"].(model.StringAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *string
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainFuelSystemSupportedFuelTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainFuelSystemSupportedFuelTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainRange(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainRange(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainRange_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryChargingAddedEnergy(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryChargingAddedEnergy(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryChargingAddedEnergy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryChargingChargeCurrentAc(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryChargingChargeLimit(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryChargingChargeLimit(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeLimit_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryChargingChargeVoltageUnknownType(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryChargingIsCharging(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryChargingIsCharging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryChargingIsCharging(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryChargingIsCharging(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryChargingIsCharging_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryCurrentPower(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryCurrentPower(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryCurrentPower(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryCurrentPower(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryCurrentPower_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryCurrentVoltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryCurrentVoltage(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryCurrentVoltage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryGrossCapacity(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryGrossCapacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryGrossCapacity(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryGrossCapacity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryGrossCapacity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryRange(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryRange(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryRange_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryStateOfChargeCurrent(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryStateOfChargeCurrentEnergy(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTractionBatteryTemperatureAverage(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTractionBatteryTemperatureAverage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTractionBatteryTemperatureAverage(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTractionBatteryTemperatureAverage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTractionBatteryTemperatureAverage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTransmissionCurrentGear(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTransmissionCurrentGear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTransmissionCurrentGear(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTransmissionCurrentGear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTransmissionCurrentGear_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTransmissionTemperature(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTransmissionTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTransmissionTemperature(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTransmissionTemperature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTransmissionTemperature_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainTransmissionTravelledDistance(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainTransmissionTravelledDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainTransmissionTravelledDistance(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainTransmissionTravelledDistance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainTransmissionTravelledDistance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_powertrainType(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_powertrainType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().PowertrainType(rctx, obj, fc.Args["agg"].(model.StringAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *string
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *string
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_powertrainType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_powertrainType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_serviceDistanceToService(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_serviceDistanceToService(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().ServiceDistanceToService(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_serviceDistanceToService(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_serviceDistanceToService_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalAggregations_speed(ctx context.Context, field graphql.CollectedField, obj *model.SignalAggregations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalAggregations_speed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SignalAggregations().Speed(rctx, obj, fc.Args["agg"].(model.FloatAggregation))
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *float64
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}
		directive3 := func(ctx context.Context) (any, error) {
			if ec.directives.HasAggregation == nil {
				var zeroVal *float64
				return zeroVal, errors.New("directive hasAggregation is not implemented")
			}
			return ec.directives.HasAggregation(ctx, obj, directive2)
		}

		tmp, err := directive3(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*float64); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *float64`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalAggregations_speed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalAggregations",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_SignalAggregations_speed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_lastSeen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_lastSeen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastSeen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_lastSeen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_currentLocationApproximateLatitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_currentLocationApproximateLatitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CurrentLocationApproximateLatitude, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_APPROXIMATE_LOCATION", "VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresOneOfPrivilege == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresOneOfPrivilege is not implemented")
			}
			return ec.directives.RequiresOneOfPrivilege(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_currentLocationApproximateLatitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_currentLocationApproximateLongitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_currentLocationApproximateLongitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CurrentLocationApproximateLongitude, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_APPROXIMATE_LOCATION", "VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresOneOfPrivilege == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresOneOfPrivilege is not implemented")
			}
			return ec.directives.RequiresOneOfPrivilege(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_currentLocationApproximateLongitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_angularVelocityYaw(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_angularVelocityYaw(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.AngularVelocityYaw, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_angularVelocityYaw(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow1DriverSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow1DriverSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow1DriverSideIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow1DriverSideIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow1DriverSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow1DriverSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow1DriverSideWindowIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow1DriverSideWindowIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow1PassengerSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow1PassengerSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow1PassengerSideIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow1PassengerSideIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow1PassengerSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow1PassengerSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow1PassengerSideWindowIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow1PassengerSideWindowIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow2DriverSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow2DriverSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow2DriverSideIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow2DriverSideIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow2DriverSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow2DriverSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow2DriverSideWindowIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow2DriverSideWindowIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow2PassengerSideIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow2PassengerSideIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow2PassengerSideIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow2PassengerSideIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_cabinDoorRow2PassengerSideWindowIsOpen(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_cabinDoorRow2PassengerSideWindowIsOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CabinDoorRow2PassengerSideWindowIsOpen, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_cabinDoorRow2PassengerSideWindowIsOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_chassisAxleRow1WheelLeftSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_chassisAxleRow1WheelLeftSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ChassisAxleRow1WheelLeftSpeed, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_chassisAxleRow1WheelLeftSpeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_chassisAxleRow1WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_chassisAxleRow1WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ChassisAxleRow1WheelLeftTirePressure, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_chassisAxleRow1WheelLeftTirePressure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_chassisAxleRow1WheelRightSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_chassisAxleRow1WheelRightSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ChassisAxleRow1WheelRightSpeed, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_chassisAxleRow1WheelRightSpeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_chassisAxleRow1WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_chassisAxleRow1WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ChassisAxleRow1WheelRightTirePressure, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_chassisAxleRow1WheelRightTirePressure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_chassisAxleRow2WheelLeftTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_chassisAxleRow2WheelLeftTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ChassisAxleRow2WheelLeftTirePressure, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_chassisAxleRow2WheelLeftTirePressure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_chassisAxleRow2WheelRightTirePressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_chassisAxleRow2WheelRightTirePressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ChassisAxleRow2WheelRightTirePressure, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_chassisAxleRow2WheelRightTirePressure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_currentLocationAltitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_currentLocationAltitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CurrentLocationAltitude, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_currentLocationAltitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_currentLocationHeading(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_currentLocationHeading(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CurrentLocationHeading, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_currentLocationHeading(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_currentLocationIsRedacted(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_currentLocationIsRedacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CurrentLocationIsRedacted, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_currentLocationIsRedacted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_currentLocationLatitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_currentLocationLatitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CurrentLocationLatitude, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_currentLocationLatitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_currentLocationLongitude(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_currentLocationLongitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CurrentLocationLongitude, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_ALL_TIME_LOCATION"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_currentLocationLongitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_dimoAftermarketHDOP(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_dimoAftermarketHDOP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DIMOAftermarketHDOP, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_dimoAftermarketHDOP(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_dimoAftermarketNSAT(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_dimoAftermarketNSAT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DIMOAftermarketNSAT, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_dimoAftermarketNSAT(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_dimoAftermarketSSID(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_dimoAftermarketSSID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DIMOAftermarketSSID, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalString
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_dimoAftermarketSSID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_dimoAftermarketWPAState(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_dimoAftermarketWPAState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DIMOAftermarketWPAState, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalString
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_dimoAftermarketWPAState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_exteriorAirTemperature(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_exteriorAirTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ExteriorAirTemperature, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_exteriorAirTemperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_isIgnitionOn(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_isIgnitionOn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.IsIgnitionOn, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_isIgnitionOn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_lowVoltageBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_lowVoltageBatteryCurrentVoltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.LowVoltageBatteryCurrentVoltage, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_lowVoltageBatteryCurrentVoltage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdBarometricPressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdBarometricPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDBarometricPressure, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdBarometricPressure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdCommandedEGR(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdCommandedEGR(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDCommandedEGR, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdCommandedEGR(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdCommandedEVAP(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdCommandedEVAP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDCommandedEVAP, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdCommandedEVAP(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdDTCList(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdDTCList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDDTCList, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalString
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdDTCList(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdDistanceSinceDTCClear(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdDistanceSinceDTCClear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDDistanceSinceDTCClear, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdDistanceSinceDTCClear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdDistanceWithMIL(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdDistanceWithMIL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDDistanceWithMIL, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdDistanceWithMIL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdEngineLoad(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdEngineLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDEngineLoad, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdEngineLoad(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdFuelPressure(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdFuelPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDFuelPressure, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdFuelPressure(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdIntakeTemp(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdIntakeTemp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDIntakeTemp, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdIntakeTemp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdLongTermFuelTrim1(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdLongTermFuelTrim1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDLongTermFuelTrim1, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdLongTermFuelTrim1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdMAP(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdMAP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDMAP, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdMAP(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdO2WRSensor1Voltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdO2WRSensor1Voltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDO2WRSensor1Voltage, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdO2WRSensor1Voltage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdO2WRSensor2Voltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdO2WRSensor2Voltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDO2WRSensor2Voltage, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdO2WRSensor2Voltage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdRunTime(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdRunTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDRunTime, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdRunTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdShortTermFuelTrim1(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdShortTermFuelTrim1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDShortTermFuelTrim1, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdShortTermFuelTrim1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_obdWarmupsSinceDTCClear(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_obdWarmupsSinceDTCClear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.OBDWarmupsSinceDTCClear, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_obdWarmupsSinceDTCClear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineDieselExhaustFluidCapacity, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineDieselExhaustFluidCapacity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineDieselExhaustFluidLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineDieselExhaustFluidLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineDieselExhaustFluidLevel, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineDieselExhaustFluidLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineECT(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineECT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineECT, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineECT(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineEOP(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineEOP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineEOP, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineEOP(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineEOT(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineEOT(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineEOT, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineEOT(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineEngineOilLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineEngineOilLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineEngineOilLevel, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalString
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineEngineOilLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineEngineOilRelativeLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineEngineOilRelativeLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineEngineOilRelativeLevel, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineEngineOilRelativeLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineMAF(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineMAF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineMAF, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineMAF(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineSpeed(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineSpeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineSpeed, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineSpeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineTPS(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineTPS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineTPS, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineTPS(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainCombustionEngineTorque(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainCombustionEngineTorque(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainCombustionEngineTorque, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainCombustionEngineTorque(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainFuelSystemAbsoluteLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainFuelSystemAbsoluteLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainFuelSystemAbsoluteLevel, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainFuelSystemAbsoluteLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainFuelSystemRelativeLevel(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainFuelSystemRelativeLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainFuelSystemRelativeLevel, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainFuelSystemRelativeLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainFuelSystemSupportedFuelTypes(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainFuelSystemSupportedFuelTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainFuelSystemSupportedFuelTypes, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalString
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainFuelSystemSupportedFuelTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainRange(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainRange, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainRange(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryChargingAddedEnergy(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingAddedEnergy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryChargingAddedEnergy, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryChargingAddedEnergy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryChargingChargeCurrentAC(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeCurrentAC(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryChargingChargeCurrentAC, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeCurrentAC(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryChargingChargeLimit(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryChargingChargeLimit, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeLimit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryChargingChargeVoltageUnknownType, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryChargingChargeVoltageUnknownType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryChargingIsCharging(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryChargingIsCharging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryChargingIsCharging, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryChargingIsCharging(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryCurrentPower(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryCurrentPower(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryCurrentPower, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryCurrentPower(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryCurrentVoltage(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryCurrentVoltage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryCurrentVoltage, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryCurrentVoltage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryGrossCapacity(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryGrossCapacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryGrossCapacity, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryGrossCapacity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryRange(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryRange, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryRange(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryStateOfChargeCurrent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryStateOfChargeCurrent, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryStateOfChargeCurrent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryStateOfChargeCurrentEnergy, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryStateOfChargeCurrentEnergy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTractionBatteryTemperatureAverage(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTractionBatteryTemperatureAverage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTractionBatteryTemperatureAverage, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTractionBatteryTemperatureAverage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTransmissionCurrentGear(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTransmissionCurrentGear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTransmissionCurrentGear, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTransmissionCurrentGear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTransmissionTemperature(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTransmissionTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTransmissionTemperature, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTransmissionTemperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainTransmissionTravelledDistance(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainTransmissionTravelledDistance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainTransmissionTravelledDistance, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainTransmissionTravelledDistance(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_powertrainType(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_powertrainType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PowertrainType, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalString
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalString
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalString); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalString`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalString)
	fc.Result = res
	return ec.marshalOSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_powertrainType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalString_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_serviceDistanceToService(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_serviceDistanceToService(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ServiceDistanceToService, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_serviceDistanceToService(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalCollection_speed(ctx context.Context, field graphql.CollectedField, obj *model.SignalCollection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalCollection_speed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Speed, nil
		}

		directive1 := func(ctx context.Context) (any, error) {
			privileges, err := ec.unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx, []any{"VEHICLE_NON_LOCATION_DATA"})
			if err != nil {
				var zeroVal *model.SignalFloat
				return zeroVal, err
			}
			if ec.directives.RequiresAllOfPrivileges == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive requiresAllOfPrivileges is not implemented")
			}
			return ec.directives.RequiresAllOfPrivileges(ctx, obj, directive0, privileges)
		}
		directive2 := func(ctx context.Context) (any, error) {
			if ec.directives.IsSignal == nil {
				var zeroVal *model.SignalFloat
				return zeroVal, errors.New("directive isSignal is not implemented")
			}
			return ec.directives.IsSignal(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SignalFloat); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/DIMO-Network/telemetry-api/internal/graph/model.SignalFloat`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SignalFloat)
	fc.Result = res
	return ec.marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalCollection_speed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalCollection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_SignalFloat_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_SignalFloat_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignalFloat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalFloat_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.SignalFloat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalFloat_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalFloat_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalFloat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalFloat_value(ctx context.Context, field graphql.CollectedField, obj *model.SignalFloat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalFloat_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalFloat_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalFloat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalString_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.SignalString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalString_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalString_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SignalString_value(ctx context.Context, field graphql.CollectedField, obj *model.SignalString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SignalString_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SignalString_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SignalString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_vehicleTokenId(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_vehicleTokenId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleTokenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_vehicleTokenId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_vin(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_vin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_vin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_recordedBy(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_recordedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_recordedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_recordedAt(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_recordedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_recordedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_countryCode(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_countryCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_vehicleContractAddress(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_vehicleContractAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleContractAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_vehicleContractAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_validFrom(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_validFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_validFrom(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_validTo(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_validTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_validTo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VINVC_rawVC(ctx context.Context, field graphql.CollectedField, obj *model.Vinvc) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VINVC_rawVC(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawVc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VINVC_rawVC(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VINVC",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAftermarketDeviceBy(ctx context.Context, obj any) (model.AftermarketDeviceBy, error) {
	var it model.AftermarketDeviceBy
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"tokenId", "address", "serial"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "tokenId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tokenId"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TokenID = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOAddress2ᚖgithubᚗcomᚋethereumᚋgoᚑethereumᚋcommonᚐAddress(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "serial":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serial"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Serial = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAttestationFilter(ctx context.Context, obj any) (model.AttestationFilter, error) {
	var it model.AttestationFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"dataVersion", "producer", "effectiveAt", "expiresAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "dataVersion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataVersion"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DataVersion = data
		case "producer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("producer"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Producer = data
		case "effectiveAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("effectiveAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EffectiveAt = data
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignalFilter(ctx context.Context, obj any) (model.SignalFilter, error) {
	var it model.SignalFilter
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"source"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "source":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Source = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var attestationImplementors = []string{"Attestation"}

func (ec *executionContext) _Attestation(ctx context.Context, sel ast.SelectionSet, obj *model.Attestation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attestationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attestation")
		case "ID":
			out.Values[i] = ec._Attestation_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vehicleTokenId":
			out.Values[i] = ec._Attestation_vehicleTokenId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordedAt":
			out.Values[i] = ec._Attestation_recordedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attestation":
			out.Values[i] = ec._Attestation_attestation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Attestation_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Attestation_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dataVersion":
			out.Values[i] = ec._Attestation_dataVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "producer":
			out.Values[i] = ec._Attestation_producer(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceActivityImplementors = []string{"DeviceActivity"}

func (ec *executionContext) _DeviceActivity(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceActivity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceActivityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceActivity")
		case "lastActive":
			out.Values[i] = ec._DeviceActivity_lastActive(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pOMVCImplementors = []string{"POMVC"}

func (ec *executionContext) _POMVC(ctx context.Context, sel ast.SelectionSet, obj *model.Pomvc) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pOMVCImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("POMVC")
		case "vehicleTokenId":
			out.Values[i] = ec._POMVC_vehicleTokenId(ctx, field, obj)
		case "recordedBy":
			out.Values[i] = ec._POMVC_recordedBy(ctx, field, obj)
		case "vehicleContractAddress":
			out.Values[i] = ec._POMVC_vehicleContractAddress(ctx, field, obj)
		case "validFrom":
			out.Values[i] = ec._POMVC_validFrom(ctx, field, obj)
		case "rawVC":
			out.Values[i] = ec._POMVC_rawVC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "signals":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_signals(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "signalsLatest":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_signalsLatest(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "availableSignals":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_availableSignals(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "attestations":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_attestations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deviceActivity":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deviceActivity(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vinVCLatest":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vinVCLatest(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pomVCLatest":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pomVCLatest(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signalAggregationsImplementors = []string{"SignalAggregations"}

func (ec *executionContext) _SignalAggregations(ctx context.Context, sel ast.SelectionSet, obj *model.SignalAggregations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signalAggregationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignalAggregations")
		case "timestamp":
			out.Values[i] = ec._SignalAggregations_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currentLocationApproximateLatitude":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_currentLocationApproximateLatitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentLocationApproximateLongitude":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_currentLocationApproximateLongitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "angularVelocityYaw":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_angularVelocityYaw(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow1DriverSideIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow1DriverSideIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow1DriverSideWindowIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow1DriverSideWindowIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow1PassengerSideIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow1PassengerSideIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow1PassengerSideWindowIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow1PassengerSideWindowIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow2DriverSideIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow2DriverSideIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow2DriverSideWindowIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow2DriverSideWindowIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow2PassengerSideIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow2PassengerSideIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "cabinDoorRow2PassengerSideWindowIsOpen":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_cabinDoorRow2PassengerSideWindowIsOpen(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "chassisAxleRow1WheelLeftSpeed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_chassisAxleRow1WheelLeftSpeed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "chassisAxleRow1WheelLeftTirePressure":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_chassisAxleRow1WheelLeftTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "chassisAxleRow1WheelRightSpeed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_chassisAxleRow1WheelRightSpeed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "chassisAxleRow1WheelRightTirePressure":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_chassisAxleRow1WheelRightTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "chassisAxleRow2WheelLeftTirePressure":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_chassisAxleRow2WheelLeftTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "chassisAxleRow2WheelRightTirePressure":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_chassisAxleRow2WheelRightTirePressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentLocationAltitude":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_currentLocationAltitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentLocationHeading":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_currentLocationHeading(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentLocationIsRedacted":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_currentLocationIsRedacted(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentLocationLatitude":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_currentLocationLatitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentLocationLongitude":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_currentLocationLongitude(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dimoAftermarketHDOP":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_dimoAftermarketHDOP(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dimoAftermarketNSAT":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_dimoAftermarketNSAT(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dimoAftermarketSSID":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_dimoAftermarketSSID(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dimoAftermarketWPAState":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_dimoAftermarketWPAState(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "exteriorAirTemperature":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_exteriorAirTemperature(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isIgnitionOn":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_isIgnitionOn(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lowVoltageBatteryCurrentVoltage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_lowVoltageBatteryCurrentVoltage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdBarometricPressure":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdBarometricPressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdCommandedEGR":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdCommandedEGR(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdCommandedEVAP":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdCommandedEVAP(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdDTCList":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdDTCList(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdDistanceSinceDTCClear":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdDistanceSinceDTCClear(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdDistanceWithMIL":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdDistanceWithMIL(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdEngineLoad":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdEngineLoad(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdFuelPressure":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdFuelPressure(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdIntakeTemp":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdIntakeTemp(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdLongTermFuelTrim1":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdLongTermFuelTrim1(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdMAP":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdMAP(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdO2WRSensor1Voltage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdO2WRSensor1Voltage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdO2WRSensor2Voltage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdO2WRSensor2Voltage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdRunTime":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdRunTime(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdShortTermFuelTrim1":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdShortTermFuelTrim1(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "obdWarmupsSinceDTCClear":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_obdWarmupsSinceDTCClear(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineDieselExhaustFluidCapacity":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineDieselExhaustFluidLevel":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineDieselExhaustFluidLevel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineECT":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineECT(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineEOP":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineEOP(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineEOT":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineEOT(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineEngineOilLevel":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineEngineOilLevel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineEngineOilRelativeLevel":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineEngineOilRelativeLevel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineMAF":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineMAF(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineSpeed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineSpeed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineTPS":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineTPS(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainCombustionEngineTorque":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainCombustionEngineTorque(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainFuelSystemAbsoluteLevel":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainFuelSystemAbsoluteLevel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainFuelSystemRelativeLevel":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainFuelSystemRelativeLevel(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainFuelSystemSupportedFuelTypes":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainFuelSystemSupportedFuelTypes(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainRange":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainRange(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryChargingAddedEnergy":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryChargingAddedEnergy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryChargingChargeCurrentAC":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryChargingChargeCurrentAC(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryChargingChargeLimit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryChargingChargeLimit(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryChargingChargeVoltageUnknownType":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryChargingIsCharging":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryChargingIsCharging(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryCurrentPower":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryCurrentPower(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryCurrentVoltage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryCurrentVoltage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryGrossCapacity":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryGrossCapacity(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryRange":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryRange(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryStateOfChargeCurrent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryStateOfChargeCurrent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryStateOfChargeCurrentEnergy":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTractionBatteryTemperatureAverage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTractionBatteryTemperatureAverage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTransmissionCurrentGear":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTransmissionCurrentGear(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTransmissionTemperature":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTransmissionTemperature(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainTransmissionTravelledDistance":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainTransmissionTravelledDistance(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "powertrainType":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_powertrainType(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "serviceDistanceToService":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_serviceDistanceToService(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "speed":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SignalAggregations_speed(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signalCollectionImplementors = []string{"SignalCollection"}

func (ec *executionContext) _SignalCollection(ctx context.Context, sel ast.SelectionSet, obj *model.SignalCollection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signalCollectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignalCollection")
		case "lastSeen":
			out.Values[i] = ec._SignalCollection_lastSeen(ctx, field, obj)
		case "currentLocationApproximateLatitude":
			out.Values[i] = ec._SignalCollection_currentLocationApproximateLatitude(ctx, field, obj)
		case "currentLocationApproximateLongitude":
			out.Values[i] = ec._SignalCollection_currentLocationApproximateLongitude(ctx, field, obj)
		case "angularVelocityYaw":
			out.Values[i] = ec._SignalCollection_angularVelocityYaw(ctx, field, obj)
		case "cabinDoorRow1DriverSideIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow1DriverSideIsOpen(ctx, field, obj)
		case "cabinDoorRow1DriverSideWindowIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow1DriverSideWindowIsOpen(ctx, field, obj)
		case "cabinDoorRow1PassengerSideIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow1PassengerSideIsOpen(ctx, field, obj)
		case "cabinDoorRow1PassengerSideWindowIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow1PassengerSideWindowIsOpen(ctx, field, obj)
		case "cabinDoorRow2DriverSideIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow2DriverSideIsOpen(ctx, field, obj)
		case "cabinDoorRow2DriverSideWindowIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow2DriverSideWindowIsOpen(ctx, field, obj)
		case "cabinDoorRow2PassengerSideIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow2PassengerSideIsOpen(ctx, field, obj)
		case "cabinDoorRow2PassengerSideWindowIsOpen":
			out.Values[i] = ec._SignalCollection_cabinDoorRow2PassengerSideWindowIsOpen(ctx, field, obj)
		case "chassisAxleRow1WheelLeftSpeed":
			out.Values[i] = ec._SignalCollection_chassisAxleRow1WheelLeftSpeed(ctx, field, obj)
		case "chassisAxleRow1WheelLeftTirePressure":
			out.Values[i] = ec._SignalCollection_chassisAxleRow1WheelLeftTirePressure(ctx, field, obj)
		case "chassisAxleRow1WheelRightSpeed":
			out.Values[i] = ec._SignalCollection_chassisAxleRow1WheelRightSpeed(ctx, field, obj)
		case "chassisAxleRow1WheelRightTirePressure":
			out.Values[i] = ec._SignalCollection_chassisAxleRow1WheelRightTirePressure(ctx, field, obj)
		case "chassisAxleRow2WheelLeftTirePressure":
			out.Values[i] = ec._SignalCollection_chassisAxleRow2WheelLeftTirePressure(ctx, field, obj)
		case "chassisAxleRow2WheelRightTirePressure":
			out.Values[i] = ec._SignalCollection_chassisAxleRow2WheelRightTirePressure(ctx, field, obj)
		case "currentLocationAltitude":
			out.Values[i] = ec._SignalCollection_currentLocationAltitude(ctx, field, obj)
		case "currentLocationHeading":
			out.Values[i] = ec._SignalCollection_currentLocationHeading(ctx, field, obj)
		case "currentLocationIsRedacted":
			out.Values[i] = ec._SignalCollection_currentLocationIsRedacted(ctx, field, obj)
		case "currentLocationLatitude":
			out.Values[i] = ec._SignalCollection_currentLocationLatitude(ctx, field, obj)
		case "currentLocationLongitude":
			out.Values[i] = ec._SignalCollection_currentLocationLongitude(ctx, field, obj)
		case "dimoAftermarketHDOP":
			out.Values[i] = ec._SignalCollection_dimoAftermarketHDOP(ctx, field, obj)
		case "dimoAftermarketNSAT":
			out.Values[i] = ec._SignalCollection_dimoAftermarketNSAT(ctx, field, obj)
		case "dimoAftermarketSSID":
			out.Values[i] = ec._SignalCollection_dimoAftermarketSSID(ctx, field, obj)
		case "dimoAftermarketWPAState":
			out.Values[i] = ec._SignalCollection_dimoAftermarketWPAState(ctx, field, obj)
		case "exteriorAirTemperature":
			out.Values[i] = ec._SignalCollection_exteriorAirTemperature(ctx, field, obj)
		case "isIgnitionOn":
			out.Values[i] = ec._SignalCollection_isIgnitionOn(ctx, field, obj)
		case "lowVoltageBatteryCurrentVoltage":
			out.Values[i] = ec._SignalCollection_lowVoltageBatteryCurrentVoltage(ctx, field, obj)
		case "obdBarometricPressure":
			out.Values[i] = ec._SignalCollection_obdBarometricPressure(ctx, field, obj)
		case "obdCommandedEGR":
			out.Values[i] = ec._SignalCollection_obdCommandedEGR(ctx, field, obj)
		case "obdCommandedEVAP":
			out.Values[i] = ec._SignalCollection_obdCommandedEVAP(ctx, field, obj)
		case "obdDTCList":
			out.Values[i] = ec._SignalCollection_obdDTCList(ctx, field, obj)
		case "obdDistanceSinceDTCClear":
			out.Values[i] = ec._SignalCollection_obdDistanceSinceDTCClear(ctx, field, obj)
		case "obdDistanceWithMIL":
			out.Values[i] = ec._SignalCollection_obdDistanceWithMIL(ctx, field, obj)
		case "obdEngineLoad":
			out.Values[i] = ec._SignalCollection_obdEngineLoad(ctx, field, obj)
		case "obdFuelPressure":
			out.Values[i] = ec._SignalCollection_obdFuelPressure(ctx, field, obj)
		case "obdIntakeTemp":
			out.Values[i] = ec._SignalCollection_obdIntakeTemp(ctx, field, obj)
		case "obdLongTermFuelTrim1":
			out.Values[i] = ec._SignalCollection_obdLongTermFuelTrim1(ctx, field, obj)
		case "obdMAP":
			out.Values[i] = ec._SignalCollection_obdMAP(ctx, field, obj)
		case "obdO2WRSensor1Voltage":
			out.Values[i] = ec._SignalCollection_obdO2WRSensor1Voltage(ctx, field, obj)
		case "obdO2WRSensor2Voltage":
			out.Values[i] = ec._SignalCollection_obdO2WRSensor2Voltage(ctx, field, obj)
		case "obdRunTime":
			out.Values[i] = ec._SignalCollection_obdRunTime(ctx, field, obj)
		case "obdShortTermFuelTrim1":
			out.Values[i] = ec._SignalCollection_obdShortTermFuelTrim1(ctx, field, obj)
		case "obdWarmupsSinceDTCClear":
			out.Values[i] = ec._SignalCollection_obdWarmupsSinceDTCClear(ctx, field, obj)
		case "powertrainCombustionEngineDieselExhaustFluidCapacity":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineDieselExhaustFluidCapacity(ctx, field, obj)
		case "powertrainCombustionEngineDieselExhaustFluidLevel":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineDieselExhaustFluidLevel(ctx, field, obj)
		case "powertrainCombustionEngineECT":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineECT(ctx, field, obj)
		case "powertrainCombustionEngineEOP":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineEOP(ctx, field, obj)
		case "powertrainCombustionEngineEOT":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineEOT(ctx, field, obj)
		case "powertrainCombustionEngineEngineOilLevel":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineEngineOilLevel(ctx, field, obj)
		case "powertrainCombustionEngineEngineOilRelativeLevel":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineEngineOilRelativeLevel(ctx, field, obj)
		case "powertrainCombustionEngineMAF":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineMAF(ctx, field, obj)
		case "powertrainCombustionEngineSpeed":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineSpeed(ctx, field, obj)
		case "powertrainCombustionEngineTPS":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineTPS(ctx, field, obj)
		case "powertrainCombustionEngineTorque":
			out.Values[i] = ec._SignalCollection_powertrainCombustionEngineTorque(ctx, field, obj)
		case "powertrainFuelSystemAbsoluteLevel":
			out.Values[i] = ec._SignalCollection_powertrainFuelSystemAbsoluteLevel(ctx, field, obj)
		case "powertrainFuelSystemRelativeLevel":
			out.Values[i] = ec._SignalCollection_powertrainFuelSystemRelativeLevel(ctx, field, obj)
		case "powertrainFuelSystemSupportedFuelTypes":
			out.Values[i] = ec._SignalCollection_powertrainFuelSystemSupportedFuelTypes(ctx, field, obj)
		case "powertrainRange":
			out.Values[i] = ec._SignalCollection_powertrainRange(ctx, field, obj)
		case "powertrainTractionBatteryChargingAddedEnergy":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryChargingAddedEnergy(ctx, field, obj)
		case "powertrainTractionBatteryChargingChargeCurrentAC":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryChargingChargeCurrentAC(ctx, field, obj)
		case "powertrainTractionBatteryChargingChargeLimit":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryChargingChargeLimit(ctx, field, obj)
		case "powertrainTractionBatteryChargingChargeVoltageUnknownType":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryChargingChargeVoltageUnknownType(ctx, field, obj)
		case "powertrainTractionBatteryChargingIsCharging":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryChargingIsCharging(ctx, field, obj)
		case "powertrainTractionBatteryCurrentPower":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryCurrentPower(ctx, field, obj)
		case "powertrainTractionBatteryCurrentVoltage":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryCurrentVoltage(ctx, field, obj)
		case "powertrainTractionBatteryGrossCapacity":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryGrossCapacity(ctx, field, obj)
		case "powertrainTractionBatteryRange":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryRange(ctx, field, obj)
		case "powertrainTractionBatteryStateOfChargeCurrent":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryStateOfChargeCurrent(ctx, field, obj)
		case "powertrainTractionBatteryStateOfChargeCurrentEnergy":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryStateOfChargeCurrentEnergy(ctx, field, obj)
		case "powertrainTractionBatteryTemperatureAverage":
			out.Values[i] = ec._SignalCollection_powertrainTractionBatteryTemperatureAverage(ctx, field, obj)
		case "powertrainTransmissionCurrentGear":
			out.Values[i] = ec._SignalCollection_powertrainTransmissionCurrentGear(ctx, field, obj)
		case "powertrainTransmissionTemperature":
			out.Values[i] = ec._SignalCollection_powertrainTransmissionTemperature(ctx, field, obj)
		case "powertrainTransmissionTravelledDistance":
			out.Values[i] = ec._SignalCollection_powertrainTransmissionTravelledDistance(ctx, field, obj)
		case "powertrainType":
			out.Values[i] = ec._SignalCollection_powertrainType(ctx, field, obj)
		case "serviceDistanceToService":
			out.Values[i] = ec._SignalCollection_serviceDistanceToService(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._SignalCollection_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signalFloatImplementors = []string{"SignalFloat"}

func (ec *executionContext) _SignalFloat(ctx context.Context, sel ast.SelectionSet, obj *model.SignalFloat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signalFloatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignalFloat")
		case "timestamp":
			out.Values[i] = ec._SignalFloat_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._SignalFloat_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var signalStringImplementors = []string{"SignalString"}

func (ec *executionContext) _SignalString(ctx context.Context, sel ast.SelectionSet, obj *model.SignalString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signalStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignalString")
		case "timestamp":
			out.Values[i] = ec._SignalString_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._SignalString_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vINVCImplementors = []string{"VINVC"}

func (ec *executionContext) _VINVC(ctx context.Context, sel ast.SelectionSet, obj *model.Vinvc) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vINVCImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VINVC")
		case "vehicleTokenId":
			out.Values[i] = ec._VINVC_vehicleTokenId(ctx, field, obj)
		case "vin":
			out.Values[i] = ec._VINVC_vin(ctx, field, obj)
		case "recordedBy":
			out.Values[i] = ec._VINVC_recordedBy(ctx, field, obj)
		case "recordedAt":
			out.Values[i] = ec._VINVC_recordedAt(ctx, field, obj)
		case "countryCode":
			out.Values[i] = ec._VINVC_countryCode(ctx, field, obj)
		case "vehicleContractAddress":
			out.Values[i] = ec._VINVC_vehicleContractAddress(ctx, field, obj)
		case "validFrom":
			out.Values[i] = ec._VINVC_validFrom(ctx, field, obj)
		case "validTo":
			out.Values[i] = ec._VINVC_validTo(ctx, field, obj)
		case "rawVC":
			out.Values[i] = ec._VINVC_rawVC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAddress2githubᚗcomᚋethereumᚋgoᚑethereumᚋcommonᚐAddress(ctx context.Context, v any) (common.Address, error) {
	res, err := model.UnmarshalAddress(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAddress2githubᚗcomᚋethereumᚋgoᚑethereumᚋcommonᚐAddress(ctx context.Context, sel ast.SelectionSet, v common.Address) graphql.Marshaler {
	res := model.MarshalAddress(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAftermarketDeviceBy2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAftermarketDeviceBy(ctx context.Context, v any) (model.AftermarketDeviceBy, error) {
	res, err := ec.unmarshalInputAftermarketDeviceBy(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx context.Context, v any) (model.FloatAggregation, error) {
	var res model.FloatAggregation
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloatAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐFloatAggregation(ctx context.Context, sel ast.SelectionSet, v model.FloatAggregation) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx context.Context, v any) (model.Privilege, error) {
	var res model.Privilege
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx context.Context, sel ast.SelectionSet, v model.Privilege) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx context.Context, v any) ([]model.Privilege, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.Privilege, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPrivilege2ᚕgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilegeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Privilege) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPrivilege2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPrivilege(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSignalAggregations2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalAggregations(ctx context.Context, sel ast.SelectionSet, v *model.SignalAggregations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SignalAggregations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx context.Context, v any) (model.StringAggregation, error) {
	var res model.StringAggregation
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStringAggregation2githubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐStringAggregation(ctx context.Context, sel ast.SelectionSet, v model.StringAggregation) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAddress2ᚖgithubᚗcomᚋethereumᚋgoᚑethereumᚋcommonᚐAddress(ctx context.Context, v any) (*common.Address, error) {
	if v == nil {
		return nil, nil
	}
	res, err := model.UnmarshalAddress(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddress2ᚖgithubᚗcomᚋethereumᚋgoᚑethereumᚋcommonᚐAddress(ctx context.Context, sel ast.SelectionSet, v *common.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := model.MarshalAddress(*v)
	return res
}

func (ec *executionContext) marshalOAttestation2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAttestation(ctx context.Context, sel ast.SelectionSet, v []*model.Attestation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAttestation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAttestation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAttestation2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAttestation(ctx context.Context, sel ast.SelectionSet, v *model.Attestation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Attestation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAttestationFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐAttestationFilter(ctx context.Context, v any) (*model.AttestationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAttestationFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalODeviceActivity2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐDeviceActivity(ctx context.Context, sel ast.SelectionSet, v *model.DeviceActivity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceActivity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOPOMVC2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐPomvc(ctx context.Context, sel ast.SelectionSet, v *model.Pomvc) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._POMVC(ctx, sel, v)
}

func (ec *executionContext) marshalOSignalAggregations2ᚕᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalAggregationsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SignalAggregations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSignalAggregations2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalAggregations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSignalCollection2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalCollection(ctx context.Context, sel ast.SelectionSet, v *model.SignalCollection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SignalCollection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSignalFilter2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFilter(ctx context.Context, v any) (*model.SignalFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSignalFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSignalFloat2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalFloat(ctx context.Context, sel ast.SelectionSet, v *model.SignalFloat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SignalFloat(ctx, sel, v)
}

func (ec *executionContext) marshalOSignalString2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐSignalString(ctx context.Context, sel ast.SelectionSet, v *model.SignalString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SignalString(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOVINVC2ᚖgithubᚗcomᚋDIMOᚑNetworkᚋtelemetryᚑapiᚋinternalᚋgraphᚋmodelᚐVinvc(ctx context.Context, sel ast.SelectionSet, v *model.Vinvc) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VINVC(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
