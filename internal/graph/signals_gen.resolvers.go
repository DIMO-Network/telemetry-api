package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
)

// ChassisAxleRow1WheelLeftTirePressure is the resolver for the chassisAxleRow1WheelLeftTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	x, ok := obj.NumberValues[model.AliasKey{"chassisAxleRow1WheelLeftTirePressure", agg.String()}]
	if !ok {
		return nil, nil
	}
	return &x, nil
}

// ChassisAxleRow1WheelRightTirePressure is the resolver for the chassisAxleRow1WheelRightTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ChassisAxleRow1WheelRightTirePressure - chassisAxleRow1WheelRightTirePressure"))
}

// ChassisAxleRow2WheelLeftTirePressure is the resolver for the chassisAxleRow2WheelLeftTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ChassisAxleRow2WheelLeftTirePressure - chassisAxleRow2WheelLeftTirePressure"))
}

// ChassisAxleRow2WheelRightTirePressure is the resolver for the chassisAxleRow2WheelRightTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ChassisAxleRow2WheelRightTirePressure - chassisAxleRow2WheelRightTirePressure"))
}

// CurrentLocationAltitude is the resolver for the currentLocationAltitude field.
func (r *signalAggregationsResolver) CurrentLocationAltitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: CurrentLocationAltitude - currentLocationAltitude"))
}

// CurrentLocationLatitude is the resolver for the currentLocationLatitude field.
func (r *signalAggregationsResolver) CurrentLocationLatitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: CurrentLocationLatitude - currentLocationLatitude"))
}

// CurrentLocationLongitude is the resolver for the currentLocationLongitude field.
func (r *signalAggregationsResolver) CurrentLocationLongitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: CurrentLocationLongitude - currentLocationLongitude"))
}

// CurrentLocationTimestamp is the resolver for the currentLocationTimestamp field.
func (r *signalAggregationsResolver) CurrentLocationTimestamp(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: CurrentLocationTimestamp - currentLocationTimestamp"))
}

// DimoAftermarketHdop is the resolver for the dimoAftermarketHDOP field.
func (r *signalAggregationsResolver) DimoAftermarketHdop(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: DimoAftermarketHdop - dimoAftermarketHDOP"))
}

// DimoAftermarketNsat is the resolver for the dimoAftermarketNSAT field.
func (r *signalAggregationsResolver) DimoAftermarketNsat(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: DimoAftermarketNsat - dimoAftermarketNSAT"))
}

// DimoAftermarketSsid is the resolver for the dimoAftermarketSSID field.
func (r *signalAggregationsResolver) DimoAftermarketSsid(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: DimoAftermarketSsid - dimoAftermarketSSID"))
}

// DimoAftermarketWPAState is the resolver for the dimoAftermarketWPAState field.
func (r *signalAggregationsResolver) DimoAftermarketWPAState(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: DimoAftermarketWPAState - dimoAftermarketWPAState"))
}

// DimoIsLocationRedacted is the resolver for the dimoIsLocationRedacted field.
func (r *signalAggregationsResolver) DimoIsLocationRedacted(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: DimoIsLocationRedacted - dimoIsLocationRedacted"))
}

// ExteriorAirTemperature is the resolver for the exteriorAirTemperature field.
func (r *signalAggregationsResolver) ExteriorAirTemperature(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ExteriorAirTemperature - exteriorAirTemperature"))
}

// LowVoltageBatteryCurrentVoltage is the resolver for the lowVoltageBatteryCurrentVoltage field.
func (r *signalAggregationsResolver) LowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: LowVoltageBatteryCurrentVoltage - lowVoltageBatteryCurrentVoltage"))
}

// ObdBarometricPressure is the resolver for the obdBarometricPressure field.
func (r *signalAggregationsResolver) ObdBarometricPressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ObdBarometricPressure - obdBarometricPressure"))
}

// ObdEngineLoad is the resolver for the obdEngineLoad field.
func (r *signalAggregationsResolver) ObdEngineLoad(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ObdEngineLoad - obdEngineLoad"))
}

// ObdIntakeTemp is the resolver for the obdIntakeTemp field.
func (r *signalAggregationsResolver) ObdIntakeTemp(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ObdIntakeTemp - obdIntakeTemp"))
}

// ObdRunTime is the resolver for the obdRunTime field.
func (r *signalAggregationsResolver) ObdRunTime(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: ObdRunTime - obdRunTime"))
}

// PowertrainCombustionEngineEct is the resolver for the powertrainCombustionEngineECT field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainCombustionEngineEct - powertrainCombustionEngineECT"))
}

// PowertrainCombustionEngineEngineOilLevel is the resolver for the powertrainCombustionEngineEngineOilLevel field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: PowertrainCombustionEngineEngineOilLevel - powertrainCombustionEngineEngineOilLevel"))
}

// PowertrainCombustionEngineMaf is the resolver for the powertrainCombustionEngineMAF field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineMaf(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainCombustionEngineMaf - powertrainCombustionEngineMAF"))
}

// PowertrainCombustionEngineSpeed is the resolver for the powertrainCombustionEngineSpeed field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainCombustionEngineSpeed - powertrainCombustionEngineSpeed"))
}

// PowertrainCombustionEngineTps is the resolver for the powertrainCombustionEngineTPS field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainCombustionEngineTps - powertrainCombustionEngineTPS"))
}

// PowertrainFuelSystemAbsoluteLevel is the resolver for the powertrainFuelSystemAbsoluteLevel field.
func (r *signalAggregationsResolver) PowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainFuelSystemAbsoluteLevel - powertrainFuelSystemAbsoluteLevel"))
}

// PowertrainFuelSystemSupportedFuelTypes is the resolver for the powertrainFuelSystemSupportedFuelTypes field.
func (r *signalAggregationsResolver) PowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: PowertrainFuelSystemSupportedFuelTypes - powertrainFuelSystemSupportedFuelTypes"))
}

// PowertrainRange is the resolver for the powertrainRange field.
func (r *signalAggregationsResolver) PowertrainRange(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainRange - powertrainRange"))
}

// PowertrainTractionBatteryChargingChargeLimit is the resolver for the powertrainTractionBatteryChargingChargeLimit field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainTractionBatteryChargingChargeLimit - powertrainTractionBatteryChargingChargeLimit"))
}

// PowertrainTractionBatteryChargingIsCharging is the resolver for the powertrainTractionBatteryChargingIsCharging field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainTractionBatteryChargingIsCharging - powertrainTractionBatteryChargingIsCharging"))
}

// PowertrainTractionBatteryCurrentPower is the resolver for the powertrainTractionBatteryCurrentPower field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryCurrentPower(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainTractionBatteryCurrentPower - powertrainTractionBatteryCurrentPower"))
}

// PowertrainTractionBatteryGrossCapacity is the resolver for the powertrainTractionBatteryGrossCapacity field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainTractionBatteryGrossCapacity - powertrainTractionBatteryGrossCapacity"))
}

// PowertrainTractionBatteryStateOfChargeCurrent is the resolver for the powertrainTractionBatteryStateOfChargeCurrent field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainTractionBatteryStateOfChargeCurrent - powertrainTractionBatteryStateOfChargeCurrent"))
}

// PowertrainTransmissionTravelledDistance is the resolver for the powertrainTransmissionTravelledDistance field.
func (r *signalAggregationsResolver) PowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: PowertrainTransmissionTravelledDistance - powertrainTransmissionTravelledDistance"))
}

// PowertrainType is the resolver for the powertrainType field.
func (r *signalAggregationsResolver) PowertrainType(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: PowertrainType - powertrainType"))
}

// Speed is the resolver for the speed field.
func (r *signalAggregationsResolver) Speed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: Speed - speed"))
}

// VehicleIdentificationBrand is the resolver for the vehicleIdentificationBrand field.
func (r *signalAggregationsResolver) VehicleIdentificationBrand(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: VehicleIdentificationBrand - vehicleIdentificationBrand"))
}

// VehicleIdentificationModel is the resolver for the vehicleIdentificationModel field.
func (r *signalAggregationsResolver) VehicleIdentificationModel(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	panic(fmt.Errorf("not implemented: VehicleIdentificationModel - vehicleIdentificationModel"))
}

// VehicleIdentificationYear is the resolver for the vehicleIdentificationYear field.
func (r *signalAggregationsResolver) VehicleIdentificationYear(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	panic(fmt.Errorf("not implemented: VehicleIdentificationYear - vehicleIdentificationYear"))
}
