// Code generated  with `make gql-model` DO NOT EDIT.
package graph

import (
	"context"
	"fmt"

	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
)

{{ range .Signals }}
// {{ GQLGenResolverName .JSONName }} is the resolver for the {{ .JSONName }}
{{- if eq .GQLType "Float" }}
func (r *signalAggregationsResolver) {{ GQLGenResolverName .JSONName }}(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
    vn, ok := obj.ValueNumbers[obj.SignalArgs.AliasToHandle[fieldCtx.Field.Alias]]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}
{{ else }}
func (r *signalAggregationsResolver) {{ GQLGenResolverName .JSONName }}(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
    vs, ok := obj.ValueStrings[obj.SignalArgs.AliasToHandle[fieldCtx.Field.Alias]]
	if !ok {
		return nil, nil
	}
	return &vs, nil
}
{{ end }}
{{ end }}
