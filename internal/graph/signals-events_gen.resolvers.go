package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.79

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
)

// AngularVelocityYaw is the resolver for the angularVelocityYaw
func (r *signalAggregationsResolver) AngularVelocityYaw(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow1DriverSideIsOpen is the resolver for the cabinDoorRow1DriverSideIsOpen
func (r *signalAggregationsResolver) CabinDoorRow1DriverSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow1DriverSideWindowIsOpen is the resolver for the cabinDoorRow1DriverSideWindowIsOpen
func (r *signalAggregationsResolver) CabinDoorRow1DriverSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow1PassengerSideIsOpen is the resolver for the cabinDoorRow1PassengerSideIsOpen
func (r *signalAggregationsResolver) CabinDoorRow1PassengerSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow1PassengerSideWindowIsOpen is the resolver for the cabinDoorRow1PassengerSideWindowIsOpen
func (r *signalAggregationsResolver) CabinDoorRow1PassengerSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow2DriverSideIsOpen is the resolver for the cabinDoorRow2DriverSideIsOpen
func (r *signalAggregationsResolver) CabinDoorRow2DriverSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow2DriverSideWindowIsOpen is the resolver for the cabinDoorRow2DriverSideWindowIsOpen
func (r *signalAggregationsResolver) CabinDoorRow2DriverSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow2PassengerSideIsOpen is the resolver for the cabinDoorRow2PassengerSideIsOpen
func (r *signalAggregationsResolver) CabinDoorRow2PassengerSideIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CabinDoorRow2PassengerSideWindowIsOpen is the resolver for the cabinDoorRow2PassengerSideWindowIsOpen
func (r *signalAggregationsResolver) CabinDoorRow2PassengerSideWindowIsOpen(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ChassisAxleRow1WheelLeftSpeed is the resolver for the chassisAxleRow1WheelLeftSpeed
func (r *signalAggregationsResolver) ChassisAxleRow1WheelLeftSpeed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ChassisAxleRow1WheelLeftTirePressure is the resolver for the chassisAxleRow1WheelLeftTirePressure
func (r *signalAggregationsResolver) ChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ChassisAxleRow1WheelRightSpeed is the resolver for the chassisAxleRow1WheelRightSpeed
func (r *signalAggregationsResolver) ChassisAxleRow1WheelRightSpeed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ChassisAxleRow1WheelRightTirePressure is the resolver for the chassisAxleRow1WheelRightTirePressure
func (r *signalAggregationsResolver) ChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ChassisAxleRow2WheelLeftTirePressure is the resolver for the chassisAxleRow2WheelLeftTirePressure
func (r *signalAggregationsResolver) ChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ChassisAxleRow2WheelRightTirePressure is the resolver for the chassisAxleRow2WheelRightTirePressure
func (r *signalAggregationsResolver) ChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CurrentLocationAltitude is the resolver for the currentLocationAltitude
func (r *signalAggregationsResolver) CurrentLocationAltitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CurrentLocationCoordinates is the resolver for the currentLocationCoordinates
func (r *signalAggregationsResolver) CurrentLocationCoordinates(ctx context.Context, obj *model.SignalAggregations, agg model.LocationAggregation, filter *model.SignalLocationFilter) (*model.Location, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vl, ok := obj.ValueLocations[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &model.Location{Latitude: vl.Latitude, Longitude: vl.Longitude, Hdop: vl.HDOP}, nil
}

// CurrentLocationHeading is the resolver for the currentLocationHeading
func (r *signalAggregationsResolver) CurrentLocationHeading(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CurrentLocationIsRedacted is the resolver for the currentLocationIsRedacted
func (r *signalAggregationsResolver) CurrentLocationIsRedacted(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CurrentLocationLatitude is the resolver for the currentLocationLatitude
func (r *signalAggregationsResolver) CurrentLocationLatitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// CurrentLocationLongitude is the resolver for the currentLocationLongitude
func (r *signalAggregationsResolver) CurrentLocationLongitude(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// DimoAftermarketHdop is the resolver for the dimoAftermarketHDOP
func (r *signalAggregationsResolver) DimoAftermarketHdop(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// DimoAftermarketNsat is the resolver for the dimoAftermarketNSAT
func (r *signalAggregationsResolver) DimoAftermarketNsat(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// DimoAftermarketSsid is the resolver for the dimoAftermarketSSID
func (r *signalAggregationsResolver) DimoAftermarketSsid(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vs, ok := obj.ValueStrings[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vs, nil
}

// DimoAftermarketWPAState is the resolver for the dimoAftermarketWPAState
func (r *signalAggregationsResolver) DimoAftermarketWPAState(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vs, ok := obj.ValueStrings[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vs, nil
}

// ExteriorAirTemperature is the resolver for the exteriorAirTemperature
func (r *signalAggregationsResolver) ExteriorAirTemperature(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// IsIgnitionOn is the resolver for the isIgnitionOn
func (r *signalAggregationsResolver) IsIgnitionOn(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// LowVoltageBatteryCurrentVoltage is the resolver for the lowVoltageBatteryCurrentVoltage
func (r *signalAggregationsResolver) LowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdBarometricPressure is the resolver for the obdBarometricPressure
func (r *signalAggregationsResolver) ObdBarometricPressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdCommandedEgr is the resolver for the obdCommandedEGR
func (r *signalAggregationsResolver) ObdCommandedEgr(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdCommandedEvap is the resolver for the obdCommandedEVAP
func (r *signalAggregationsResolver) ObdCommandedEvap(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdDTCList is the resolver for the obdDTCList
func (r *signalAggregationsResolver) ObdDTCList(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vs, ok := obj.ValueStrings[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vs, nil
}

// ObdDistanceSinceDTCClear is the resolver for the obdDistanceSinceDTCClear
func (r *signalAggregationsResolver) ObdDistanceSinceDTCClear(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdDistanceWithMil is the resolver for the obdDistanceWithMIL
func (r *signalAggregationsResolver) ObdDistanceWithMil(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdEngineLoad is the resolver for the obdEngineLoad
func (r *signalAggregationsResolver) ObdEngineLoad(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdFuelPressure is the resolver for the obdFuelPressure
func (r *signalAggregationsResolver) ObdFuelPressure(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdIntakeTemp is the resolver for the obdIntakeTemp
func (r *signalAggregationsResolver) ObdIntakeTemp(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdLongTermFuelTrim1 is the resolver for the obdLongTermFuelTrim1
func (r *signalAggregationsResolver) ObdLongTermFuelTrim1(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdMap is the resolver for the obdMAP
func (r *signalAggregationsResolver) ObdMap(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdO2WRSensor1Voltage is the resolver for the obdO2WRSensor1Voltage
func (r *signalAggregationsResolver) ObdO2WRSensor1Voltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdO2WRSensor2Voltage is the resolver for the obdO2WRSensor2Voltage
func (r *signalAggregationsResolver) ObdO2WRSensor2Voltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdRunTime is the resolver for the obdRunTime
func (r *signalAggregationsResolver) ObdRunTime(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdShortTermFuelTrim1 is the resolver for the obdShortTermFuelTrim1
func (r *signalAggregationsResolver) ObdShortTermFuelTrim1(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdStatusDTCCount is the resolver for the obdStatusDTCCount
func (r *signalAggregationsResolver) ObdStatusDTCCount(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// ObdWarmupsSinceDTCClear is the resolver for the obdWarmupsSinceDTCClear
func (r *signalAggregationsResolver) ObdWarmupsSinceDTCClear(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineDieselExhaustFluidCapacity is the resolver for the powertrainCombustionEngineDieselExhaustFluidCapacity
func (r *signalAggregationsResolver) PowertrainCombustionEngineDieselExhaustFluidCapacity(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineDieselExhaustFluidLevel is the resolver for the powertrainCombustionEngineDieselExhaustFluidLevel
func (r *signalAggregationsResolver) PowertrainCombustionEngineDieselExhaustFluidLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineEct is the resolver for the powertrainCombustionEngineECT
func (r *signalAggregationsResolver) PowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineEop is the resolver for the powertrainCombustionEngineEOP
func (r *signalAggregationsResolver) PowertrainCombustionEngineEop(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineEot is the resolver for the powertrainCombustionEngineEOT
func (r *signalAggregationsResolver) PowertrainCombustionEngineEot(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineEngineOilLevel is the resolver for the powertrainCombustionEngineEngineOilLevel
func (r *signalAggregationsResolver) PowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vs, ok := obj.ValueStrings[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vs, nil
}

// PowertrainCombustionEngineEngineOilRelativeLevel is the resolver for the powertrainCombustionEngineEngineOilRelativeLevel
func (r *signalAggregationsResolver) PowertrainCombustionEngineEngineOilRelativeLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineMaf is the resolver for the powertrainCombustionEngineMAF
func (r *signalAggregationsResolver) PowertrainCombustionEngineMaf(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineSpeed is the resolver for the powertrainCombustionEngineSpeed
func (r *signalAggregationsResolver) PowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineTps is the resolver for the powertrainCombustionEngineTPS
func (r *signalAggregationsResolver) PowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainCombustionEngineTorque is the resolver for the powertrainCombustionEngineTorque
func (r *signalAggregationsResolver) PowertrainCombustionEngineTorque(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainFuelSystemAbsoluteLevel is the resolver for the powertrainFuelSystemAbsoluteLevel
func (r *signalAggregationsResolver) PowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainFuelSystemRelativeLevel is the resolver for the powertrainFuelSystemRelativeLevel
func (r *signalAggregationsResolver) PowertrainFuelSystemRelativeLevel(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainFuelSystemSupportedFuelTypes is the resolver for the powertrainFuelSystemSupportedFuelTypes
func (r *signalAggregationsResolver) PowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vs, ok := obj.ValueStrings[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vs, nil
}

// PowertrainRange is the resolver for the powertrainRange
func (r *signalAggregationsResolver) PowertrainRange(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryChargingAddedEnergy is the resolver for the powertrainTractionBatteryChargingAddedEnergy
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingAddedEnergy(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryChargingChargeCurrentAc is the resolver for the powertrainTractionBatteryChargingChargeCurrentAC
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingChargeCurrentAc(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryChargingChargeLimit is the resolver for the powertrainTractionBatteryChargingChargeLimit
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryChargingChargeVoltageUnknownType is the resolver for the powertrainTractionBatteryChargingChargeVoltageUnknownType
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingChargeVoltageUnknownType(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryChargingIsCharging is the resolver for the powertrainTractionBatteryChargingIsCharging
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryChargingIsChargingCableConnected is the resolver for the powertrainTractionBatteryChargingIsChargingCableConnected
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingIsChargingCableConnected(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryChargingPower is the resolver for the powertrainTractionBatteryChargingPower
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingPower(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryCurrentPower is the resolver for the powertrainTractionBatteryCurrentPower
func (r *signalAggregationsResolver) PowertrainTractionBatteryCurrentPower(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryCurrentVoltage is the resolver for the powertrainTractionBatteryCurrentVoltage
func (r *signalAggregationsResolver) PowertrainTractionBatteryCurrentVoltage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryGrossCapacity is the resolver for the powertrainTractionBatteryGrossCapacity
func (r *signalAggregationsResolver) PowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryRange is the resolver for the powertrainTractionBatteryRange
func (r *signalAggregationsResolver) PowertrainTractionBatteryRange(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryStateOfChargeCurrent is the resolver for the powertrainTractionBatteryStateOfChargeCurrent
func (r *signalAggregationsResolver) PowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryStateOfChargeCurrentEnergy is the resolver for the powertrainTractionBatteryStateOfChargeCurrentEnergy
func (r *signalAggregationsResolver) PowertrainTractionBatteryStateOfChargeCurrentEnergy(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryStateOfHealth is the resolver for the powertrainTractionBatteryStateOfHealth
func (r *signalAggregationsResolver) PowertrainTractionBatteryStateOfHealth(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTractionBatteryTemperatureAverage is the resolver for the powertrainTractionBatteryTemperatureAverage
func (r *signalAggregationsResolver) PowertrainTractionBatteryTemperatureAverage(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTransmissionCurrentGear is the resolver for the powertrainTransmissionCurrentGear
func (r *signalAggregationsResolver) PowertrainTransmissionCurrentGear(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTransmissionTemperature is the resolver for the powertrainTransmissionTemperature
func (r *signalAggregationsResolver) PowertrainTransmissionTemperature(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainTransmissionTravelledDistance is the resolver for the powertrainTransmissionTravelledDistance
func (r *signalAggregationsResolver) PowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// PowertrainType is the resolver for the powertrainType
func (r *signalAggregationsResolver) PowertrainType(ctx context.Context, obj *model.SignalAggregations, agg model.StringAggregation) (*string, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vs, ok := obj.ValueStrings[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vs, nil
}

// ServiceDistanceToService is the resolver for the serviceDistanceToService
func (r *signalAggregationsResolver) ServiceDistanceToService(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}

// Speed is the resolver for the speed
func (r *signalAggregationsResolver) Speed(ctx context.Context, obj *model.SignalAggregations, agg model.FloatAggregation, filter *model.SignalFloatFilter) (*float64, error) {
	fieldCtx := graphql.GetFieldContext(ctx)
	vn, ok := obj.ValueNumbers[fieldCtx.Field.Alias]
	if !ok {
		return nil, nil
	}
	return &vn, nil
}
