// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Node interface {
	IsNode()
	GetID() string
}

type DimoConnection struct {
	TotalCount int         `json:"totalCount"`
	Edges      []*DimoEdge `json:"edges"`
	Nodes      []*DIMOData `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

type DimoEdge struct {
	Cursor string    `json:"cursor"`
	Node   *DIMOData `json:"node"`
}

// The DimosFilter input is used to specify filtering criteria for querying dimos.
// Dimos must match all of the specified criteria.
type DimosFilter struct {
	TokenID int       `json:"tokenID"`
	Since   time.Time `json:"since"`
	Until   time.Time `json:"until"`
}

type PageInfo struct {
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	HasNextPage     bool    `json:"hasNextPage"`
}

type PageSelection struct {
	// The number of items to retrieve.
	// Mutually exclusive with `last`.
	First *int `json:"first,omitempty"`
	// A cursor for pagination. Retrieve items after this cursor.
	After *string `json:"after,omitempty"`
	// The number of items to retrieve from the end of the list.
	// Mutually exclusive with `first`.
	Last *int `json:"last,omitempty"`
	// A cursor for pagination. Retrieve items before this cursor.
	Before *string `json:"before,omitempty"`
}

// The root query type for the GraphQL schema.
type Query struct {
}

type Privilege string

const (
	PrivilegeVehicleNonLocationData Privilege = "VehicleNonLocationData"
	PrivilegeVehicleCommands        Privilege = "VehicleCommands"
	PrivilegeVehicleCurrentLocation Privilege = "VehicleCurrentLocation"
	PrivilegeVehicleAllTimeLocation Privilege = "VehicleAllTimeLocation"
	PrivilegeVehicleVinCredential   Privilege = "VehicleVinCredential"
)

var AllPrivilege = []Privilege{
	PrivilegeVehicleNonLocationData,
	PrivilegeVehicleCommands,
	PrivilegeVehicleCurrentLocation,
	PrivilegeVehicleAllTimeLocation,
	PrivilegeVehicleVinCredential,
}

func (e Privilege) IsValid() bool {
	switch e {
	case PrivilegeVehicleNonLocationData, PrivilegeVehicleCommands, PrivilegeVehicleCurrentLocation, PrivilegeVehicleAllTimeLocation, PrivilegeVehicleVinCredential:
		return true
	}
	return false
}

func (e Privilege) String() string {
	return string(e)
}

func (e *Privilege) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Privilege(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Privilege", str)
	}
	return nil
}

func (e Privilege) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
