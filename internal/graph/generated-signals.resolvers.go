package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
)

// VehicleChassisAxleRow1WheelLeftTirePressure is the Aggregation resolver for the vehicleChassisAxleRow1WheelLeftTirePressure field.
func (r *signalAggregationsResolver) VehicleChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleChassisAxleRow1WheelRightTirePressure is the Aggregation resolver for the vehicleChassisAxleRow1WheelRightTirePressure field.
func (r *signalAggregationsResolver) VehicleChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleChassisAxleRow2WheelLeftTirePressure is the Aggregation resolver for the vehicleChassisAxleRow2WheelLeftTirePressure field.
func (r *signalAggregationsResolver) VehicleChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleChassisAxleRow2WheelRightTirePressure is the Aggregation resolver for the vehicleChassisAxleRow2WheelRightTirePressure field.
func (r *signalAggregationsResolver) VehicleChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleCurrentLocationAltitude is the Aggregation resolver for the vehicleCurrentLocationAltitude field.
func (r *signalAggregationsResolver) VehicleCurrentLocationAltitude(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleCurrentLocationLatitude is the Aggregation resolver for the vehicleCurrentLocationLatitude field.
func (r *signalAggregationsResolver) VehicleCurrentLocationLatitude(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleCurrentLocationLongitude is the Aggregation resolver for the vehicleCurrentLocationLongitude field.
func (r *signalAggregationsResolver) VehicleCurrentLocationLongitude(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleCurrentLocationTimestamp is the Aggregation resolver for the vehicleCurrentLocationTimestamp field.
func (r *signalAggregationsResolver) VehicleCurrentLocationTimestamp(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehicleExteriorAirTemperature is the Aggregation resolver for the vehicleExteriorAirTemperature field.
func (r *signalAggregationsResolver) VehicleExteriorAirTemperature(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleLowVoltageBatteryCurrentVoltage is the Aggregation resolver for the vehicleLowVoltageBatteryCurrentVoltage field.
func (r *signalAggregationsResolver) VehicleLowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleOBDBarometricPressure is the Aggregation resolver for the vehicleOBDBarometricPressure field.
func (r *signalAggregationsResolver) VehicleOBDBarometricPressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleOBDEngineLoad is the Aggregation resolver for the vehicleOBDEngineLoad field.
func (r *signalAggregationsResolver) VehicleOBDEngineLoad(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleOBDIntakeTemp is the Aggregation resolver for the vehicleOBDIntakeTemp field.
func (r *signalAggregationsResolver) VehicleOBDIntakeTemp(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleOBDRunTime is the Aggregation resolver for the vehicleOBDRunTime field.
func (r *signalAggregationsResolver) VehicleOBDRunTime(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineEct is the resolver for the vehiclePowertrainCombustionEngineECT field.
func (r *signalAggregationsResolver) VehiclePowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineEngineOilLevel is the Aggregation resolver for the vehiclePowertrainCombustionEngineEngineOilLevel field.
func (r *signalAggregationsResolver) VehiclePowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineSpeed is the Aggregation resolver for the vehiclePowertrainCombustionEngineSpeed field.
func (r *signalAggregationsResolver) VehiclePowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineTps is the resolver for the vehiclePowertrainCombustionEngineTPS field.
func (r *signalAggregationsResolver) VehiclePowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainFuelSystemAbsoluteLevel is the Aggregation resolver for the vehiclePowertrainFuelSystemAbsoluteLevel field.
func (r *signalAggregationsResolver) VehiclePowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainFuelSystemSupportedFuelTypes is the Aggregation resolver for the vehiclePowertrainFuelSystemSupportedFuelTypes field.
func (r *signalAggregationsResolver) VehiclePowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehiclePowertrainRange is the Aggregation resolver for the vehiclePowertrainRange field.
func (r *signalAggregationsResolver) VehiclePowertrainRange(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryChargingChargeLimit is the Aggregation resolver for the vehiclePowertrainTractionBatteryChargingChargeLimit field.
func (r *signalAggregationsResolver) VehiclePowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryChargingIsCharging is the Aggregation resolver for the vehiclePowertrainTractionBatteryChargingIsCharging field.
func (r *signalAggregationsResolver) VehiclePowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryGrossCapacity is the Aggregation resolver for the vehiclePowertrainTractionBatteryGrossCapacity field.
func (r *signalAggregationsResolver) VehiclePowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryStateOfChargeCurrent is the Aggregation resolver for the vehiclePowertrainTractionBatteryStateOfChargeCurrent field.
func (r *signalAggregationsResolver) VehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainTransmissionTravelledDistance is the Aggregation resolver for the vehiclePowertrainTransmissionTravelledDistance field.
func (r *signalAggregationsResolver) VehiclePowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehiclePowertrainType is the Aggregation resolver for the vehiclePowertrainType field.
func (r *signalAggregationsResolver) VehiclePowertrainType(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehicleSpeed is the Aggregation resolver for the vehicleSpeed field.
func (r *signalAggregationsResolver) VehicleSpeed(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleVehicleIdentificationBrand is the Aggregation resolver for the vehicleVehicleIdentificationBrand field.
func (r *signalAggregationsResolver) VehicleVehicleIdentificationBrand(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehicleVehicleIdentificationModel is the Aggregation resolver for the vehicleVehicleIdentificationModel field.
func (r *signalAggregationsResolver) VehicleVehicleIdentificationModel(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehicleVehicleIdentificationYear is the Aggregation resolver for the vehicleVehicleIdentificationYear field.
func (r *signalAggregationsResolver) VehicleVehicleIdentificationYear(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleChassisAxleRow1WheelLeftTirePressure is the Collection resolver for the vehicleChassisAxleRow1WheelLeftTirePressure field.
func (r *signalCollectionResolver) VehicleChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleChassisAxleRow1WheelRightTirePressure is the Collection resolver for the vehicleChassisAxleRow1WheelRightTirePressure field.
func (r *signalCollectionResolver) VehicleChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleChassisAxleRow2WheelLeftTirePressure is the Collection resolver for the vehicleChassisAxleRow2WheelLeftTirePressure field.
func (r *signalCollectionResolver) VehicleChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleChassisAxleRow2WheelRightTirePressure is the Collection resolver for the vehicleChassisAxleRow2WheelRightTirePressure field.
func (r *signalCollectionResolver) VehicleChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleCurrentLocationAltitude is the Collection resolver for the vehicleCurrentLocationAltitude field.
func (r *signalCollectionResolver) VehicleCurrentLocationAltitude(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleCurrentLocationLatitude is the Collection resolver for the vehicleCurrentLocationLatitude field.
func (r *signalCollectionResolver) VehicleCurrentLocationLatitude(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleCurrentLocationLongitude is the Collection resolver for the vehicleCurrentLocationLongitude field.
func (r *signalCollectionResolver) VehicleCurrentLocationLongitude(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleCurrentLocationTimestamp is the Collection resolver for the vehicleCurrentLocationTimestamp field.
func (r *signalCollectionResolver) VehicleCurrentLocationTimestamp(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehicleExteriorAirTemperature is the Collection resolver for the vehicleExteriorAirTemperature field.
func (r *signalCollectionResolver) VehicleExteriorAirTemperature(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleLowVoltageBatteryCurrentVoltage is the Collection resolver for the vehicleLowVoltageBatteryCurrentVoltage field.
func (r *signalCollectionResolver) VehicleLowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleOBDBarometricPressure is the Collection resolver for the vehicleOBDBarometricPressure field.
func (r *signalCollectionResolver) VehicleOBDBarometricPressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleOBDEngineLoad is the Collection resolver for the vehicleOBDEngineLoad field.
func (r *signalCollectionResolver) VehicleOBDEngineLoad(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleOBDIntakeTemp is the Collection resolver for the vehicleOBDIntakeTemp field.
func (r *signalCollectionResolver) VehicleOBDIntakeTemp(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleOBDRunTime is the Collection resolver for the vehicleOBDRunTime field.
func (r *signalCollectionResolver) VehicleOBDRunTime(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineEct is the resolver for the vehiclePowertrainCombustionEngineECT field.
func (r *signalCollectionResolver) VehiclePowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineEngineOilLevel is the Collection resolver for the vehiclePowertrainCombustionEngineEngineOilLevel field.
func (r *signalCollectionResolver) VehiclePowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineSpeed is the Collection resolver for the vehiclePowertrainCombustionEngineSpeed field.
func (r *signalCollectionResolver) VehiclePowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainCombustionEngineTps is the resolver for the vehiclePowertrainCombustionEngineTPS field.
func (r *signalCollectionResolver) VehiclePowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainFuelSystemAbsoluteLevel is the Collection resolver for the vehiclePowertrainFuelSystemAbsoluteLevel field.
func (r *signalCollectionResolver) VehiclePowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainFuelSystemSupportedFuelTypes is the Collection resolver for the vehiclePowertrainFuelSystemSupportedFuelTypes field.
func (r *signalCollectionResolver) VehiclePowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehiclePowertrainRange is the Collection resolver for the vehiclePowertrainRange field.
func (r *signalCollectionResolver) VehiclePowertrainRange(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryChargingChargeLimit is the Collection resolver for the vehiclePowertrainTractionBatteryChargingChargeLimit field.
func (r *signalCollectionResolver) VehiclePowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryChargingIsCharging is the Collection resolver for the vehiclePowertrainTractionBatteryChargingIsCharging field.
func (r *signalCollectionResolver) VehiclePowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryGrossCapacity is the Collection resolver for the vehiclePowertrainTractionBatteryGrossCapacity field.
func (r *signalCollectionResolver) VehiclePowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainTractionBatteryStateOfChargeCurrent is the Collection resolver for the vehiclePowertrainTractionBatteryStateOfChargeCurrent field.
func (r *signalCollectionResolver) VehiclePowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainTransmissionTravelledDistance is the Collection resolver for the vehiclePowertrainTransmissionTravelledDistance field.
func (r *signalCollectionResolver) VehiclePowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehiclePowertrainType is the Collection resolver for the vehiclePowertrainType field.
func (r *signalCollectionResolver) VehiclePowertrainType(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehicleSpeed is the Collection resolver for the vehicleSpeed field.
func (r *signalCollectionResolver) VehicleSpeed(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleVehicleIdentificationBrand is the Collection resolver for the vehicleVehicleIdentificationBrand field.
func (r *signalCollectionResolver) VehicleVehicleIdentificationBrand(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehicleVehicleIdentificationModel is the Collection resolver for the vehicleVehicleIdentificationModel field.
func (r *signalCollectionResolver) VehicleVehicleIdentificationModel(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehicleVehicleIdentificationYear is the Collection resolver for the vehicleVehicleIdentificationYear field.
func (r *signalCollectionResolver) VehicleVehicleIdentificationYear(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}
