package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
)

// ChassisAxleRow1WheelLeftTirePressure is the Aggregation resolver for the chassisAxleRow1WheelLeftTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// ChassisAxleRow1WheelRightTirePressure is the Aggregation resolver for the chassisAxleRow1WheelRightTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// ChassisAxleRow2WheelLeftTirePressure is the Aggregation resolver for the chassisAxleRow2WheelLeftTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// ChassisAxleRow2WheelRightTirePressure is the Aggregation resolver for the chassisAxleRow2WheelRightTirePressure field.
func (r *signalAggregationsResolver) ChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// CurrentLocationAltitude is the Aggregation resolver for the currentLocationAltitude field.
func (r *signalAggregationsResolver) CurrentLocationAltitude(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// CurrentLocationLatitude is the Aggregation resolver for the currentLocationLatitude field.
func (r *signalAggregationsResolver) CurrentLocationLatitude(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// CurrentLocationLongitude is the Aggregation resolver for the currentLocationLongitude field.
func (r *signalAggregationsResolver) CurrentLocationLongitude(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// CurrentLocationTimestamp is the Aggregation resolver for the currentLocationTimestamp field.
func (r *signalAggregationsResolver) CurrentLocationTimestamp(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// DIMOAftermarketHdop is the Aggregation resolver for the dIMOAftermarketHdop field.
func (r *signalAggregationsResolver) DIMOAftermarketHdop(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// DIMOAftermarketNsat is the Aggregation resolver for the dIMOAftermarketNsat field.
func (r *signalAggregationsResolver) DIMOAftermarketNsat(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// DIMOAftermarketSsid is the Aggregation resolver for the dIMOAftermarketSsid field.
func (r *signalAggregationsResolver) DIMOAftermarketSsid(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// DIMOAftermarketWPAState is the Aggregation resolver for the dIMOAftermarketWPAState field.
func (r *signalAggregationsResolver) DIMOAftermarketWPAState(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// ExteriorAirTemperature is the Aggregation resolver for the exteriorAirTemperature field.
func (r *signalAggregationsResolver) ExteriorAirTemperature(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// LowVoltageBatteryCurrentVoltage is the Aggregation resolver for the lowVoltageBatteryCurrentVoltage field.
func (r *signalAggregationsResolver) LowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// OBDBarometricPressure is the Aggregation resolver for the oBDBarometricPressure field.
func (r *signalAggregationsResolver) OBDBarometricPressure(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// OBDEngineLoad is the Aggregation resolver for the oBDEngineLoad field.
func (r *signalAggregationsResolver) OBDEngineLoad(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// OBDIntakeTemp is the Aggregation resolver for the oBDIntakeTemp field.
func (r *signalAggregationsResolver) OBDIntakeTemp(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// OBDRunTime is the Aggregation resolver for the oBDRunTime field.
func (r *signalAggregationsResolver) OBDRunTime(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainCombustionEngineEct is the Aggregation resolver for the powertrainCombustionEngineEct field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainCombustionEngineEngineOilLevel is the Aggregation resolver for the powertrainCombustionEngineEngineOilLevel field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// PowertrainCombustionEngineMaf is the Aggregation resolver for the powertrainCombustionEngineMaf field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineMaf(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainCombustionEngineSpeed is the Aggregation resolver for the powertrainCombustionEngineSpeed field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainCombustionEngineTps is the Aggregation resolver for the powertrainCombustionEngineTps field.
func (r *signalAggregationsResolver) PowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainFuelSystemAbsoluteLevel is the Aggregation resolver for the powertrainFuelSystemAbsoluteLevel field.
func (r *signalAggregationsResolver) PowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainFuelSystemSupportedFuelTypes is the Aggregation resolver for the powertrainFuelSystemSupportedFuelTypes field.
func (r *signalAggregationsResolver) PowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// PowertrainRange is the Aggregation resolver for the powertrainRange field.
func (r *signalAggregationsResolver) PowertrainRange(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainTractionBatteryChargingChargeLimit is the Aggregation resolver for the powertrainTractionBatteryChargingChargeLimit field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainTractionBatteryChargingIsCharging is the Aggregation resolver for the powertrainTractionBatteryChargingIsCharging field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// PowertrainTractionBatteryGrossCapacity is the Aggregation resolver for the powertrainTractionBatteryGrossCapacity field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainTractionBatteryStateOfChargeCurrent is the Aggregation resolver for the powertrainTractionBatteryStateOfChargeCurrent field.
func (r *signalAggregationsResolver) PowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainTransmissionTravelledDistance is the Aggregation resolver for the powertrainTransmissionTravelledDistance field.
func (r *signalAggregationsResolver) PowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// PowertrainType is the Aggregation resolver for the powertrainType field.
func (r *signalAggregationsResolver) PowertrainType(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// Speed is the Aggregation resolver for the speed field.
func (r *signalAggregationsResolver) Speed(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// VehicleIdentificationBrand is the Aggregation resolver for the vehicleIdentificationBrand field.
func (r *signalAggregationsResolver) VehicleIdentificationBrand(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehicleIdentificationModel is the Aggregation resolver for the vehicleIdentificationModel field.
func (r *signalAggregationsResolver) VehicleIdentificationModel(ctx context.Context, obj *model.SignalsWithID, agg model.StringAggregation) ([]*model.SignalString, error) {
	sigArgs, err := getStringArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalString(ctx, sigArgs)
}

// VehicleIdentificationYear is the Aggregation resolver for the vehicleIdentificationYear field.
func (r *signalAggregationsResolver) VehicleIdentificationYear(ctx context.Context, obj *model.SignalsWithID, agg model.FloatAggregation) ([]*model.SignalFloat, error) {
	sigArgs, err := getFloatArgs(ctx, obj, agg)
	if err != nil {
		return nil, err
	}
	return r.GetSignalFloats(ctx, sigArgs)
}

// ChassisAxleRow1WheelLeftTirePressure is the Collection resolver for the chassisAxleRow1WheelLeftTirePressure field.
func (r *signalCollectionResolver) ChassisAxleRow1WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// ChassisAxleRow1WheelRightTirePressure is the Collection resolver for the chassisAxleRow1WheelRightTirePressure field.
func (r *signalCollectionResolver) ChassisAxleRow1WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// ChassisAxleRow2WheelLeftTirePressure is the Collection resolver for the chassisAxleRow2WheelLeftTirePressure field.
func (r *signalCollectionResolver) ChassisAxleRow2WheelLeftTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// ChassisAxleRow2WheelRightTirePressure is the Collection resolver for the chassisAxleRow2WheelRightTirePressure field.
func (r *signalCollectionResolver) ChassisAxleRow2WheelRightTirePressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// CurrentLocationAltitude is the Collection resolver for the currentLocationAltitude field.
func (r *signalCollectionResolver) CurrentLocationAltitude(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// CurrentLocationLatitude is the Collection resolver for the currentLocationLatitude field.
func (r *signalCollectionResolver) CurrentLocationLatitude(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// CurrentLocationLongitude is the Collection resolver for the currentLocationLongitude field.
func (r *signalCollectionResolver) CurrentLocationLongitude(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// CurrentLocationTimestamp is the Collection resolver for the currentLocationTimestamp field.
func (r *signalCollectionResolver) CurrentLocationTimestamp(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// DIMOAftermarketHdop is the Collection resolver for the dIMOAftermarketHdop field.
func (r *signalCollectionResolver) DIMOAftermarketHdop(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// DIMOAftermarketNsat is the Collection resolver for the dIMOAftermarketNsat field.
func (r *signalCollectionResolver) DIMOAftermarketNsat(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// DIMOAftermarketSsid is the Collection resolver for the dIMOAftermarketSsid field.
func (r *signalCollectionResolver) DIMOAftermarketSsid(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// DIMOAftermarketWPAState is the Collection resolver for the dIMOAftermarketWPAState field.
func (r *signalCollectionResolver) DIMOAftermarketWPAState(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// ExteriorAirTemperature is the Collection resolver for the exteriorAirTemperature field.
func (r *signalCollectionResolver) ExteriorAirTemperature(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// LowVoltageBatteryCurrentVoltage is the Collection resolver for the lowVoltageBatteryCurrentVoltage field.
func (r *signalCollectionResolver) LowVoltageBatteryCurrentVoltage(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// OBDBarometricPressure is the Collection resolver for the oBDBarometricPressure field.
func (r *signalCollectionResolver) OBDBarometricPressure(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// OBDEngineLoad is the Collection resolver for the oBDEngineLoad field.
func (r *signalCollectionResolver) OBDEngineLoad(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// OBDIntakeTemp is the Collection resolver for the oBDIntakeTemp field.
func (r *signalCollectionResolver) OBDIntakeTemp(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// OBDRunTime is the Collection resolver for the oBDRunTime field.
func (r *signalCollectionResolver) OBDRunTime(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainCombustionEngineEct is the Collection resolver for the powertrainCombustionEngineEct field.
func (r *signalCollectionResolver) PowertrainCombustionEngineEct(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainCombustionEngineEngineOilLevel is the Collection resolver for the powertrainCombustionEngineEngineOilLevel field.
func (r *signalCollectionResolver) PowertrainCombustionEngineEngineOilLevel(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// PowertrainCombustionEngineMaf is the Collection resolver for the powertrainCombustionEngineMaf field.
func (r *signalCollectionResolver) PowertrainCombustionEngineMaf(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainCombustionEngineSpeed is the Collection resolver for the powertrainCombustionEngineSpeed field.
func (r *signalCollectionResolver) PowertrainCombustionEngineSpeed(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainCombustionEngineTps is the Collection resolver for the powertrainCombustionEngineTps field.
func (r *signalCollectionResolver) PowertrainCombustionEngineTps(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainFuelSystemAbsoluteLevel is the Collection resolver for the powertrainFuelSystemAbsoluteLevel field.
func (r *signalCollectionResolver) PowertrainFuelSystemAbsoluteLevel(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainFuelSystemSupportedFuelTypes is the Collection resolver for the powertrainFuelSystemSupportedFuelTypes field.
func (r *signalCollectionResolver) PowertrainFuelSystemSupportedFuelTypes(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// PowertrainRange is the Collection resolver for the powertrainRange field.
func (r *signalCollectionResolver) PowertrainRange(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainTractionBatteryChargingChargeLimit is the Collection resolver for the powertrainTractionBatteryChargingChargeLimit field.
func (r *signalCollectionResolver) PowertrainTractionBatteryChargingChargeLimit(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainTractionBatteryChargingIsCharging is the Collection resolver for the powertrainTractionBatteryChargingIsCharging field.
func (r *signalCollectionResolver) PowertrainTractionBatteryChargingIsCharging(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// PowertrainTractionBatteryGrossCapacity is the Collection resolver for the powertrainTractionBatteryGrossCapacity field.
func (r *signalCollectionResolver) PowertrainTractionBatteryGrossCapacity(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainTractionBatteryStateOfChargeCurrent is the Collection resolver for the powertrainTractionBatteryStateOfChargeCurrent field.
func (r *signalCollectionResolver) PowertrainTractionBatteryStateOfChargeCurrent(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainTransmissionTravelledDistance is the Collection resolver for the powertrainTransmissionTravelledDistance field.
func (r *signalCollectionResolver) PowertrainTransmissionTravelledDistance(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// PowertrainType is the Collection resolver for the powertrainType field.
func (r *signalCollectionResolver) PowertrainType(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// Speed is the Collection resolver for the speed field.
func (r *signalCollectionResolver) Speed(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}

// VehicleIdentificationBrand is the Collection resolver for the vehicleIdentificationBrand field.
func (r *signalCollectionResolver) VehicleIdentificationBrand(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehicleIdentificationModel is the Collection resolver for the vehicleIdentificationModel field.
func (r *signalCollectionResolver) VehicleIdentificationModel(ctx context.Context, obj *model.SignalsWithID) (*model.SignalString, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalString(ctx, sigArgs)
}

// VehicleIdentificationYear is the Collection resolver for the vehicleIdentificationYear field.
func (r *signalCollectionResolver) VehicleIdentificationYear(ctx context.Context, obj *model.SignalsWithID) (*model.SignalFloat, error) {
	sigArgs, err := getSignalArgs(ctx, obj)
	if err != nil {
		return nil, err
	}
	return r.GetLatestSignalFloat(ctx, sigArgs)
}
