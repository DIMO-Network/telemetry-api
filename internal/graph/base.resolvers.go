package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"

	"github.com/DIMO-Network/telemetry-api/internal/graph/model"
)

// Signals is the resolver for the Signals field.
func (r *queryResolver) Signals(ctx context.Context, tokenID int, from time.Time, to time.Time, filter *model.SignalFilter) (*model.SignalsWithID, error) {
	return &model.SignalsWithID{TokenID: uint32(tokenID)}, nil
}

// SignalsLatest is the resolver for the SignalsLatest field.
func (r *queryResolver) SignalsLatest(ctx context.Context, tokenID int, filter *model.SignalFilter) (*model.SignalsWithID, error) {
	return &model.SignalsWithID{TokenID: uint32(tokenID)}, nil
}

// LastSeen is the resolver for the lastSeen field.
func (r *signalCollectionResolver) LastSeen(ctx context.Context, obj *model.SignalsWithID) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: LastSeen - lastSeen"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// SignalAggregations returns SignalAggregationsResolver implementation.
func (r *Resolver) SignalAggregations() SignalAggregationsResolver {
	return &signalAggregationsResolver{r}
}

// SignalCollection returns SignalCollectionResolver implementation.
func (r *Resolver) SignalCollection() SignalCollectionResolver { return &signalCollectionResolver{r} }

type queryResolver struct{ *Resolver }
type signalAggregationsResolver struct{ *Resolver }
type signalCollectionResolver struct{ *Resolver }
